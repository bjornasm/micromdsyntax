filetype: markdown
detect:
  filename: \.(livemd|md|mkd|mkdn|markdown)$
rules:
# ----- Rule set for language: ada -----
- comment:
    start: (?i)^```ada$
    end: ^```$
    rules:
    - symbol.operator: ([.:;,+*|=!?\\%]|<|>|/|-|&)
    - symbol.brackets: '[(){}]|\[|\]'
    - statement.reserved: \b(abort|abs|abstract|accept|access|aliased|all|and|array|at|begin|body|case)\b
    - statement.reserved: 
        \b(constant|declare|delay|delta|digits|do|else|elsif|end|entry|exception|exit|for|function)\b
    - statement.reserved: 
        \b(generic|goto|if|in|interface|is|limited|loop|mod|new|not|null|of|or|others|out|overriding)\b
    - statement.reserved: 
        \b(package|pragma|private|procedure|protected|raise|range|record|rem|renames|return|requeue)\b
    - statement.reserved: 
        \b(reverse|select|separate|some|subtype|synchronized|tagged|task|terminate|then|type|until)\b
    - statement.reserved: \b(use|when|while|with|xor)\b
    - constant.bool: \b(TRUE|FALSE)
    - constant.number: ([0-9]+)
    - type.storage: \b(INTEGER|NATURAL|POSITIVE|FLOAT|CHARACTER|STRING)\b
    - type.storage: \b(LONG_INTEGER|SHORT_INTEGER|LONG_FLOAT|SHORT_FLOAT)\b
    - constant.string.char: \'.\'
    - constant.string:
        start: \"
        end: \"
        skip: \\.
        rules:
        - constant.specialChar: (\\0|\\\\|\\t|\\n|\\r|\\"|\\')
        - constant.interpolation: \\\([[:graph:]]*\)
        - constant.unicode: \\u\{[[:xdigit:]]+}
    - comment.line: --.*
    - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: apacheconf -----
- comment:
    start: (?i)^```apacheconf$
    end: ^```$
    rules:
    - identifier: 
        (AcceptMutex|AcceptPathInfo|AccessFileName|Action|AddAlt|AddAltByEncoding|AddAltByType|AddCharset|AddDefaultCharset|AddDescription|AddEncoding)
    - identifier: 
        (AddHandler|AddIcon|AddIconByEncoding|AddIconByType|AddInputFilter|AddLanguage|AddModuleInfo|AddOutputFilter|AddOutputFilterByType|AddType|Alias|AliasMatch)
    - identifier: 
        (Allow|AllowCONNECT|AllowEncodedSlashes|AllowOverride|Anonymous|Anonymous_Authoritative|Anonymous_LogEmail|Anonymous_MustGiveEmail|Anonymous_NoUserID)
    - identifier: 
        (Anonymous_VerifyEmail|AssignUserID|AuthAuthoritative|AuthDBMAuthoritative|AuthDBMGroupFile|AuthDBMType|AuthDBMUserFile|AuthDigestAlgorithm)
    - identifier: 
        (AuthDigestDomain|AuthDigestFile|AuthDigestGroupFile|AuthDigestNcCheck|AuthDigestNonceFormat|AuthDigestNonceLifetime|AuthDigestQop|AuthDigestShmemSize)
    - identifier: 
        (AuthGroupFile|AuthLDAPAuthoritative|AuthLDAPBindDN|AuthLDAPBindPassword|AuthLDAPCharsetConfig|AuthLDAPCompareDNOnServer|AuthLDAPDereferenceAliases)
    - identifier: 
        (AuthLDAPEnabled|AuthLDAPFrontPageHack|AuthLDAPGroupAttribute|AuthLDAPGroupAttributeIsDN|AuthLDAPRemoteUserIsDN|AuthLDAPUrl|AuthName|AuthType|AuthUserFile)
    - identifier: 
        (BrowserMatch|BrowserMatchNoCase|BS2000Account|BufferedLogs|CacheDefaultExpire|CacheDirLength|CacheDirLevels|CacheDisable|CacheEnable|CacheExpiryCheck)
    - identifier: 
        (CacheFile|CacheForceCompletion|CacheGcClean|CacheGcDaily|CacheGcInterval|CacheGcMemUsage|CacheGcUnused|CacheIgnoreCacheControl|CacheIgnoreHeaders)
    - identifier: 
        (CacheIgnoreNoLastMod|CacheLastModifiedFactor|CacheMaxExpire|CacheMaxFileSize|CacheMinFileSize|CacheNegotiatedDocs|CacheRoot|CacheSize|CacheTimeMargin)
    - identifier: 
        (CGIMapExtension|CharsetDefault|CharsetOptions|CharsetSourceEnc|CheckSpelling|ChildPerUserID|ContentDigest|CookieDomain|CookieExpires|CookieLog|CookieName)
    - identifier: 
        (CookieStyle|CookieTracking|CoreDumpDirectory|CustomLog|Dav|DavDepthInfinity|DavLockDB|DavMinTimeout|DefaultIcon|DefaultLanguage|DefaultType)
    - identifier: 
        (DeflateBufferSize|DeflateCompressionLevel|DeflateFilterNote|DeflateMemLevel|DeflateWindowSize|Deny|Directory|DirectoryIndex|DirectoryMatch|DirectorySlash)
    - identifier: 
        (DocumentRoot|DumpIOInput|DumpIOOutput|EnableExceptionHook|EnableMMAP|EnableSendfile|ErrorDocument|ErrorLog|Example|ExpiresActive|ExpiresByType)
    - identifier: 
        (ExpiresDefault|ExtendedStatus|ExtFilterDefine|ExtFilterOptions|FileETag|Files|FilesMatch|ForceLanguagePriority|ForceType|ForensicLog|Group|Header)
    - identifier: 
        (HeaderName|HostnameLookups|IdentityCheck|IfDefine|IfModule|IfVersion|ImapBase|ImapDefault|ImapMenu|Include|IndexIgnore|IndexOptions|IndexOrderDefault)
    - identifier: 
        (ISAPIAppendLogToErrors|ISAPIAppendLogToQuery|ISAPICacheFile|ISAPIFakeAsync|ISAPILogNotSupported|ISAPIReadAheadBuffer|KeepAlive|KeepAliveTimeout)
    - identifier: 
        (LanguagePriority|LDAPCacheEntries|LDAPCacheTTL|LDAPConnectionTimeout|LDAPOpCacheEntries|LDAPOpCacheTTL|LDAPSharedCacheFile|LDAPSharedCacheSize)
    - identifier: 
        (LDAPTrustedCA|LDAPTrustedCAType|Limit|LimitExcept|LimitInternalRecursion|LimitRequestBody|LimitRequestFields|LimitRequestFieldSize|LimitRequestLine)
    - identifier: 
        (LimitXMLRequestBody|Listen|ListenBackLog|LoadFile|LoadModule|Location|LocationMatch|LockFile|LogFormat|LogLevel|MaxClients|MaxKeepAliveRequests)
    - identifier: 
        (MaxMemFree|MaxRequestsPerChild|MaxRequestsPerThread|MaxSpareServers|MaxSpareThreads|MaxThreads|MaxThreadsPerChild|MCacheMaxObjectCount|MCacheMaxObjectSize)
    - identifier: 
        (MCacheMaxStreamingBuffer|MCacheMinObjectSize|MCacheRemovalAlgorithm|MCacheSize|MetaDir|MetaFiles|MetaSuffix|MimeMagicFile|MinSpareServers|MinSpareThreads)
    - identifier: 
        (MMapFile|ModMimeUsePathInfo|MultiviewsMatch|NameVirtualHost|NoProxy|NumServers|NWSSLTrustedCerts|NWSSLUpgradeable|Options|Order|PassEnv|PidFile)
    - identifier: 
        (ProtocolEcho|Proxy|ProxyBadHeader|ProxyBlock|ProxyDomain|ProxyErrorOverride|ProxyIOBufferSize|ProxyMatch|ProxyMaxForwards|ProxyPass|ProxyPassReverse)
    - identifier: 
        (ProxyPreserveHost|ProxyReceiveBufferSize|ProxyRemote|ProxyRemoteMatch|ProxyRequests|ProxyTimeout|ProxyVia|ReadmeName|Redirect|RedirectMatch)
    - identifier: 
        (RedirectPermanent|RedirectTemp|RemoveCharset|RemoveEncoding|RemoveHandler|RemoveInputFilter|RemoveLanguage|RemoveOutputFilter|RemoveType|RequestHeader)
    - identifier: 
        (Require|RewriteBase|RewriteCond|RewriteEngine|RewriteLock|RewriteLog|RewriteLogLevel|RewriteMap|RewriteOptions|RewriteRule|RLimitCPU|RLimitMEM|RLimitNPROC)
    - identifier: 
        (Satisfy|ScoreBoardFile|Script|ScriptAlias|ScriptAliasMatch|ScriptInterpreterSource|ScriptLog|ScriptLogBuffer|ScriptLogLength|ScriptSock|SecureListen)
    - identifier: 
        (SendBufferSize|ServerAdmin|ServerAlias|ServerLimit|ServerName|ServerPath|ServerRoot|ServerSignature|ServerTokens|SetEnv|SetEnvIf|SetEnvIfNoCase|SetHandler)
    - identifier: 
        (SetInputFilter|SetOutputFilter|SSIEndTag|SSIErrorMsg|SSIStartTag|SSITimeFormat|SSIUndefinedEcho|SSLCACertificateFile|SSLCACertificatePath)
    - identifier: 
        (SSLCARevocationFile|SSLCARevocationPath|SSLCertificateChainFile|SSLCertificateFile|SSLCertificateKeyFile|SSLCipherSuite|SSLEngine|SSLMutex|SSLOptions)
    - identifier: 
        (SSLPassPhraseDialog|SSLProtocol|SSLProxyCACertificateFile|SSLProxyCACertificatePath|SSLProxyCARevocationFile|SSLProxyCARevocationPath|SSLProxyCipherSuite)
    - identifier: 
        (SSLProxyEngine|SSLProxyMachineCertificateFile|SSLProxyMachineCertificatePath|SSLProxyProtocol|SSLProxyVerify|SSLProxyVerifyDepth|SSLRandomSeed|SSLRequire)
    - identifier: 
        (SSLRequireSSL|SSLSessionCache|SSLSessionCacheTimeout|SSLUserName|SSLVerifyClient|SSLVerifyDepth|StartServers|StartThreads|SuexecUserGroup|ThreadLimit)
    - identifier: 
        (ThreadsPerChild|ThreadStackSize|TimeOut|TraceEnable|TransferLog|TypesConfig|UnsetEnv|UseCanonicalName|User|UserDir|VirtualDocumentRoot)
    - identifier: 
        (VirtualDocumentRootIP|VirtualHost|VirtualScriptAlias|VirtualScriptAliasIP|Win32DisableAcceptEx|XBitHack)
    - symbol.tag: <[^>]+>
    - identifier: </?[A-Za-z]+
    - identifier: (<|</|>)
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - comment:
        start: '#'
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: arduino -----
- comment:
    start: (?i)^```arduino$
    end: ^```$
    rules:
    - identifier: \b[A-Z_][0-9A-Z_]+\b
    - type: \b((s?size)|((u_?)?int(8|16|32|64|ptr)))_t\b
    - constant: (?i)\b(HIGH|LOW|INPUT|OUTPUT)\b
    - constant: (?i)\b(DEC|BIN|HEX|OCT|BYTE)\b
    - constant: (?i)\b(PI|HALF_PI|TWO_PI)\b
    - constant: (?i)\b(LSBFIRST|MSBFIRST)\b
    - constant: (?i)\b(CHANGE|FALLING|RISING)\b
    - constant: (?i)\b(DEFAULT|EXTERNAL|INTERNAL|INTERNAL1V1|INTERNAL2V56)\b
    - type: \b(boolean|byte|char|float|int|long|word)\b
    - statement: 
        \b(case|class|default|do|double|else|false|for|if|new|null|private|protected|public|short|signed|static|String|switch|this|throw|try|true|unsigned|void|while)\b
    - statement: \b(goto|continue|break|return)\b
    - identifier: 
        \b(abs|acos|asin|atan|atan2|ceil|constrain|cos|degrees|exp|floor|log|map|max|min|radians|random|randomSeed|round|sin|sq|sqrt|tan)\b
    - identifier: \b(bitRead|bitWrite|bitSet|bitClear|bit|highByte|lowByte)\b
    - identifier: \b(analogReference|analogRead|analogWrite)\b
    - identifier: \b(attachInterrupt|detachInterrupt)\b
    - identifier: \b(delay|delayMicroseconds|millis|micros)\b
    - identifier: \b(pinMode|digitalWrite|digitalRead)\b
    - identifier: \b(interrupts|noInterrupts)\b
    - identifier: \b(noTone|pulseIn|shiftIn|shiftOut|tone)\b
    - identifier: 
        \b(Serial|Serial1|Serial2|Serial3|begin|end|peek|read|print|println|available|flush)\b
    - identifier: \b(setup|loop)\b
    - statement: 
        ^[[:space:]]*#[[:space:]]*(define|include(_next)?|(un|ifn?)def|endif|el(if|se)|if|warning|error|pragma)
    - constant: 
        (__attribute__[[:space:]]*\(\([^)]*\)\)|__(aligned|asm|builtin|hidden|inline|packed|restrict|section|typeof|weak)__)
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - preproc: ..+
        - constant.specialChar: \\.
    - comment:
        start: //
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment:
        start: /\*
        end: \*/
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: asciidoc -----
- comment:
    start: (?i)^```asciidoc$
    end: ^```$
    rules:
    - preproc: ^====+$
    - statement: ^==[[:space:]].*$
    - statement: ^----+$
    - symbol: ^===[[:space:]].*$
    - symbol: ^~~~~+$
    - type: ^====[[:space:]].*$
    - type: ^\^\^\^\^+$
    - constant: ^=====[[:space:]].*$
    - constant: ^\+\+\+\++$
    - type.keyword: ':.*:'
    - identifier.macro: \{[a-z0-9]*\}
    - identifier: \\\{[a-z0-9]*\}
    - identifier: \+\+\+\{[a-z0-9]*\}\+\+\+
    - statement: ^\..*$
    - identifier: ^\[(source,.+|NOTE|TIP|IMPORTANT|WARNING|CAUTION)\]
    - constant.string: .*[[:space:]]\+$
    - constant.string: _[^_]+_
    - constant.string: \*[^\*]+\*
    - constant.string: \+[^\+]+\+
    - constant.string: '`[^`]+`'
    - constant.string: \^[^\^]+\^
    - constant.string: ~[^~]+~
    - constant.string: "'[^']+'"
    - constant: "`{1,2}[^']+'{1,2}"
    - symbol: ^[[:space:]]*[\*\.-]{1,5}[[:space:]]
    - bold default: \[\[.*\]\]
    - bold default: <<.*>>
# ----- Rule set for language: asm -----
- comment:
    start: (?i)^```asm$
    end: ^```$
    rules:
    - statement: 
        \b(?i)(mov|aaa|aad|aam|aas|adc|add|and|call|cbw|clc|cld|cli|cmc|cmp|cmpsb|cmpsw|cwd|daa|das|dec|div|esc|hlt|idiv|imul|in|inc|int|into|iret|ja|jae|jb|jbe|jc|je|jg|jge|jl|jle|jna|jnae|jnb|jnbe|jnc|jne|jng|jnge|jnl|jnle|jno|jnp|jns|jnz|jo|jp|jpe|jpo|js|jz|jcxz|jmp|lahf|lds|lea|les|lock|lodsb|lodsw|loop|loope|loopne|loopnz|loopz|movsb|movsw|mul|neg|nop|or|pop|popf|push|pushf|rcl|rcr|rep|repe|repne|repnz|repz|ret|retn|retf|rol|ror|sahf|sal|sar|sbb|scasb|scasw|shl|shr|stc|std|sti|stosb|stosw|sub|test|wait|xchg|xlat|xor)(?-i)\b
    - statement: \b(?i)(bound|enter|ins|leave|outs|popa|pusha)(?-i)\b
    - statement: 
        \b(?i)(arpl|clts|lar|lgdt|lidt|lldt|lmsw|loadall|lsl|ltr|sgdt|sidt|sldt|smsw|str|verr|verw)(?-i)\b
    - statement: 
        \b(?i)(bsf|bsr|bt|btc|btr|bts|cdq|cmpsd|cwde|insd|iret|iretd|iretf|jecxz|lfs|lgs|lss|lodsd|loopw|loopew|loopnew|loopnzw|loopzw|loopd|looped|loopned|loopnzd|loopzd|cr|tr|dr|movsd|movsx|movzx|outsd|popad|popfd|pushad|pushfd|scasd|seta|setae|setb|setbe|setc|sete|setg|setge|setl|setle|setna|setnae|setnb|setnbe|setnc|setne|setng|setnge|setnl|setnle|setno|setnp|setns|setnz|seto|setp|setpe|setpo|sets|setz|shdl|shrd|stosd)(?-i)\b
    - statement: \b(?i)(bswap|cmpxcgh|invd|invlpg|wbinvd|xadd)(?-i)\b
    - statement: \b(?i)(cpuid|cmpxchg8b|rdmsr|rdtsc|wrmsr|rsm)(?-i)\b
    - statement: \b(?i)(rdpmc)(?-i)\b
    - statement: \b(?i)(syscall|sysret)(?-i)\b
    - statement: 
        \b(?i)(cmova|cmovae|cmovb|cmovbe|cmovc|cmove|cmovg|cmovge|cmovl|cmovle|cmovna|cmovnae|cmovnb|cmovnbe|cmovnc|cmovne|cmovng|cmovnge|cmovnle|cmovno|cmovpn|cmovns|cmovnz|cmovo|cmovp|cmovpe|cmovpo|cmovs|cmovz|sysenter|sysexit|ud2)(?-i)\b
    - statement: 
        \b(?i)(maskmovq|movntps|movntq|prefetch0|prefetch1|prefetch2|prefetchnta|sfence)(?-i)\b
    - statement: \b(?i)(clflush|lfence|maskmovdqu|mfence|movntdq|movnti|movntpd|pause)(?-i)\b
    - statement: \b(?i)(monitor|mwait)(?-i)\b
    - statement: 
        \b(?i)(cdqe|cqo|cmpsq|cmpxchg16b|iretq|jrcxz|lodsq|movsdx|popfq|pushfq|rdtscp|scasq|stosq|swapgs)(?-i)\b
    - statement: \b(?i)(clgi|invlpga|skinit|stgi|vmload|vmmcall|vmrun|vmsave)(?-i)\b
    - statement: 
        \b(?i)(vmptrdl|vmptrst|vmclear|vmread|vmwrite|vmcall|vmlaunch|vmresume|vmxoff|vmxon)(?-i)\b
    - statement: \b(?i)(lzcnt|popcnt)(?-i)\b
    - statement: \b(?i)(bextr|blcfill|blci|blcic|blcmask|blcs|blsfill|blsic|t1mskc|tzmsk)(?-i)\b
    - statement: 
        \b(?i)(f2xm1|fabs|fadd|faddp|fbld|fbstp|fchs|fclex|fcom|fcomp|fcompp|fdecstp|fdisi|fdiv|fvidp|fdivr|fdivrp|feni|ffree|fiadd|ficom|ficomp|fidiv|fidivr|fild|fimul|fincstp|finit|fist|fistp|fisub|fisubr|fld|fld1|fldcw|fldenv|fldenvw|fldl2e|fldl2t|fldlg2|fldln2|fldpi|fldz|fmul|fmulp|fnclex|fndisi|fneni|fninit|fnop|fnsave|fnsavenew|fnstcw|fnstenv|fnstenvw|fnstsw|fpatan|fprem|fptan|frndint|frstor|frstorw|fsave|fsavew|fscale|fsqrt|fst|fstcw|fstenv|fstenvw|fstp|fstpsw|fsub|fsubp|fsubr|fsubrp|ftst|fwait|fxam|fxch|fxtract|fyl2x|fyl2xp1)(?-i)\b
    - statement: \b(?i)(fsetpm)(?-i)\b
    - statement: 
        \b(?i)(fcos|fldenvd|fsaved|fstenvd|fprem1|frstord|fsin|fsincos|fstenvd|fucom|fucomp|fucompp)(?-i)\b
    - statement: 
        \b(?i)(fcmovb|fcmovbe|fcmove|fcmove|fcmovnb|fcmovnbe|fcmovne|fcmovnu|fcmovu)(?-i)\b
    - statement: \b(?i)(fcomi|fcomip|fucomi|fucomip)(?-i)\b
    - statement: \b(?i)(fxrstor|fxsave)(?-i)\b
    - statement: \b(?i)(fisttp)(?-i)\b
    - statement: \b(?i)(ffreep)(?-i)\b
    - statement: 
        \b(?i)(emms|movd|movq|packssdw|packsswb|packuswb|paddb|paddw|paddd|paddsb|paddsw|paddusb|paddusw|pand|pandn|por|pxor|pcmpeqb|pcmpeqw|pcmpeqd|pcmpgtb|pcmpgtw|pcmpgtd|pmaddwd|pmulhw|pmullw|psllw|pslld|psllq|psrad|psraw|psrlw|psrld|psrlq|psubb|psubw|psubd|psubsb|psubsw|psubusb|punpckhbw|punpckhwd|punpckhdq|punkcklbw|punpckldq|punpcklwd)(?-i)\b
    - statement: 
        \b(?i)(paveb|paddsiw|pmagw|pdistib|psubsiw|pmwzb|pmulhrw|pmvnzb|pmvlzb|pmvgezb|pmulhriw|pmachriw)(?-i)\b
    - statement: 
        \b(?i)(femms|pavgusb|pf2id|pfacc|pfadd|pfcmpeq|pfcmpge|pfcmpgt|pfmax|pfmin|pfmul|pfrcp|pfrcpit1|pfrcpit2|pfrsqit1|pfrsqrt|pfsub|pfsubr|pi2fd|pmulhrw|prefetch|prefetchw)(?-i)\b
    - statement: \b(?i)(pf2iw|pfnacc|pfpnacc|pi2fw|pswapd)(?-i)\b
    - statement: \b(?i)(pfrsqrtv|pfrcpv)(?-i)\b
    - statement: 
        \b(?i)(addps|addss|cmpps|cmpss|comiss|cvtpi2ps|cvtps2pi|cvtsi2ss|cvtss2si|cvttps2pi|cvttss2si|divps|divss|ldmxcsr|maxps|maxss|minps|minss|movaps|movhlps|movhps|movlhps|movlps|movmskps|movntps|movss|movups|mulps|mulss|rcpps|rcpss|rsqrtps|rsqrtss|shufps|sqrtps|sqrtss|stmxcsr|subps|subss|ucomiss|unpckhps|unpcklps)(?-i)\b
    - statement: 
        \b(?i)(andnps|andps|orps|pavgb|pavgw|pextrw|pinsrw|pmaxsw|pmaxub|pminsw|pminub|pmovmskb|pmulhuw|psadbw|pshufw|xorps)(?-i)\b
    - statement: 
        \b(?i)(movups|movss|movlps|movhlps|movlps|unpcklps|unpckhps|movhps|movlhps|prefetchnta|prefetch0|prefetch1|prefetch2|nop|movaps|cvtpi2ps|cvtsi2ss|cvtps2pi|cvttss2si|cvtps2pi|cvtss2si|ucomiss|comiss|sqrtps|sqrtss|rsqrtps|rsqrtss|rcpps|andps|orps|xorps|addps|addss|mulps|mulss|subps|subss|minps|minss|divps|divss|maxps|maxss|pshufw|ldmxcsr|stmxcsr|sfence|cmpps|cmpss|pinsrw|pextrw|shufps|pmovmskb|pminub|pmaxub|pavgb|pavgw|pmulhuw|movntq|pminsw|pmaxsw|psadbw|maskmovq)(?-i)\b
    - statement: \b(?i)(addpd|addsd|addnpd|cmppd|cmpsd)(?-i)\b
    - statement: 
        \b(?i)(addpd|addsd|andnpd|andpd|cmppd|cmpsd|comisd|cvtdq2pd|cvtdq2ps|cvtpd2dq|cvtpd2pi|cvtpd2ps|cvtpi2pd|cvtps2dq|cvtps2pd|cvtsd2si|cvtsd2ss|cvtsi2sd|cvtss2sd|cvttpd2dq|cvttpd2pi|cvttps2dq|cvttsd2si|divpd|divsd|maxpd|maxsd|minpd|minsd|movapd|movhpd|movlpd|movmskpd|movsd|movupd|mulpd|mulsd|orpd|shufpd|sqrtpd|sqrtsd|subpd|subsd|ucomisd|unpckhpd|unpcklpd|xorpd)(?-i)\b
    - statement: 
        \b(?i)(movdq2q|movdqa|movdqu|movq2dq|paddq|psubq|pmuludq|pshufhw|pshuflw|pshufd|pslldq|psrldq|punpckhqdq|punpcklqdq)(?-i)\b
    - statement: 
        \b(?i)(addsubpd|addsubps|haddpd|haddps|hsubpd|hsubps|movddup|movshdup|movsldu)(?-i)\b
    - statement: \b(?i)(lddqu)(?-i)\b
    - statement: 
        \b(?i)(psignw|psignd|psignb|pshufb|pmulhrsw|pmaddubsw|phsubw|phsubsw|phsubd|phaddw|phaddsw|phaddd|palignr|pabsw|pabsd|pabsb)(?-i)\b
    - statement: 
        \b(?i)(dpps|dppd|blendps|blendpd|blendvps|blendvpd|roundps|roundss|roundpd|roundsd|insertps|extractps)(?-i)\b
    - statement: 
        \b(?i)(mpsadbw|phminposuw|pmulld|pmuldq|pblendvb|pblendw|pminsb|pmaxsb|pminuw|pmaxuw|pminud|pmaxud|pminsd|pmaxsd|pinsrb|pinsrd/pinsrq|pextrb|pextrw|pextrd/pextrq|pmovsxbw|pmovzxbw|pmovsxbd|pmovzxbd|pmovsxbq|pmovzxbq|pmovsxwd|pmovzxwd|pmovsxwq|pmovzxwq|pmovsxdq|pmovzxdq|ptest|pcmpeqq|packusdw|movntdqa)(?-i)\b
    - statement: \b(?i)(extrq|insertq|movntsd|movntss)(?-i)\b
    - statement: \b(?i)(crc32|pcmpestri|pcmpestrm|pcmpistri|pcmpistrm|pcmpgtq)(?-i)\b
    - statement: 
        \b(?i)(vfmaddpd|vfmaddps|vfmaddsd|vfmaddss|vfmaddsubpd|vfmaddsubps|vfmsubaddpd|vfmsubaddps|vfmsubpd|vfmsubps|vfmsubsd|vfmsubss|vfnmaddpd|vfnmaddps|vfnmaddsd|vfnmaddss|vfnmsubps|vfnmsubsd|vfnmsubss)(?-i)\b
    - statement: \b(?i)(aesenc|aesenclast|aesdec|aesdeclast|aeskeygenassist|aesimc)(?-i)\b
    - statement: 
        \b(?i)(sha1rnds4|sha1nexte|sha1msg1|sha1msg2|sha256rnds2|sha256msg1|sha256msg2)(?-i)\b
    - statement: \b(?i)(aam|aad|salc|icebp|loadall|loadalld|ud1)(?-i)\b
    - identifier: 
        \b(?i)(al|ah|bl|bh|cl|ch|dl|dh|bpl|sil|r8b|r9b|r10b|r11b|dil|spl|r12b|r13b|r14b|r15)(?-i)\b
    - identifier: 
        \b(?i)(cw|sw|tw|fp_ds|fp_opc|fp_ip|fp_dp|fp_cs|cs|ss|ds|es|fs|gs|gdtr|idtr|tr|ldtr|ax|bx|cx|dx|bp|si|r8w|r9w|r10w|r11w|di|sp|r12w|r13w|r14w|r15w|ip)(?-i)\b
    - identifier: 
        \b(?i)(fp_dp|fp_ip|eax|ebx|ecx|edx|ebp|esi|r8d|r9d|r10d|r11d|edi|esp|r12d|r13d|r14d|r15d|eip|eflags|mxcsr)(?-i)\b
    - identifier: 
        \b(?i)(mm0|mm1|mm2|mm3|mm4|mm5|mm6|mm7|rax|rbx|rcx|rdx|rbp|rsi|r8|r9|r10|r11|rdi|rsp|r12|r13|r14|r15|rip|rflags|cr0|cr1|cr2|cr3|cr4|cr5|cr6|cr7|cr8|cr9|cr10|cr11|cr12|cr13|cr14|cr15|msw|dr0|dr1|dr2|dr3|r4|dr5|dr6|dr7|dr8|dr9|dr10|dr11|dr12|dr13|dr14|dr15)(?-i)\b
    - identifier: \b(?i)(st0|st1|st2|st3|st4|st5|st6|st7)(?-i)\b
    - identifier: 
        \b(?i)(xmm0|xmm1|xmm2|xmm3|xmm4|xmm5|xmm6|xmm7|xmm8|xmm9|xmm10|xmm11|xmm12|xmm13|xmm14|xmm15)(?-i)\b
    - identifier: 
        \b(?i)(ymm0|ymm1|ymm2|ymm3|ymm4|ymm5|ymm6|ymm7|ymm8|ymm9|ymm10|ymm11|ymm12|ymm13|ymm14|ymm15)(?-i)\b
    - identifier: 
        \b(?i)(zmm0|zmm1|zmm2|zmm3|zmm4|zmm5|zmm6|zmm7|zmm8|zmm9|zmm10|zmm11|zmm12|zmm13|zmm14|zmm15|zmm16|zmm17|zmm18|zmm19|zmm20|zmm21|zmm22|zmm23|zmm24|zmm25|zmm26|zmm27|zmm28|zmm29|zmm30|zmm31)(?-i)\b
    - constant.number: \b(|h|A|0x)+[0-9]+(|h|A)+\b
    - constant.number: \b0x[0-9 a-f A-F]+\b
    - preproc: '%+(\+|\?|\?\?|)[a-z A-Z 0-9]+'
    - preproc: '%\[[. a-z A-Z 0-9]*\]'
    - statement: \b(?i)(extern|global|section|segment|_start|\.text|\.data|\.bss)(?-i)\b
    - statement: \b(?i)(db|dw|dd|dq|dt|ddq|do)(?-i)\b
    - identifier: '[a-z A-Z 0-9 _]+:'
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - comment:
        start: ;
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment:
        start: //
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment:
        start: /\*
        end: \*/
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: ats -----
- comment:
    start: (?i)^```ats$
    end: ^```$
    rules:
    - default: \b[[:alnum:]]+[^0-9A-Za-z]
    - symbol.operator: "[.:;+`|~<>?='\\&]|/|%|-|,|!|\\*|@|\\#"
    - symbol.operator: \^
    - type: 
        \b(addr|age?z|bool|char|cls|schar|uchar|double|ldouble|eff|exn|float|int(ptr)?|lincloptr|uint)\b
    - type: 
        \b(lint|ulint|llint|ullint|nat|ptr|real|ref|size_t|ssize_t|sint|usint|string|tkind|viewt|v?t0p|vt|void)\b
    - type: \b(prop|t[@0]ype|type|viewt[@0]ype|viewtype|vt[@0]ype|vtype|view)\b
    - type: 
        \b(prop[+-]|t[@0]ype[+-]|type[+-]|viewt[@0]ype[+-]|viewtype[+-]|vt[@0]ype[+-]|vtype[+-]|view[+-])
    - statement: 
        \b(abstype|abst|absprop|absviewt|absvt(ype)?|absview|and|andalso|as|(re)?assume|begin|(pr)?case|s?case)\b
    - statement: 
        \b(classdec|dataprop|data(v|view)?type|dataview|datasort|do|dynload|else|end|exception|extype|extva(r|l)|s?if)\b
    - statement: 
        \b(ifcase|import|for|in|infix(l|r)?|let|local|macrodef|macdef|not|of|op|or|orelse|overload|(pre|post|non)fix)\b
    - statement: 
        \b(propdef|rec|sortdef|stacst|stadef|staload|stavar|sta(tic)?|symelim|symintr|tkindef|then|try|viewdef|v?typedef)\b
    - statement: 
        \b(viewtypedef|(pr)?va(l|r)|when|where|while|with|withtype|withprop|withv(iew)?type|withview)\b
    - statement: 
        \b(abst[@0]ype|absviewt[@0]?ype|absvt[@0]ype|abstbox|abstflat|absvtbox|absvtflat|absimpl|absreimpl|abs)\b
    - statement: \b(case[+-]|(pr)?va(l|r)[+-]|for\*|while\*)
    - constant.number: \b[0-9.]+([eE][+-]?[0-9]+)?[fFlL]?\b
    - constant.number: \b0[xX][0-9A-Fa-f]*(\.[0-9A-Fa-f]*)?[pP][+-]?[0-9]+[fFlL]?\b
    - constant.number: \b([0-9]+|0[xX][0-9A-Fa-f]+)[lLuU]*\b
    - identifier: \b(fix|(pr)?fu?n|fnx|castfn|praxi|extern|lam|llam|(pr)?implement|(pr)?implmnt)\b
    - identifier: \b(fix@|fold@|free@|lam@|llam@|addr@|view@|ref@|fn\*)
    - identifier: \$\w*\b
    - special: 
        (\$(arrpsz|arrptrsize|break|continue|d2ctype|delay|effmask_(ntm|exn|ref|wrt|all)))\b
    - special: 
        (\$(effmask|extern|extype_struct|extype|extkind|extval|extfcall|extmcall|ldelay|literal))\b
    - special: 
        (\$(li?st_vt|li?st_t|li?st|myfilename|myfunction|mylocation|raise|rec(ord)?_vt))\b
    - special: (\$(rec(ord)?_t|rec(ord)?|showtype|solver_assert|solver_verify|tempenver))\b
    - special: (\$(tup(le)?_vt|tup(le)?_t|tup(le)?|tyrep|vararg|vcopyenv_vt|vcopyenv_v))\b
    - special: \!(wrt|exnref|exnwrt|exn|refwrt|ref|all|ntm|laz)\b
    - special: \b(fun(0|1)|(lin)?cloptr(0|1)?|cloref(0|1)?|clo(0|1)?|lin|prf)\b
    - special: \b(f?print(ln)?!|prerr(ln)?!|tupz!)
    - preproc: 
        ^[[:space:]]*#[[:space:]]*(define|pragma|include|(un|ifn?)def|endif|el(if|se)|if|warning|error|assert)\b
    - preproc: 
        ^[[:space:]]*#[[:space:]]*(codegen2|codegen3|elifdef|elifndef|prerr|print|require|then|staload|dynload)\b
    - constant.bool: \b(true|false|null)\b
    - default:
        start: '%{[#^$]?'
        end: '%}'
        skip: \.
        limit-group: symbol.operator
        rules:
        - include: c
        - include: javascript
    - constant.string: \"[^"]*\"
    - constant.string: \'[^']*\'
    - comment.block:
        start: ////
        end: $a
        rules:
        - todo: (TODO|XXX|FIXME)
    - comment.line:
        start: //
        end: $
        rules:
        - todo: (TODO|XXX|FIXME)
    - comment.block:
        start: \(\*
        end: \*\)
        rules:
        - todo: (TODO|XXX|FIXME)
    - comment.block:
        start: /\*
        end: \*\/
        rules:
        - todo: (TODO|XXX|FIXME)
# ----- Rule set for language: awk -----
- comment:
    start: (?i)^```awk$
    end: ^```$
    rules:
    - preproc: \$[A-Za-z0-9_!@#$*?\-]+
    - preproc: \b(ARGC|ARGIND|ARGV|BINMODE|CONVFMT|ENVIRON|ERRNO|FIELDWIDTHS)\b
    - preproc: \b(FILENAME|FNR|FS|IGNORECASE|LINT|NF|NR|OFMT|OFS|ORS)\b
    - preproc: \b(PROCINFO|RS|RT|RSTART|RLENGTH|SUBSEP|TEXTDOMAIN)\b
    - identifier.class: \b(function|extension|BEGIN|END)\b
    - symbol.operator: '[\-+*/%^|!=&<>?;:]|\\|\[|\]'
    - statement: \b(for|if|while|do|else|in|delete|exit)\b
    - special: \b(break|continue|return)\b
    - statement: \b(close|getline|next|nextfile|print|printf|system|fflush)\b
    - statement: \b(atan2|cos|exp|int|log|rand|sin|sqrt|srand)\b
    - statement: \b(asort|asorti|gensub|gsub|index|length|match)\b
    - statement: \b(split|sprintf|strtonum|sub|substr|tolower|toupper)\b
    - statement: \b(mktime|strftime|systime)\b
    - statement: \b(and|compl|lshift|or|rshift|xor)\b
    - statement: \b(bindtextdomain|dcgettext|dcngettext)\b
    - special: /.*[^\\]/
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - comment:
        start: '#'
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: bat -----
- comment:
    start: (?i)^```bat$
    end: ^```$
    rules:
    - constant.number: \b[0-9]+\b
    - special: (\{|\}|\(|\)|\;|\]|\[|`|\\|\$|<|>|!|=|&|\|)
    - type: 
        \b(?i)(case|do|done|elif|else|esac|exit|fi|for|function|if|in|local|read|return|select|then|until|while)\b
    - type: \b(?i)(equ|neq|lss|leq|gtr|geq|on|off)\b
    - type: \b(?i)(goto|for|in|do|call|exit|not|exist|errorlevel|defined)\b
    - type: \b(?i)(prn|nul|lpt3|lpt2|lpt1|con|com4|com3|com2|com1|aux)\b
    - statement: 
        \b(?i)(adprep|append|arp|assoc|at|atmadm|attrib|auditpol|autochk|autoconv|autofmt|bcdboot|bcdedit|bdehdcfg|bitsadmin|bootcfg|break|brea)\b
    - statement: 
        \b(?i)(cacls|cd|certreq|certutil|chcp|change|choice|cipher|chdir|chkdsk|chkntfs|chglogon|chgport|chgusr|clip|cls|clscluadmin|cluster|cmd|cmdkey|cmstp|color)\b
    - statement: 
        \b(?i)(comp|compact|convert|copy|cprofile|cscript|csvde|date|dcdiag|dcgpofix|dcpromo|defra|del|dfscmd|dfsdiag|dfsrmig|diantz|dir|dirquota|diskcomp|diskcopy|diskpart|diskperf|diskraid|diskshadow|dispdiag|doin|dnscmd|doskey|driverquery|dsacls|dsadd|dsamain|dsdbutil|dsget|dsmgmt|dsmod|dsmove|dsquery|dsrm)\b
    - statement: 
        \b(?i)(echo|edit|endlocal|erase|esentutl|eventcreate|eventquery|eventtriggers|evntcmd|expand|extract)\b
    - statement: 
        \b(?i)(fc|filescrn|find|findstr|finger|flattemp|fonde|forfiles|format|freedisk|fs|fsutil|ftp|ftype|fveupdate|getmac|gettype|gpfixup|gpresult|gpupdate|graftabl)\b
    - statement: 
        \b(?i)(hashgen|hep|help|helpctr|hostname|icacls|iisreset|inuse|ipconfig|ipxroute|irftp|ismserv|jetpack|keyb|klist|ksetup|ktmutil|ktpass|label|ldifd|ldp|lodctr|logman|logoff|lpq|lpr|macfile)\b
    - statement: 
        \b(?i)(makecab|manage-bde|mapadmin|md|mkdir|mklink|mmc|mode|more|mount|mountvol|move|mqbup|mqsvc|mqtgsvc|msdt|msg|msiexec|msinfo32|mstsc|nbtstat|net
        computer|net group)\b
    - statement: \b(?i)(net localgroup|net print|net session|net share|net start|net
        stop|net use|net user|net view|net|netcfg|netdiag|netdom|netsh|netstat|nfsadmin|nfsshare|nfsstat|nlb)\b
    - statement: 
        \b(?i)(nlbmgr|nltest|nslookup|ntackup|ntcmdprompt|ntdsutil|ntfrsutl|openfiles|pagefileconfig|path|pathping|pause|pbadmin|pentnt|perfmon|ping|pnpunatten|pnputil|popd)\b
    - statement: 
        \b(?i)(powercfg|powershell|powershell_ise|print|prncnfg|prndrvr|prnjobs|prnmngr|prnport|prnqctl|prompt|pubprn|pushd|pushprinterconnections|pwlauncher|qappsrv|qprocess)\b
    - statement: 
        \b(?i)(query|quser|qwinsta|rasdial|rcp|rd|rdpsign|regentc|recover|redircmp|redirusr|reg|regini|regsvr32|relog|ren|rename|rendom|repadmin|repair-bde|replace|reset|restore)\b
    - statement: 
        \b(?i)(rxec|risetup|rmdir|robocopy|route|rpcinfo|rpcping|rsh|runas|rundll32|rwinsta|scp|sc|setlocal|session|schtasks|scwcmd|secedit|serverceipoptin|servrmanagercmd|serverweroptin|set|setspn)\b
    - statement: 
        \b(?i)(setx|sfc|shadow|shift|showmount|shutdown|sort|ssh|start|storrept|subst|sxstrace|ysocmgr|systeminfo|takeown|tapicfg|taskkill|tasklist|tcmsetup|telnet|tftp|time)\b
    - statement: 
        \b(?i)(timeout|title|tlntadmn|tpmvscmgr|tpmvscmgr|tacerpt|tracert|tree|tscon|tsdiscon|tsecimp|tskill|tsprof|type|typeperf|tzutil|uddiconfig|umount|unlodctr|ver|verify)\b
    - statement: 
        \b(?i)(verifier|verif|vol|vssadmin|w32tm|waitfor|wbadmin|wdsutil|wecutil|wevtutil|where|whoami|winnt|winnt32|winpop|winrm|winrs|winsat|wlbs|mic|wscript|xcopy)\b
    - constant: (/\w+)
    - special: (%%\w+)
    - special: (%\w+%)
    - type: --[a-z-]+
    - type: \ -[a-z]+
    - identifier: \$\{?[0-9A-Z_!@#$*?-]+\}?
    - identifier: \$\{?[0-9A-Z_!@#$*?-]+\}?
    - constant.string:
        start: \"
        end: \"
        skip: \.
        rules:
        - constant.specialChar: (\\0|\\\\|\\t|\\n|\\r|\\"|\\')
        - constant.unicode: \\u\{[[:xdigit:]]+}
    - constant.string: (\'.+\')
    - comment.rem: (?i)(rem\s.*)
    - comment.rem: (?i)(\:\:\s.*)
# ----- Rule set for language: c -----
- comment:
    start: (?i)^```c$
    end: ^```$
    rules:
    - identifier: \b[A-Z_][0-9A-Z_]+\b
    - type: 
        \b(_Atomic|_BitInt|float|double|_Decimal32|_Decimal64|_Decimal128|_Complex|complex|_Imaginary|imaginary|_Bool|bool|char|int|short|long|enum|void|struct|union|typedef|typeof|typeof_unqual|(un)?signed|inline|_Noreturn)\b
    - type: \b((s?size)|((u_?)?int(8|16|32|64|ptr))|char(8|16|32)|wchar)_t\b
    - type: 
        \b(_Float16|__fp16|_Float32|_Float32x|_Float64|_Float64x|__float80|_Float128|_Float128x|__float128|__ibm128|__int128|_Fract|_Sat|_Accum)\b
    - type: \b[a-z_][0-9a-z_]+(_t|_T)\b
    - statement: 
        \b(auto|volatile|register|restrict|_Alignas|alignas|_Alignof|alignof|static|const|constexpr|extern|_Thread_local|thread_local)\b
    - statement: 
        \b(for|if|while|do|else|case|default|switch|_Generic|_Static_assert|static_assert)\b
    - statement: \b(goto|continue|break|return)\b
    - statement: \b(asm|fortran)\b
    - preproc: 
        ^[[:space:]]*#[[:space:]]*(define|embed|pragma|include|(un|ifn?)def|endif|el(if|ifdef|ifndef|se)|if|line|warning|error|__has_include|__has_embed|__has_c_attribute)
    - preproc: ^[[:space:]]*_Pragma\b
    - statement: __attribute__[[:space:]]*\(\([^)]*\)\)
    - statement: 
        __(aligned|asm|builtin|extension|hidden|inline|packed|restrict|section|typeof|weak)__
    - symbol.operator: '[-+*/%=<>.:;,~&|^!?]|\b(offsetof|sizeof)\b'
    - symbol.brackets: '[(){}]|\[|\]'
    - constant.number: 
        (\b([1-9][0-9]*|0[0-7]*|0[Xx][0-9A-Fa-f]+|0[Bb][01]+)([Uu][Ll]?[Ll]?|[Ll][Ll]?[Uu]?)?\b)
    - constant.number: 
        (\b(([0-9]*[.][0-9]+|[0-9]+[.][0-9]*)([Ee][+-]?[0-9]+)?|[0-9]+[Ee][+-]?[0-9]+)[FfLl]?\b)
    - constant.number: 
        (\b0[Xx]([0-9A-Za-z]*[.][0-9A-Za-z]+|[0-9A-Za-z]+[.][0-9A-Za-z]*)[Pp][+-]?[0-9]+[FfLl]?\b)
    - constant.bool: (\b(true|false|NULL|nullptr|TRUE|FALSE)\b)
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: 
            \\(["'abfnrtv\\]|[0-3]?[0-7]{1,2}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - error: ..+
        - constant.specialChar: 
            \\(["'abfnrtv\\]|[0-3]?[0-7]{1,2}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})
    - comment:
        start: //
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment:
        start: /\*
        end: \*/
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: caddyfile -----
- comment:
    start: (?i)^```caddyfile$
    end: ^```$
    rules:
    - identifier: ^\s*\S+(\s|$)
    - type: ^([\w.:/-]+,? ?)+[,{]$
    - constant.specialChar: \s{$
    - constant.specialChar: ^\s*}$
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - preproc: \{(\w+|\$\w+|%\w+%)\}
    - comment:
        start: '#'
        end: $
        rules: []
# ----- Rule set for language: cake -----
- comment:
    start: (?i)^```cake$
    end: ^```$
    rules:
    - include: csharp
    - preproc: ^[[:space:]]*#(addin|break|l(oad)?|module|r(eference)?|tool)
# ----- Rule set for language: clojure -----
- comment:
    start: (?i)^```clojure$
    end: ^```$
    rules:
    - constant.bool: \b(true|false)\b
    - constant.macro: \b(nil)\b
    - constant.number: '[\-]?[0-9]+?\b'
    - constant.number: 0x[0-9][A-Fa-f]+?\b
    - constant.number: '[\-]?(3[0-6]|2[0-9]|1[0-9]|[2-9])r[0-9A-Z]+?\b'
    - error: '[\-]?([4-9][0-9]|3[7-9]|1|0)r[0-9A-Z]+?\b'
    - symbol.operator: "[=>+\\-*/'?]"
    - type: \b(byte|short|(big)?int(eger)?|long|float|num|bigdec|rationalize)\b
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: 
            (\\u[0-9A-fa-f]{4,4}|\\newline|\\space|\\tab|\\formfeed|\\backspace|\\return|\\.)
    - comment:
        start: ;
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: cmake -----
- comment:
    start: (?i)^```cmake$
    end: ^```$
    rules:
    - identifier.var: ^[[:space:]]*[A-Z0-9_]+
    - preproc: ^[[:space:]]*(include|include_directories|include_external_msproject)\b
    - statement: ^[[:space:]]*\b((else|end)?if|else|(end)?while|(end)?foreach|break)\b
    - statement: 
        \b(COPY|NOT|COMMAND|PROPERTY|POLICY|TARGET|EXISTS|IS_(DIRECTORY|ABSOLUTE)|DEFINED)\b[[:space:]]
    - statement: '[[:space:]]\b(OR|AND|IS_NEWER_THAN|MATCHES|(STR|VERSION_)?(LESS|GREATER|EQUAL))\b[[:space:]]'
    - special: ^[[:space:]]*\b((end)?(function|macro)|return)
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - preproc:
        start: \$(\{|ENV\{)
        end: \}
        rules: []
    - identifier.macro: \b(APPLE|UNIX|WIN32|CYGWIN|BORLAND|MINGW|MSVC(_IDE|60|71|80|90)?)\b
    - comment:
        start: '#'
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: coffeescript -----
- comment:
    start: (?i)^```coffeescript$
    end: ^```$
    rules:
    - symbol.operator: ([-+/*=<>!~%?:&|]|[.]{3})|\b(and|or|is|isnt|not)\b
    - identifier.class: ([A-Za-z_][A-Za-z0-9_]*:[[:space:]]*(->|\()|->)
    - symbol.brackets: '[()]'
    - statement: \b(await|when|catch|continue|debugger|default|by|until)\b
    - statement: \b(delete|do|else|export|finally|for|class|extends|while|then)\b
    - statement: \b(get|if|import|from|in|instanceof|new|reject|resolve|return)\b
    - statement: \b(set|super|switch|this|throw|try|typeof|with|yield|unless)\b
    - constant.bool: \b(true|false|yes|no|on|off)\b
    - constant.bool.false: \b(false|no|off)\b
    - constant.bool.true: \b(true|yes|on)\b
    - constant.number: \b[-+]?([1-9][0-9]*|0[0-7]*|0x[0-9a-fA-F]+)([uU][lL]?|[lL][uU]?)?\b
    - constant.number: \b[-+]?([0-9]+\.[0-9]*|[0-9]*\.[0-9]+)([EePp][+-]?[0-9]+)?[fFlL]?
    - constant.number: \b[-+]?([0-9]+[EePp][+-]?[0-9]+)[fFlL]?
    - identifier: '@[A-Za-z0-9_]*'
    - error: \b(enum|implements|interface|package|private|protected|public)
    - constant: \b(globalThis|Infinity|null|undefined|NaN)\b
    - constant: \b(null|undefined|NaN)\b
    - constant: \b(true|false|yes|no|on|off)\b
    - type: \b(Array|Boolean|Date|Enumerator|Error|Function|Generator|Map|Math)\b
    - type: 
        \b(Number|Object|Promise|Proxy|Reflect|RegExp|Set|String|Symbol|WeakMap|WeakSet)\b
    - type: \b(BigInt64Array|BigUint64Array|Float32Array|Float64Array|Int16Array)\b
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - comment:
        start: '###'
        end: '###'
        rules: []
    - comment:
        start: '#'
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: colortest -----
- comment:
    start: (?i)^```colortest$
    end: ^```$
    rules:
    - black: \bPLAIN\b
    - red: \bred\b
    - green: \bgreen\b
    - yellow: \byellow\b
    - blue: \bblue\b
    - magenta: \bmagenta\b
    - cyan: \bcyan\b
    - brightred: \bbrightred\b
    - brightgreen: \bbrightgreen\b
    - brightyellow: \bbrightyellow\b
    - brightblue: \bbrightblue\b
    - brightmagenta: \bbrightmagenta\b
    - brightcyan: \bbrightcyan\b
# ----- Rule set for language: conky -----
- comment:
    start: (?i)^```conky$
    end: ^```$
    rules:
    - type: 
        \b(alignment|append_file|background|border_inner_margin|border_outer_margin|border_width|color0|color1|color2|color3|color4|color5|color6|color7|color8|color9|colorN|cpu_avg_samples|default_bar_height|default_bar_width|default_color|default_gauge_height|default_gauge_width|default_graph_height|default_graph_width|default_outline_color|default_shade_color|diskio_avg_samples|display|double_buffer|draw_borders|draw_graph_borders|draw_outline|draw_shades|extra_newline|font|format_human_readable|gap_x|gap_y|http_refresh|if_up_strictness|imap|imlib_cache_flush_interval|imlib_cache_size|lua_draw_hook_post|lua_draw_hook_pre|lua_load|lua_shutdown_hook|lua_startup_hook|mail_spool|max_port_monitor_connections|max_text_width|max_user_text|maximum_width|minimum_height|minimum_width|mpd_host|mpd_password|mpd_port|music_player_interval|mysql_host|mysql_port|mysql_user|mysql_password|mysql_db|net_avg_samples|no_buffers|nvidia_display|out_to_console|out_to_http|out_to_ncurses|out_to_stderr|out_to_x|override_utf8_locale|overwrite_file|own_window|own_window_class|own_window_colour|own_window_hints|own_window_title|own_window_transparent|own_window_type|pad_percents|pop3|sensor_device|short_units|show_graph_range|show_graph_scale|stippled_borders|temperature_unit|template|template0|template1|template2|template3|template4|template5|template6|template7|template8|template9|text|text_buffer_size|times_in_seconds|top_cpu_separate|top_name_width|total_run_times|update_interval|update_interval_on_battery|uppercase|use_spacer|use_xft|xftalpha|xftfont)\b
    - statement: 
        \b(above|below|bottom_left|bottom_right|bottom_middle|desktop|dock|no|none|normal|override|skip_pager|skip_taskbar|sticky|top_left|top_right|top_middle|middle_left|middle_right|middle_middle|undecorated|yes)\b
    - preproc: 
        \b(acpiacadapter|acpifan|acpitemp|addr|addrs|alignc|alignr|apcupsd|apcupsd_cable|apcupsd_charge|apcupsd_lastxfer|apcupsd_linev|apcupsd_load|apcupsd_loadbar|apcupsd_loadgauge|apcupsd_loadgraph|apcupsd_model|apcupsd_name|apcupsd_status|apcupsd_temp|apcupsd_timeleft|apcupsd_upsmode|apm_adapter|apm_battery_life|apm_battery_time|audacious_bar|audacious_bitrate|audacious_channels|audacious_filename|audacious_frequency|audacious_length|audacious_length_seconds|audacious_main_volume|audacious_playlist_length|audacious_playlist_position|audacious_position|audacious_position_seconds|audacious_status|audacious_title|battery|battery_bar|battery_percent|battery_short|battery_time|blink|bmpx_album|bmpx_artist|bmpx_bitrate|bmpx_title|bmpx_track|bmpx_uri|buffers|cached|cmdline_to_pid|color|color0|color1|color2|color3|color4|color5|color6|color7|color8|color9|combine|conky_build_arch|conky_build_date|conky_version|cpu|cpubar|cpugauge|cpugraph|curl|desktop|desktop_name|desktop_number|disk_protect|diskio|diskio_read|diskio_write|diskiograph|diskiograph_read|diskiograph_write|distribution|downspeed|downspeedf|downspeedgraph|draft_mails|else|endif|entropy_avail|entropy_bar|entropy_perc|entropy_poolsize|eval|eve|exec|execbar|execgauge|execgraph|execi|execibar|execigauge|execigraph|execp|execpi|flagged_mails|font|format_time|forwarded_mails|freq|freq_g|fs_bar|fs_bar_free|fs_free|fs_free_perc|fs_size|fs_type|fs_used|fs_used_perc|goto|gw_iface|gw_ip|hddtemp|head|hr|hwmon|i2c|i8k_ac_status|i8k_bios|i8k_buttons_status|i8k_cpu_temp|i8k_left_fan_rpm|i8k_left_fan_status|i8k_right_fan_rpm|i8k_right_fan_status|i8k_serial|i8k_version|ibm_brightness|ibm_fan|ibm_temps|ibm_volume|ical|iconv_start|iconv_stop|if_empty|if_existing|if_gw|if_match|if_mixer_mute|if_mounted|if_mpd_playing|if_running|if_smapi_bat_installed|if_up|if_updatenr|if_xmms2_connected|image|imap_messages|imap_unseen|ioscheduler|irc|kernel|laptop_mode|lines|loadavg|loadgraph|lua|lua_bar|lua_gauge|lua_graph|lua_parse|machine|mails|mboxscan|mem|memwithbuffers|membar|memwithbuffersbar|memeasyfree|memfree|memgauge|memgraph|memmax|memperc|mixer|mixerbar|mixerl|mixerlbar|mixerr|mixerrbar|moc_album|moc_artist|moc_bitrate|moc_curtime|moc_file|moc_rate|moc_song|moc_state|moc_timeleft|moc_title|moc_totaltime|monitor|monitor_number|mpd_album|mpd_artist|mpd_bar|mpd_bitrate|mpd_elapsed|mpd_file|mpd_length|mpd_name|mpd_percent|mpd_random|mpd_repeat|mpd_smart|mpd_status|mpd_title|mpd_track|mpd_vol|mysql|nameserver|new_mails|nodename|nodename_short|no_update|nvidia|obsd_product|obsd_sensors_fan|obsd_sensors_temp|obsd_sensors_volt|obsd_vendor|offset|outlinecolor|pb_battery|pid_chroot|pid_cmdline|pid_cwd|pid_environ|pid_environ_list|pid_exe|pid_nice|pid_openfiles|pid_parent|pid_priority|pid_state|pid_state_short|pid_stderr|pid_stdin|pid_stdout|pid_threads|pid_thread_list|pid_time_kernelmode|pid_time_usermode|pid_time|pid_uid|pid_euid|pid_suid|pid_fsuid|pid_gid|pid_egid|pid_sgid|pid_fsgid|pid_read|pid_vmpeak|pid_vmsize|pid_vmlck|pid_vmhwm|pid_vmrss|pid_vmdata|pid_vmstk|pid_vmexe|pid_vmlib|pid_vmpte|pid_write|platform|pop3_unseen|pop3_used|processes|read_tcp|read_udp|replied_mails|rss|running_processes|running_threads|scroll|seen_mails|shadecolor|smapi|smapi_bat_bar|smapi_bat_perc|smapi_bat_power|smapi_bat_temp|sony_fanspeed|stippled_hr|stock|swap|swapbar|swapfree|swapmax|swapperc|sysname|tab|tail|tcp_ping|tcp_portmon|template0|template1|template2|template3|template4|template5|template6|template7|template8|template9|texeci|texecpi|threads|time|to_bytes|top|top_io|top_mem|top_time|totaldown|totalup|trashed_mails|tztime|gid_name|uid_name|unflagged_mails|unforwarded_mails|unreplied_mails|unseen_mails|updates|upspeed|upspeedf|upspeedgraph|uptime|uptime_short|user_names|user_number|user_terms|user_times|user_time|utime|voffset|voltage_mv|voltage_v|weather|wireless_ap|wireless_bitrate|wireless_essid|wireless_link_bar|wireless_link_qual|wireless_link_qual_max|wireless_link_qual_perc|wireless_mode|words|xmms2_album|xmms2_artist|xmms2_bar|xmms2_bitrate|xmms2_comment|xmms2_date|xmms2_duration|xmms2_elapsed|xmms2_genre|xmms2_id|xmms2_percent|xmms2_playlist|xmms2_size|xmms2_smart|xmms2_status|xmms2_timesplayed|xmms2_title|xmms2_tracknr|xmms2_url)\b
    - identifier.var: \$\{?[0-9A-Z_!@#$*?-]+\}?
    - symbol.operator: (\{|\}|\(|\)|\;|\]|\[|`|\\|\$|<|>|!|=|&|\|)
    - constant.macro: ^TEXT$
# ----- Rule set for language: cpp -----
- comment:
    start: (?i)^```cpp$
    end: ^```$
    rules:
    - identifier: \b[A-Z_][0-9A-Z_]*\b
    - type: 
        \b(float|double|bool|char|int|short|long|enum|void|struct|union|typedef|(un)?signed|inline)\b
    - type: \b(((s?size)|((u_?)?int(8|16|32|64|ptr))|char(8|16|32))_t|wchar_t)\b
    - type: \b[a-z_][0-9a-z_]+(_t|_T)\b
    - type: \b(final|override)\b
    - statement: 
        \b(auto|volatile|const(expr|eval|init)?|mutable|register|thread_local|static|extern|decltype|explicit|virtual)\b
    - statement: 
        \b(class|namespace|template|typename|this|friend|using|public|protected|private|noexcept)\b
    - statement: \b(concept|requires)\b
    - statement: \b(import|export|module)\b
    - statement: \b(for|if|while|do|else|case|default|switch)\b
    - statement: \b(try|throw|catch|operator|new|delete|static_assert)\b
    - statement: \b(goto|continue|break|return)\b
    - preproc: 
        ^[[:space:]]*#[[:space:]]*(define|pragma|include|(un|ifn?)def|endif|el(if|se)|if|warning|error)|_Pragma
    - statement: \b(asm|fortran)\b
    - statement: 
        (__attribute__[[:space:]]*\(\([^)]*\)\)|__(aligned|asm|builtin|hidden|inline|packed|restrict|section|typeof|weak)__)
    - symbol.operator: '[-+*/%=<>.:;,~&|^!?]|\b(sizeof|alignof|typeid|(and|or|xor|not)(_eq)?|bitor|compl|bitand|(const|dynamic|reinterpret|static)_cast)\b'
    - symbol.brackets: '[(){}]|\[|\]'
    - constant.number: 
        (\b([1-9][0-9']*|0[0-7']*|0[Xx][0-9a-fA-F']+|0[Bb][01]+)([Uu]?[Ll][Ll]?|[Ll][Ll]?[Uu]?)?\b)
    - constant.number: 
        (\b(([0-9']*[.][0-9']+|[0-9']+[.][0-9']*)([Ee][+-]?[0-9']+)?|[0-9']+[Ee][+-]?[0-9']+)[FfLl]?\b)
    - constant.number: 
        (\b0[Xx]([0-9a-zA-Z']*[.][0-9a-zA-Z']+|[0-9a-zA-Z']+[.][0-9a-zA-Z']*)[Pp][+-]?[0-9']+[FfLl]?\b)
    - constant.bool: (\b(true|false|NULL|nullptr|TRUE|FALSE)\b)
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: 
            \\(["'abfnrtv\\]|[0-3]?[0-7]{1,2}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - error: ..+
        - constant.specialChar: 
            \\(["'abfnrtv\\]|[0-3]?[0-7]{1,2}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})
    - comment:
        start: //
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment:
        start: /\*
        end: \*/
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: crontab -----
- comment:
    start: (?i)^```crontab$
    end: ^```$
    rules:
    - statement: 
        ^([\*0-9,\-\/]+)\s+([\*0-9,\-\/]+)\s+([\*0-9,\-\/]+)\s+(([\*0-9,\-\/]+)|(\b(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\b))\s+(([\*0-9,\-\/]+)|(\b(sun|mon|tue|wed|thu|fri|sat)\b))\s+(.*)$\n?
    - constant: 
        ^([\*0-9,\-\/]+)\s+([\*0-9,\-\/]+)\s+([\*0-9,\-\/]+)\s+(([\*0-9,\-\/]+)|(\b(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\b))\s+(([\*0-9,\-\/]+)|(\b(sun|mon|tue|wed|thu|fri|sat)\b))
    - type: ^[A-Z]+\=
    - constant: \b(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\b
    - constant: \b(sun|mon|tue|wed|thu|fri|sat)\b
    - type: \@(reboot|yearly|annually|monthly|weekly|daily|midnight|hourly)\b
    - special: (\{|\}|\(|\)|\;|\]|\[|`|\\|\$|<|>|^|!|=|&|\|)
    - comment:
        start: '#'
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: crystal -----
- comment:
    start: (?i)^```crystal$
    end: ^```$
    rules:
    - statement: 
        \b(abstract|alias|as|asm|begin|break|case|class|def|do|else|elsif|end|ensure|enum|extend|for|fun|if|in|include|instance_sizeof|lib|loop|macro|module|next|of|out|pointerof|private|protected|raise|require|rescue|return|select|self|sizeof|spawn|struct|super|then|type|typeof|uninitialized|union|unless|until|verbatim|when|while|with|yield)\b
    - constant: \b(true|false|nil)\b
    - constant.number: \b[0-9]+\b
    - statement: \b(nil\?|as(\?|\b)|is_a\?|responds_to\?)
    - type: (\$|@|@@)?\b[A-Z]+[0-9A-Z_a-z]*
    - constant: "([ \t]|^):[0-9A-Z_]+\\b"
    - constant: \b(__FILE__|__LINE__)\b
    - constant: /([^/]|(\\/))*/[iomx]*|%r\{([^}]|(\\}))*\}[iomx]*
    - constant.string: '`[^`]*`|%x\{[^}]*\}'
    - constant.string:
        start: '`'
        end: '`'
        rules: []
    - constant.string:
        start: '%x\{'
        end: \}
        rules: []
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
        - symbol.brackets:
            start: '#\{'
            end: \}
            rules:
            - default: .*
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - comment:
        start: '#'
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment.bright:
        start: '##'
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
    - constant:
        start: <<-?'?EOT'?
        end: ^EOT
        rules: []
# ----- Rule set for language: csharp -----
- comment:
    start: (?i)^```csharp$
    end: ^```$
    rules:
    - identifier.class: class +[A-Za-z0-9]+ *((:) +[A-Za-z0-9.]+)?
    - identifier.var: '@[A-Za-z]+'
    - preproc: 
        ^[[:space:]]*#[[:space:]]*(define|elif|else|endif|endregion|error|if|line|nullable|pragma|region|undef|warning)
    - identifier: ([A-Za-z0-9_]*[[:space:]]*[()])
    - type: 
        \b(bool|byte|sbyte|char|decimal|double|float|IntPtr|int|uint|long|ulong|managed|unmanaged|nint|nuint|object|short|ushort|string|base|this|var|void)\b
    - statement: 
        \b(alias|as|case|catch|checked|default|do|dynamic|else|finally|fixed|for|foreach|goto|if|is|lock|new|null|return|switch|throw|try|unchecked|when|while|with)\b
    - statement: 
        \b(abstract|add|and|args|async|await|class|const|delegate|enum|event|explicit|extern|file|get|global|implicit|in|init|internal|interface|nameof|namespace|not|notnull|operator|or|out|override|params|partial|private|protected|public|readonly|record|ref|remove|required|scoped|sealed|set|sizeof|stackalloc|static|struct|typeof|unsafe|using|value|virtual|volatile|yield)\b
    - statement: 
        \b(from|where|select|group|info|orderby|join|let|in|on|equals|by|ascending|descending)\b
    - special: \b(break|continue)\b
    - constant.bool: \b(true|false)\b
    - symbol.operator: '[\-+/*=<>?:!~%&|]'
    - constant.number: \b([0-9._]+|0x[A-Fa-f0-9_]+|0b[0-1_]+)[FL]?\b
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\([btnfr]|'|\"|\\)
        - constant.specialChar: \\u[A-Fa-f0-9]{4}
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: \\([btnfr]|'|\"|\\)
        - constant.specialChar: \\u[A-Fa-f0-9]{4}
    - comment:
        start: //
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment:
        start: /\*
        end: \*/
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: css -----
- comment:
    start: (?i)^```css$
    end: ^```$
    rules:
    - statement: (?i).
    - type: '(align-content|align-items|alignment-baseline|align-self|all|animation|animation-delay|animation-direction|animation-duration|animation-fill-mode|animation-iteration-count|animation-name|animation-play-state|animation-timing-function|appearance|azimuth|backdrop-filter|backface-visibility|background|background-attachment|background-blend-mode|background-clip|background-color|background-image|background-origin|background-position|background-repeat|background-size|baseline-shift|bookmark-label|bookmark-level|bookmark-state|border|border-bottom|border-bottom-color|border-bottom-left-radius|border-bottom-right-radius|border-bottom-style|border-bottom-width|border-boundary|border-collapse|border-color|border-image|border-image-outset|border-image-repeat|border-image-slice|border-image-source|border-image-width|border-left|border-left-color|border-left-style|border-left-width|border-radius|border-right|border-right-color|border-right-style|border-right-width|border-spacing|border-style|border-top|border-top-color|border-top-left-radius|border-top-right-radius|border-top-style|border-top-width|border-width|bottom|box-decoration-break|box-shadow|box-sizing|box-snap|box-suppress|break-after|break-before|break-inside|caption-side|caret|caret-animation|caret-color|caret-shape|chains|clear|clip|clip-path|clip-rule|color|color-interpolation-filters|column-count|column-fill|column-gap|column-rule|column-rule-color|column-rule-style|column-rule-width|columns|column-span|column-width|content|continue|counter-increment|counter-reset|counter-set|cue|cue-after|cue-before|cursor|direction|display|dominant-baseline|elevation|empty-cells|filter|flex|flex-basis|flex-direction|flex-flow|flex-grow|flex-shrink|flex-wrap|float|float-defer|float-offset|float-reference|flood-color|flood-opacity|flow|flow-from|flow-into|font|font-family|font-feature-settings|font-kerning|font-language-override|font-size|font-size-adjust|font-stretch|font-style|font-synthesis|font-variant|font-variant-alternates|font-variant-caps|font-variant-east-asian|font-variant-ligatures|font-variant-numeric|font-variant-position|font-weight|footnote-display|footnote-policy|gap|glyph-orientation-vertical|grid|grid-area|grid-auto-columns|grid-auto-flow|grid-auto-rows|grid-column|grid-column-end|grid-column-gap|grid-column-start|grid-gap|grid-row|grid-row-end|grid-row-gap|grid-row-start|grid-template|grid-template-areas|grid-template-columns|grid-template-rows|hanging-punctuation|height|hyphenate-character|hyphenate-limit-chars|hyphenate-limit-last|hyphenate-limit-lines|hyphenate-limit-zone|hyphens|image-orientation|image-rendering|image-resolution|initial-letter|initial-letter-align|initial-letter-wrap|isolation|justify-content|justify-items|justify-self|left|letter-spacing|lighting-color|line-break|line-grid|line-height|line-snap|list-style|list-style-image|list-style-position|list-style-type|margin|margin-bottom|margin-left|margin-right|margin-top|marker|marker-end|marker-knockout-left|marker-knockout-right|marker-mid|marker-pattern|marker-segment|marker-side|marker-start|marquee-direction|marquee-loop|marquee-speed|marquee-style|mask|mask-border|mask-border-mode|mask-border-outset|mask-border-repeat|mask-border-slice|mask-border-source|mask-border-width|mask-clip|mask-composite|mask-image|mask-mode|mask-origin|mask-position|mask-repeat|mask-size|mask-type|max-height|max-lines|max-width|min-height|min-width|mix-blend-mode|motion|motion-offset|motion-path|motion-rotation|nav-down|nav-left|nav-right|nav-up|object-fit|object-position|offset-after|offset-before|offset-end|offset-start|opacity|order|orphans|outline|outline-color|outline-offset|outline-style|outline-width|overflow|overflow-style|overflow-wrap|overflow-x|overflow-y|padding|padding-bottom|padding-left|padding-right|padding-top|page|page-break-after|page-break-before|page-break-inside|pause|pause-after|pause-before|perspective|perspective-origin|pitch|pitch-range|play-during|pointer-events|polar-anchor|polar-angle|polar-distance|polar-origin|position|presentation-level|quotes|region-fragment|resize|rest|rest-after|rest-before|richness|right|rotation|rotation-point|ruby-align|ruby-merge|ruby-position|running|scrollbar-color|scroll-behavior|scroll-snap-align|scroll-snap-margin|scroll-snap-margin-block|scroll-snap-margin-block-end|scroll-snap-margin-block-start|scroll-snap-margin-bottom|scroll-snap-margin-inline|scroll-snap-margin-inline-end|scroll-snap-margin-inline-start|scroll-snap-margin-left|scroll-snap-margin-right|scroll-snap-margin-top|scroll-snap-padding|scroll-snap-padding-block|scroll-snap-padding-block-end|scroll-snap-padding-block-start|scroll-snap-padding-bottom|scroll-snap-padding-inline|scroll-snap-padding-inline-end|scroll-snap-padding-inline-start|scroll-snap-padding-left|scroll-snap-padding-right|scroll-snap-padding-top|scroll-snap-type|shape-image-threshold|shape-inside|shape-margin|shape-outside|size|speak|speak-as|speak-header|speak-numeral|speak-punctuation|speech-rate|stress|string-set|stroke|stroke-alignment|stroke-dashadjust|stroke-dasharray|stroke-dashcorner|stroke-dashoffset|stroke-linecap|stroke-linejoin|stroke-miterlimit|stroke-opacity|stroke-width|table-layout|tab-size|text-align|text-align-all|text-align-last|text-combine-upright|text-decoration|text-decoration-color|text-decoration-line|text-decoration-skip|text-decoration-style|text-emphasis|text-emphasis-color|text-emphasis-position|text-emphasis-style|text-indent|text-justify|text-orientation|text-overflow|text-shadow|text-space-collapse|text-space-trim|text-spacing|text-transform|text-underline-offset|text-underline-position|text-wrap|top|transform|transform-box|transform-origin|transform-style|transition|transition-delay|transition-duration|transition-property|transition-timing-function|unicode-bidi|user-select|vertical-align|visibility|voice-balance|voice-duration|voice-family|voice-pitch|voice-range|voice-rate|voice-stress|voice-volume|volume|white-space|widows|width|will-change|word-break|word-spacing|word-wrap|wrap-after|wrap-before|wrap-flow|wrap-inside|wrap-through|writing-mode|z-index):'
    - special: '!important'
    - identifier: :active|:focus|:hover|:link|:visited|:link|:after|:before|$
    - special: (\{|\}|\(|\)|\;|:|\]|~|<|>|,)
    - statement: '@import|@mixin|@extend'
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - special: "\"|'"
    - comment:
        start: \/\*
        end: \*\/
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: csx -----
- comment:
    start: (?i)^```csx$
    end: ^```$
    rules:
    - include: csharp
    - preproc: \B(\#!|\#[r|load|]+\b)
# ----- Rule set for language: cuda -----
- comment:
    start: (?i)^```cuda$
    end: ^```$
    rules:
    - identifier: \b[A-Z_][0-9A-Z_]*\b
    - type: 
        \b(float|double|bool|char|int|short|long|enum|void|struct|union|typedef|(un)?signed|inline)\b
    - type: \b(((s?size)|((u_?)?int(8|16|32|64|ptr))|char(8|16|32))_t|wchar_t)\b
    - type: \b[a-z_][0-9a-z_]+(_t|_T)\b
    - type: \b(final|override)\b
    - type.keyword: 
        \b(auto|volatile|const(expr|eval|init)?|mutable|register|thread_local|static|extern|decltype|explicit|virtual)\b
    - statement: 
        \b(class|namespace|template|typename|this|friend|using|public|protected|private|noexcept)\b
    - statement: \b(concept|requires)\b
    - statement: \b(import|export|module)\b
    - statement: \b(for|if|while|do|else|case|default|switch)\b
    - statement: \b(try|throw|catch|operator|new|delete|static_assert)\b
    - statement: \b(goto|continue|break|return)\b
    - preproc: 
        ^[[:space:]]*#[[:space:]]*(define|pragma|include|(un|ifn?)def|endif|el(if|se)|if|warning|error)|_Pragma
    - statement: \b(asm|fortran)\b
    - statement: 
        (__attribute__[[:space:]]*\(\([^)]*\)\)|__(aligned|asm|builtin|hidden|inline|packed|restrict|section|typeof|weak)__)
    - statement: __(global|device|host|shared)__
    - symbol.operator: '[-+*/%=<>.:;,~&|^!?]|\b(sizeof|alignof|typeid|(and|or|xor|not)(_eq)?|bitor|compl|bitand|(const|dynamic|reinterpret|static)_cast)\b'
    - symbol.brackets: '[(){}]|\[|\]'
    - constant.number: 
        (\b([1-9][0-9']*|0[0-7']*|0[Xx][0-9a-fA-F']+|0[Bb][01]+)([Uu]?[Ll][Ll]?|[Ll][Ll]?[Uu]?)?\b)
    - constant.number: 
        (\b(([0-9']*[.][0-9']+|[0-9']+[.][0-9']*)([Ee][+-]?[0-9']+)?|[0-9']+[Ee][+-]?[0-9']+)[FfLl]?\b)
    - constant.number: 
        (\b0[Xx]([0-9a-zA-Z']*[.][0-9a-zA-Z']+|[0-9a-zA-Z']+[.][0-9a-zA-Z']*)[Pp][+-]?[0-9']+[FfLl]?\b)
    - constant.bool: (\b(true|false|NULL|nullptr)\b)
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: 
            \\(["'abfnrtv\\]|[0-3]?[0-7]{1,2}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - error: ..+
        - constant.specialChar: 
            \\(["'abfnrtv\\]|[0-3]?[0-7]{1,2}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})
    - comment:
        start: //
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment:
        start: /\*
        end: \*/
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: cython -----
- comment:
    start: (?i)^```cython$
    end: ^```$
    rules:
    - statement: 
        \b(and|as|assert|class|def|DEF|del|elif|ELIF|else|ELSE|except|exec|finally|for|from|global|if|IF|import|in|is|lambda|map|not|or|pass|print|raise|try|while|with|yield)\b
    - special: \b(continue|break|return)\b
    - identifier.macro: 
        \b(cdef|cimport|cpdef|cppclass|ctypedef|extern|include|namespace|property|struct)\b
    - type: \b(bint|char|double|int|public|void|unsigned)\b
    - symbol: '[.:;,+*|=!\%]|<|>|/|-|&'
    - symbol.brackets: '[(){}]|\[|\]'
    - constant.string:
        start: '"""'
        end: '"""'
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'''"
        end: "'''"
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - comment:
        start: '#'
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: d -----
- comment:
    start: (?i)^```d$
    end: ^```$
    rules:
    - statement: (\*|/|%|\+|-|>>|<<|>>>|&|\^(\^)?|\||~)?=
    - statement: \.\.(\.)?|!|\*|&|~|\(|\)|\[|\]|\\|/|\+|-|%|<|>|\?|:|;
    - error: (0[0-7_]*)(L[uU]?|[uU]L?)?
    - constant.number: ([0-9]|[1-9][0-9_]*)(L[uU]?|[uU]L?)?\b
    - constant: (0[bB][01_]*)(L[uU]?|[uU]L?)?
    - constant.number: '[0-9][0-9_]*\.([0-9][0-9_]*)([eE][+-]?([0-9][0-9_]*))?[fFL]?i?'
    - constant.number: '[0-9][0-9_]*([eE][+-]?([0-9][0-9_]*))[fFL]?i?'
    - constant.number: '[^.]\.([0-9][0-9_]*)([eE][+-]?([0-9][0-9_]*))?[fFL]?i?'
    - constant.number: '[0-9][0-9_]*([fFL]?i|[fF])'
    - constant.number: (0[xX]([0-9a-fA-F][0-9a-fA-F_]*|[0-9a-fA-F_]*[0-9a-fA-F]))(L[uU]?|[uU]L?)?
    - constant.number: 
        0[xX]([0-9a-fA-F][0-9a-fA-F_]*|[0-9a-fA-F_]*[0-9a-fA-F])(\.[0-9a-fA-F][0-9a-fA-F_]*|[0-9a-fA-F_]*[0-9a-fA-F])?[pP][+-]?([0-9][0-9_]*)[fFL]?i?
    - constant.number: 
        0[xX]\.([0-9a-fA-F][0-9a-fA-F_]*|[0-9a-fA-F_]*[0-9a-fA-F])[pP][+-]?([0-9][0-9_]*)[fFL]?i?
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - statement: 
        \b(abstract|alias|align|asm|assert|auto|body|break|case|cast|catch|class|const|continue|debug|default|delegate|do|else|enum|export|extern)\b
    - statement: 
        \b(false|final|finally|for|foreach|foreach_reverse|function|goto|if|immutable|import|in|inout|interface|invariant|is|lazy)\b
    - statement: 
        \b(macro|mixin|module|new|nothrow|null|out|override|package|pragma|private|protected|public|pure|ref|return)\b
    - statement: 
        \b(scope|shared|static|struct|super|switch|synchronized|template|this|throw|true|try|typeid|typeof|union|unittest|version|while|with)\b
    - statement: 
        \b(__FILE__|__MODULE__|__LINE__|__FUNCTION__|__PRETTY_FUNCTION__|__gshared|__traits|__vector|__parameters)\b
    - error: \b(delete|deprecated|typedef|volatile)\b
    - type: 
        \b(bool|byte|cdouble|cent|cfloat|char|creal|dchar|double|float|idouble|ifloat|int|ireal|long|real|short|ubyte|ucent|uint|ulong|ushort|void|wchar)\b
    - type: \b(string|wstring|dstring|size_t|ptrdiff_t)\b
    - constant: \b(__DATE__|__EOF__|__TIME__|__TIMESTAMP__|__VENDOR__|__VERSION__)\b
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: r"
        end: '"'
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: '`'
        end: '`'
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: x"
        end: '"'
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: q"\(
        end: \)"
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: q"\{
        end: q"\}
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: q"\[
        end: q"\]
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: q"<
        end: q">
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: q"[^({[<"][^"]*$
        end: ^[^"]+"
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: q"([^({[<"])
        end: '"'
        rules:
        - constant.specialChar: \\.
    - comment:
        start: //
        end: $
        rules: []
    - comment:
        start: /\*
        end: \*/
        rules: []
    - comment:
        start: /\+
        end: \+/
        rules: []
# ----- Rule set for language: dart -----
- comment:
    start: (?i)^```dart$
    end: ^```$
    rules:
    - constant.number: \b[-+]?([1-9][0-9]*|0[0-7]*|0x[0-9a-fA-F]+)([uU][lL]?|[lL][uU]?)?\b
    - constant.number: \b[-+]?([0-9]+\.[0-9]*|[0-9]*\.[0-9]+)([EePp][+-]?[0-9]+)?[fFlL]?
    - constant.number: \b[-+]?([0-9]+[EePp][+-]?[0-9]+)[fFlL]?
    - identifier: '[A-Za-z_][A-Za-z0-9_]*[[:space:]]*[(]'
    - statement: \b(break|case|catch|continue|default|else|finally)\b
    - statement: \b(for|function|get|if|in|as|is|new|return|set|switch|final|await|async|sync)\b
    - statement: \b(switch|this|throw|try|var|void|while|with|import|library|part|const|export)\b
    - constant: \b(true|false|null)\b
    - type: \b(List|String)\b
    - type: \b(int|num|double|bool)\b
    - statement: '[-+/*=<>!~%?:&|]'
    - constant: /[^*]([^/]|(\\/))*[^\\]/[gim]*
    - constant: \\[0-7][0-7]?[0-7]?|\\x[0-9a-fA-F]+|\\[bfnrt'"\?\\]
    - comment:
        start: //
        end: $
        rules:
        - todo: TODO:?
    - comment:
        start: /\*
        end: \*/
        rules:
        - todo: TODO:?
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: \\.
# ----- Rule set for language: default -----
- comment:
    start: (?i)^```default$
    end: ^```$
    rules:
    - special: '[[:alnum:].%_+-]+@[[:alnum:].-]+'
    - identifier: (https?|ftp|ssh)://\S*[^])>\s,.]
# ----- Rule set for language: dockerfile -----
- comment:
    start: (?i)^```dockerfile$
    end: ^```$
    rules:
    - type.keyword: 
        (?i)^(FROM|MAINTAINER|RUN|CMD|LABEL|EXPOSE|ENV|ADD|COPY|ENTRYPOINT|VOLUME|USER|WORKDIR|ONBUILD|ARG|HEALTHCHECK|STOPSIGNAL|SHELL)[[:space:]]
    - statement: (\(|\)|\[|\])
    - special: '&&'
    - comment:
        start: '#'
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: \\.
# ----- Rule set for language: dot -----
- comment:
    start: (?i)^```dot$
    end: ^```$
    rules:
    - type: \b(digraph|edge|graph|node|subgraph)\b
    - statement: 
        \b(arrow(head|size|tail)|(bg|fill|font)?color|center|constraint|decorateP|dir|distortion|font(name|size)|head(clip|label)|height|label(angle|distance|font(color|name|size))?|layer(s)?|margin|mclimit|minlen|name|nodesep|nslimit|ordering|orientation|page(dir)?|peripheries|port_label_distance|rank(dir|sep)?|ratio|regular|rotate|same(head|tail)|shape(file)?|sides|size|skew|style|tail(clip|label)|URL|weight|width)\b
    - symbol: =|->|--
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - comment:
        start: //
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment:
        start: /\*
        end: \*/
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: elixir -----
- comment:
    start: (?i)^```elixir$
    end: ^```$
    rules:
    - statement: 
        \b(abs|trunc|rem|div|round|max|min|and|or|not|throw|raise|reraise|hd|tl|in|length|elem|put_elem|destructure|to_(string|charlist)|is_(atom|binary|bitstring|boolean|float|function|integer|list|map|nil|number|pid|port|reference|tuple)|(bit|byte|map|tuple)_size|binary_part|def(delegate|exception|guard|guardp|impl|macro|macrop|module|overridable|p|protocol|struct)?|sigil_[crswCRSWDNT]|if|else|unless|cond|binding|node|self|spawn|spawn_link|spawn_monitor|send|exit|struct|get_and_update_in|get_in|put_in|pop_in|update_in|apply|inspect|make_ref|use|do|end)\b
    - statement: 
        \b(alias|import|require|case|fn|receive|after|try|catch|rescue|super|quote|unquote|unquote_splicing|for|with)\b
    - constant: \b\[A-Z]+\b
    - constant.number: \b[0-9]+\b
    - constant.string: '`[^`]*`|%x\{[^}]*\}'
    - constant.string: '"([^"]|(\\"))*"|%[QW]?\{[^}]*\}|%[QW]?\([^)]*\)|%[QW]?<[^>]*>|%[QW]?\[[^]]*\]|%[QW]?\$[^$]*\$|%[QW]?\^[^^]*\^|%[QW]?![^!]*!'
    - constant.string: "'([^']|(\\\\'))*'|%[qw]\\{[^}]*\\}|%[qw]\\([^)]*\\)|%[qw]<[^>]*>|%[qw]\\\
        [[^]]*\\]|%[qw]\\$[^$]*\\$|%[qw]\\^[^^]*\\^|%[qw]![^!]*!"
    - symbol.brackets: \{|\}|\[|\]|\(|\)
    - comment: '#[^{].*$|#$'
    - comment.bright: '##[^{].*$|##$'
    - type.keyword: \:[a-zA-Z][a-zA-Z0-9_]*
    - type.keyword: \b(describe|test)
    - statement: 
        \b(expected|assert|assert_raise|assert_in_delta|assert_received|catch_error|catch_throw|flunk|refute|refute_in_delta|refute_received)\b
    - symbol.tag: ^\s*\@[a-zA-Z][a-zA-Z0-9_]*\b
    - identifier.macro: \b(__CALLER__|__DIR__|__ENV__|__MODULE__|__aliases__|__block__|defmacro)\b
    - todo: (XXX|TODO|FIXME|\?\?\?)
    - preproc.shebang: \W*#!.+?( |$)
# ----- Rule set for language: elm -----
- comment:
    start: (?i)^```elm$
    end: ^```$
    rules:
    - statement: \b(as|alias|case|else|exposing|if|import|in|let|module|of|port|then|type|)\b
    - statement: (\=|\:|\->)
    - type: \b([A-Z][A-Za-z\d]*)\b
    - identifier: ^([a-z][A-Za-z\d]*)\b
    - constant.string:
        start: '"""'
        end: '"""'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - comment:
        start: --
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment:
        start: \{-
        end: -\}
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: erb -----
- comment:
    start: (?i)^```erb$
    end: ^```$
    rules:
    - error: <[^!].*?>
    - symbol.tag: 
        (?i)<[/]?(a(bbr|cronym|ddress|pplet|rea|rticle|side|udio)?|b(ase(font)?|d(i|o)|ig|lockquote|r)?|ca(nvas|ption)|center|cite|co(de|l|lgroup)|d(ata(list)?|d|el|etails|fn|ialog|ir|l|t)|em(bed)?|fieldset|fig(caption|ure)|font|form|(i)?frame|frameset|h[1-6]|hr|i|img|in(put|s)|kbd|keygen|label|legend|li(nk)?|ma(in|p|rk)|menu(item)?|met(a|er)|nav|no(frames|script)|o(l|pt(group|ion)|utput)|p(aram|icture|re|rogress)?|q|r(p|t|uby)|s(trike)?|samp|se(ction|lect)|small|source|span|strong|su(b|p|mmary)|textarea|time|track|u(l)?|var|video|wbr)(
        .*|>)*?>
    - symbol.tag.extended: (?i)<[/]?(body|div|html|head(er)?|footer|title|table|t(body|d|h(ead)?|r|foot))(
        .*|>)*?>
    - preproc: (?i)<[/]?(script|style)( .*|>)*?>
    - special: '&[^;[[:space:]]]*;'
    - symbol: '[:=]'
    - identifier: 
        (alt|bgcolor|height|href|id|label|longdesc|name|onclick|onfocus|onload|onmouseover|size|span|src|style|target|type|value|width)=
    - constant.string: '"[^"]*"'
    - constant.number: (?i)#[0-9a-fA-F]{6,6}
    - constant.string.url: "(ftp(s)?|http(s)?|git|chrome)://[^ \t]+"
    - comment: <!--.+?-->
    - preproc: <!DOCTYPE.+?>
    - default:
        start: <%
        end: '%>'
        rules: []
    - preproc: <%|%>
    - red: '&[^;[[:space:]]]*;'
    - statement: 
        \b(BEGIN|END|alias|and|begin|break|case|class|def|defined\?|do|else|elsif|end|ensure|false|for|if|in|module|next|nil|not|or|redo|rescue|retry|return|self|super|then|true|undef|unless|until|when|while|yield)\b
    - identifier.var: (\$|@|@@)?\b[A-Z]+[0-9A-Z_a-z]*
    - magenta: (?i)([  ]|^):[0-9A-Z_]+\b
    - identifier.macro: \b(__FILE__|__LINE__)\b
    - brightmagenta: '!/([^/]|(\\/))*/[iomx]*|%r\{([^}]|(\\}))*\}[iomx]*'
    - brightblue: '`[^`]*`|%x\{[^}]*\}'
    - constant.string: '"([^"]|(\\"))*"|%[QW]?\{[^}]*\}|%[QW]?\([^)]*\)|%[QW]?<[^>]*>|%[QW]?\[[^]]*\]|%[QW]?\$[^$]*\$|%[QW]?\^[^^]*\^|%[QW]?![^!]*!'
    - brightgreen: '#\{[^}]*\}'
    - green: "'([^']|(\\\\'))*'|%[qw]\\{[^}]*\\}|%[qw]\\([^)]*\\)|%[qw]<[^>]*>|%[qw]\\\
        [[^]]*\\]|%[qw]\\$[^$]*\\$|%[qw]\\^[^^]*\\^|%[qw]![^!]*!"
    - comment: '#[^{].*$|#$'
    - comment.bright: '##[^{].*$|##$'
    - identifier.macro:
        start: <<-?'?EOT'?
        end: ^EOT
        rules: []
    - todo: (XXX|TODO|FIXME|\?\?\?)
# ----- Rule set for language: erlang -----
- comment:
    start: (?i)^```erlang$
    end: ^```$
    rules:
    - identifier: \b[A-Z][0-9a-z_]*\b
    - constant.number: \b[0-9]+(\.[0-9]+)?(e-?[0-9]+)?\b
    - constant.number: \b[0-9]{1,2}\#[a-zA-Z0-9]+\b
    - constant.bool: \b(true|false)\b
    - constant.number: \$\\?\S{1}
    - statement: 
        \b(after|and|andalso|band|begin|bnot|bor|bsl|bsr|bxor|case|catch|cond|div|end|fun|if|let|not|of|or|orelse|receive|rem|try|when|xor)\b
    - preproc: 
        \-(module|export|record|include|include_lib|define|undef|ifdef|ifndef|else|endif|if|elif|error|warning)\b
    - identifier.macro: \?[A-Z0-9_]+\b
    - special: 
        \b(ext_binary|binary|iovec|message_queue_data|time(_unit|stamp)|abs|apply|atom(_to_binary|_to_list)|binary_(part|to_atom|to_existing_atom|to_float|to_integer|to_list|to_term)|bit(_size|string_to_list)|byte_size|ceil|check_(old_code|process_code)|date|delete_module|demonitor|disconnect_node|element|erase|error|exit|float(_to_binary|_to_list)?|floor|garbage_collect|get|group_leader|halt|integer(_to_binary|to_list)|iolist_(size|to_binary)|is_(alive|atom|binary|bitstring|boolean|float|function|integer|list|map|map_key|number|pid|port|process_alive|record|reference|tuple|length)|link|list_to_(atom|binary|bitstring|existing_atom|float|integer|pid|port|ref|tuple)|load_module|make_ref|map_(get|size)|max|min|module_loaded|monitor(_node)?|nodes?|now|open_port|pid_to_list|port(_close|command|connect|control|to_list)|pre_loaded|process(_flag|_info|es)|purge_module|put|register(ed)?|round|self|setelement|size|spawn(_link|_monitor|_opt|_binary)?|statistics|trunc|tuple_(size|to_list)|unlink|unregister|whereis)\b
    - symbol:
        start: "'"
        end: "'"
        skip: \\.
        rules: []
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: '%.'
        - constant.specialChar: \\[abfnrtv'\"\\]
        - constant.specialChar: \\([0-7]{3}|x[A-Fa-f0-9]{2}|u[A-Fa-f0-9]{4}|U[A-Fa-f0-9]{8})
    - comment:
        start: \(\*
        end: \*\)
        rules:
        - todo: (TODO|FIXME|WONTFIX|NOTE|HACK):?
    - comment:
        start: '%'
        end: $
        rules: []
# ----- Rule set for language: fish -----
- comment:
    start: (?i)^```fish$
    end: ^```$
    rules:
    - constant: \b[0-9]+\b
    - statement: 
        \b(and|begin|break|case|continue|else|end|for|function|if|in|not|or|return|select|shift|switch|while)\b
    - special: (\{|\}|\(|\)|\;|\]|\[|`|\\|\$|<|>|^|!|=|&|\|)
    - type: 
        \b(bg|bind|block|breakpoint|builtin|cd|count|command|commandline|complete|dirh|dirs|echo|emit|eval|exec|exit|fg|fish|fish_config|fish_ident|fish_pager|fish_prompt|fish_right_prompt|fish_update_completions|fishd|funced|funcsave|functions|help|history|jobs|math|mimedb|nextd|open|popd|prevd|psub|pushd|pwd|random|read|set|set_color|source|status|string|trap|type|ulimit|umask|vared)\b
    - type: 
        \b((g|ig)?awk|bash|dash|find|\w{0,4}grep|kill|killall|\w{0,4}less|make|pkill|sed|sh|tar)\b
    - type: 
        \b(base64|basename|cat|chcon|chgrp|chmod|chown|chroot|cksum|comm|cp|csplit|cut|date|dd|df|dir|dircolors|dirname|du|env|expand|expr|factor|false|fmt|fold|head|hostid|id|install|join|link|ln|logname|ls|md5sum|mkdir|mkfifo|mknod|mktemp|mv|nice|nl|nohup|nproc|numfmt|od|paste|pathchk|pinky|pr|printenv|printf|ptx|pwd|readlink|realpath|rm|rmdir|runcon|seq|(sha1|sha224|sha256|sha384|sha512)sum|shred|shuf|sleep|sort|split|stat|stdbuf|stty|sum|sync|tac|tail|tee|test|time|timeout|touch|tr|true|truncate|tsort|tty|uname|unexpand|uniq|unlink|users|vdir|wc|who|whoami|yes)\b
    - statement: --[a-z-]+
    - statement: \ -[a-z]+
    - identifier: (?i)\$\{?[0-9A-Z_!@#$*?-]+\}?
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules: []
    - comment:
        start: '#'
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: forth -----
- comment:
    start: (?i)^```forth$
    end: ^```$
    rules:
    - identifier: \b[A-Za-z_0-9-]*\b
    - statement: 
        \b(?i:(if|else|then|do|loop|case|endcase|of|endof|begin|while|repeat|until|again|unloop|leave|exit|done|next|\?do|\+do|\-do|\+loop|\-loop|\?leave))\b
    - statement: (^:|;$)
    - type: \b(?i:(variable|constant|cells))\b
    - special: \B[?.]\B
    - constant.number: \b[0-9]+\b
    - constant.string:
        start: \b([Ss.]" )
        end: '"'
        rules: []
    - comment:
        start: \(
        end: \)
        rules:
        - todo: (TODO|NOTE|XXX|FIXME):?
    - comment:
        start: \\
        end: $
        rules:
        - todo: (TODO|NOTE|XXX|FIXME):?
# ----- Rule set for language: fortran -----
- comment:
    start: (?i)^```fortran$
    end: ^```$
    rules:
    - type: (?i)\b(action|advance|all|allocatable|allocated|any|apostrophe)\b
    - type: (?i)\b(append|asis|assign|assignment|associated|bind|character|common)\b
    - type: (?i)\b(complex|data|default|delim|dimension|double precision)\b
    - type: (?i)\b(elemental|enum|enumerator|epsilon|external|file|fmt|form|format|huge)\b
    - type: (?i)\b(implicit|include|index|inquire|integer|intent|interface)\b
    - type: (?i)\b(intrinsic|iostat|kind|logical|module|none|null|only)\\b
    - type: (?i)\b(operator|optional|pack|parameter|pointer|position|private)\b
    - type: (?i)\b(program|public|real|recl|recursive|selected_int_kind)\b
    - type: (?i)\b(selected_real_kind|subroutine|status|module|function|logical)\b
    - constant: (?i)\b(abs|achar|adjustl|adjustr|allocate|bit_size|call|char)\b
    - constant: (?i)\b(close|contains|count|cpu_time|cshift|date_and_time)\b
    - constant: (?i)\b(deallocate|digits|dot_product|eor|eoshift|iachar)\b
    - constant: (?i)\b(iand|ibclr|ibits|ibset|ichar|ieor|iolength|ior|ishft|ishftc)\b
    - constant: (?i)\b(lbound|len|len_trim|matmul|maxexponent|maxloc|maxval|merge)\b
    - constant: (?i)\b(minexponent|minloc|minval|mvbits|namelist|nearest|nullify)\b
    - constant: (?i)\b(open|pad|present|print|product|pure|quote|radix)\b
    - constant: (?i)\b(random_number|random_seed|range|read|readwrite|replace)\b
    - constant: (?i)\b(reshape|rewind|save|scan|sequence|shape|sign|size|spacing)\b
    - constant: (?i)\b(spread|sum|system_clock|target|transfer|transpose|trim)\b
    - constant: (?i)\b(ubound|unpack|verify|write|tiny|type|use|yes|true|false|not)\b
    - constant.number: \b([0-9]+)\b
    - statement: (?i)\b(.and.|case|do|else|else?if|else?where|end|end?do|end?if)\b
    - statement: (?i)\b(end?select|.eqv.|forall|if|lge|lgt|lle|llt|.neqv.|.not.)\b
    - statement: (?i)\b(or|and|repeat|select|case|then|where|while|import)\b
    - special: (?i)\b(continue|cycle|exit|go?to|result|return)\b
    - symbol.operator: '[.:;,+*|=!\%]|/|-|>|<|&'
    - symbol.bracket: '[(){}]|\[|\]'
    - preproc: 
        ^[[:space:]]*#[[:space:]]*(define|include|(un|ifn?)def|endif|el(if|se)|if|warning|error)
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - comment:
        start: '!'
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: freebsd-kernel -----
- comment:
    start: (?i)^```freebsd-kernel$
    end: ^```$
    rules:
    - identifier: ^(cpu|ident|options|makeoptions|device|include)
    - statement: \s\S*
    - comment:
        start: '#'
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: fsharp -----
- comment:
    start: (?i)^```fsharp$
    end: ^```$
    rules:
    - identifier: \b[A-Z][0-9a-z_]{2,}\b
    - statement: \b(let|val|method|in|and|rec|private|virtual|constraint)\b
    - type: \b(type|open|class|module|exception|external)\b
    - statement: \b(fun|function|functor|match|try|with)\b
    - statement: \b(as|when|of)\b
    - statement: \b(if|then|else)\b
    - type: \b(begin|end|object|struct|sig|for|while|do|done|to|downto)\b
    - constant.bool: \b(true|false)\b
    - special: \b(include|inherit|initializer)\b
    - special: \b(new|ref|mutable|lazy|assert|raise)\b
    - type: 
        \b(base|delegate|downcast|extern|finally|fixed|global|inline|interface|internal|let!|member|namespace|null|override|private|public)\b
    - type: \b(return|return!|select|static|upcast|use|use!|void|yield|yield!)\b
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: '%.'
        - constant.specialChar: \\[abfnrtv'\"\\]
        - constant.specialChar: \\([0-7]{3}|x[A-Fa-f0-9]{2}|u[A-Fa-f0-9]{4}|U[A-Fa-f0-9]{8})
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: '%.'
        - constant.specialChar: \\[abfnrtv'\"\\]
        - constant.specialChar: \\([0-7]{3}|x[A-Fa-f0-9]{2}|u[A-Fa-f0-9]{4}|U[A-Fa-f0-9]{8})
    - comment:
        start: \(\*
        end: \*\)
        rules: []
# ----- Rule set for language: gdscript -----
- comment:
    start: (?i)^```gdscript$
    end: ^```$
    rules:
    - constant: \b(INF|NAN|PI|TAU)\b
    - constant.bool: \b(null|true|false)\b
    - identifier: 
        \b(abs|acos|asin|atan|atan2|ceil|clamp|convert|cos|cosh|db2linear|decimals|deg2rad|ease|exp|float|floor|fmod|fposmod|hash|int|isinf|isnan|lerp|linear2db|load|log|max|min|nearest_po2|pow|preload|print|printerr|printraw|prints|printt|rad2deg|rand_range|rand_seed|randomize|randi|randf|range|round|seed|sin|slerp|sqrt|str|str2var|tan|typeof|var2str|weakref)\b
    - identifier: 
        \b(AnimationPlayer|AnimationTreePlayer|Button|Control|Engine|HTTPClient|HTTPRequest|Input|InputEvent|MainLoop|Node|Node2D|OS|SceneTree|Spatial|StreamPeer|PacketPeer|PacketPeerUDP|Timer|Tween)\b
    - type: 
        \b(AABB|Array|Basis|Color|Dictionary|NodePath|Object|Plane|PoolByteArray|PoolColorArray|PoolIntArray|PoolRealArray|PoolVector2Array|PoolVector3Array|Quat|Rect2|RID|String|Transform|Transform2D|Vector2|Vector3)\b
    - identifier: func [a-zA-Z_0-9]+
    - statement: 
        \b(and|as|assert|break|breakpoint|class|const|continue|elif|else|enum|export|extends|for|func|if|in|is|map|master|mastersync|match|not|onready|or|pass|remote|remotesync|return|self|setget|slave|slavesync|signal|sync|tool|var|while|yield)\b
    - statement: '[.:;,+*|=!\%@]|<|>|/|-|&'
    - statement: '[(){}]|\[|\]'
    - constant: \b[0-9]+\b
    - constant.number: \b([0-9]+|0x[0-9a-fA-F]*)\b|'.'
    - comment:
        start: '"""'
        end: '"""'
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment:
        start: "'''"
        end: "'''"
        rules:
        - todo: (TODO|XXX|FIXME):?
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\([0-7]{3}|x[A-Fa-f0-9]{2}|u[A-Fa-f0-9]{4}|U[A-Fa-f0-9]{8})
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: \\([0-7]{3}|x[A-Fa-f0-9]{2}|u[A-Fa-f0-9]{4}|U[A-Fa-f0-9]{8})
    - comment:
        start: '#'
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: gemini -----
- comment:
    start: (?i)^```gemini$
    end: ^```$
    rules:
    - constant: ^=>[[:space:]].*
    - special:
        start: ^```
        end: ^```
        rules: []
    - special: ^#{1,3}.*
    - identifier: ^\*[[:space:]]
    - statement: ^>.*
# ----- Rule set for language: gentoo-ebuild -----
- comment:
    start: (?i)^```gentoo-ebuild$
    end: ^```$
    rules:
    - identifier: 
        ^src_(unpack|compile|install|test)|^pkg_(config|nofetch|setup|(pre|post)(inst|rm))
    - statement: 
        \b(case|do|done|elif|else|esac|exit|fi|for|function|if|in|local|read|return|select|shift|then|time|until|while|continue|break)\b
    - statement: (\{|\}|\(|\)|\;|\]|\[|`|\\|\$|<|>|!|=|&|\|)
    - statement: -(e|d|f|r|g|u|w|x|L)\b
    - statement: -(eq|ne|gt|lt|ge|le|s|n|z)\b
    - preproc: \$\{?[a-zA-Z_0-9]+\}?
    - special: 
        \b(ARCH|HOMEPAGE|DESCRIPTION|IUSE|SRC_URI|LICENSE|SLOT|KEYWORDS|FILESDIR|WORKDIR|(P|R)?DEPEND|PROVIDE|DISTDIR|RESTRICT|USERLAND)\b
    - special: \b(S|D|T|PV|PF|P|PN|A)\b|\bC(XX)?FLAGS\b|\bLDFLAGS\b|\bC(HOST|TARGET|BUILD)\b
    - identifier: \buse(_(with|enable))?\b [!a-zA-Z0-9_+ -]*|inherit.*
    - statement: \be(begin|end|conf|install|make|warn|infon?|error|log|patch|new(group|user))\b
    - statement: 
        \bdie\b|\buse(_(with|enable))?\b|\binherit\b|\bhas\b|\b(has|best)_version\b|\bunpack\b
    - statement: 
        \b(do|new)(ins|s?bin|doc|lib(\.so|\.a)|man|info|exe|initd|confd|envd|pam|menu|icon)\b
    - statement: \bdo(python|sed|dir|hard|sym|html|jar|mo)\b|\bkeepdir\b
    - statement: prepall(docs|info|man|strip)|prep(info|lib|lib\.(so|a)|man|strip)
    - statement: \b(doc|ins|exe)into\b|\bf(owners|perms)\b|\b(exe|ins|dir)opts\b
    - type: 
        \bmake\b|\b(cat|cd|chmod|chown|cp|echo|env|export|grep|let|ln|mkdir|mv|rm|sed|set|tar|touch|unset)\b
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - comment:
        start: '#'
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: gentoo-etc-portage -----
- comment:
    start: (?i)^```gentoo-etc-portage$
    end: ^```$
    rules:
    - constant.bool.false: '[[:space:]]+\+?[a-zA-Z0-9_-]+'
    - constant.bool.true: '[[:space:]]+-[a-zA-Z0-9_-]+'
    - special: -[[:digit:]].*([[:space:]]|$)
    - identifier.class: '[~-]?\b(alpha|amd64|arm|hppa|ia64|mips|ppc|ppc64|s390|sh|sparc|x86|x86-fbsd)\b'
    - identifier.class: '[[:space:]][~-]?\*'
    - statement: ^[[:space:]]*.*/
    - symbol: ^[[:space:]]*(=|~|<|<=|=<|>|>=|=>)
    - comment:
        start: '#'
        end: $
        rules: []
# ----- Rule set for language: git-commit -----
- comment:
    start: (?i)^```git-commit$
    end: ^```$
    rules:
    - type.keyword: '#[[:space:]](deleted|modified|new file|renamed):[[:space:]].*'
    - type.keyword: '#[[:space:]]deleted:'
    - type.keyword: '#[[:space:]]modified:'
    - type.keyword: '#[[:space:]]new file:'
    - type.keyword: '#[[:space:]]renamed:'
    - type.keyword: ^#[[:space:]]Changes.*[:]
    - type.keyword: ^#[[:space:]]Your branch and '[^']+
    - type.keyword: ^#[[:space:]]Your branch and '
    - type.keyword: ^#[[:space:]]On branch [^ ]+
    - type.keyword: ^#[[:space:]]On branch
    - type.keyword: '\b(?i)((fix(es|ed)?|close(s|d)?) #[0-9]+)\b'
    - comment.line:
        start: ^#
        end: $
        rules: []
    - default:
        start: ^diff --git
        end: ^ENDOFFILE
        rules:
        - include: patch
# ----- Rule set for language: git-config -----
- comment:
    start: (?i)^```git-config$
    end: ^```$
    rules:
    - constant: \<(true|false)\>
    - type.keyword: ^[[:space:]]*[^=]*=
    - constant: ^[[:space:]]*\[.*\]$
    - constant: "\"(\\\\.|[^\"])*\"|'(\\\\.|[^'])*'"
    - comment:
        start: '#'
        end: $
        rules: []
# ----- Rule set for language: git-rebase-todo -----
- comment:
    start: (?i)^```git-rebase-todo$
    end: ^```$
    rules:
    - statement: 
        ^(p(ick)?|r(eword)?|e(dit)?|s(quash)?|f(ixup)?|x|exec|b(reak)?|d(rop)?|l(abel)?|t|reset|m(erge)?)\b
    - identifier: \b([0-9a-fA-F]{7,40})\b
    - type.keyword: '\b(?i)((fix(es|ed)?|close(s|d)?) #[0-9]+)\b'
    - comment.line:
        start: ^#
        end: $
        rules: []
# ----- Rule set for language: glsl -----
- comment:
    start: (?i)^```glsl$
    end: ^```$
    rules:
    - identifier: '[A-Za-z_][A-Za-z0-9_]*[[:space:]]*[()]'
    - type: 
        \b(void|bool|bvec2|bvec3|bvec4|int|ivec2|ivec3|ivec4|float|vec2|vec3|vec4|mat2|mat3|mat4|struct|sampler1D|sampler2D|sampler3D|samplerCUBE|sampler1DShadow|sampler2DShadow)\b
    - identifier: 
        \bgl_(DepthRangeParameters|PointParameters|MaterialParameters|LightSourceParameters|LightModelParameters|LightModelProducts|LightProducts|FogParameters)\b
    - statement: 
        \b(const|attribute|varying|uniform|in|out|inout|if|else|return|discard|while|for|do)\b
    - statement: \b(break|continue)\b
    - constant.bool: \b(true|false)\b
    - symbol.operator: '[-+/*=<>?:!~%&|^]'
    - constant.number: \b([0-9]+|0x[0-9a-fA-F]*)\b
    - comment:
        start: //
        end: $
        rules:
        - todo: TODO:?
    - comment:
        start: /\*
        end: \*/
        rules:
        - todo: TODO:?
# ----- Rule set for language: gnuplot -----
- comment:
    start: (?i)^```gnuplot$
    end: ^```$
    rules:
    - statement: \b(set|unset|plot|splot|replot|if|else|do|for|while|fit)\b
    - symbol.operator: '[-+/*=<>?:!~%&|^$]'
    - constant.number: \b([0-9]+|0x[0-9a-fA-F]*)\b
    - comment:
        start: '#'
        end: $
        rules:
        - todo: TODO:?
# ----- Rule set for language: go -----
- comment:
    start: (?i)^```go$
    end: ^```$
    rules:
    - special: \b(break|case|continue|default|go|goto|range|return|println|fallthrough)\b
    - statement: \b(else|for|if|switch|select)\b
    - preproc: 
        \b(package|import|const|var|type|struct|func|defer|iota|make|new|copy|len|cap|panic|append|close|delete|print|recover)\b
    - symbol.operator: '[-+/*=<>!~%&|^]|:='
    - symbol: (,|\.)
    - type: \b(u?int(8|16|32|64)?|float(32|64)|complex(64|128))\b
    - type: \b(uintptr|byte|rune|string|interface|bool|map|chan|error)\b
    - type.keyword: \b(struct)\b
    - constant.bool: \b(true|false|nil)\b
    - symbol.brackets: (\{|\})
    - symbol.brackets: (\(|\))
    - symbol.brackets: (\[|\])
    - constant.number: \b([0-9]+|0x[0-9a-fA-F]*)\b|'.'
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: '%.'
        - constant.specialChar: \\[abfnrtv'\"\\]
        - constant.specialChar: \\([0-7]{3}|x[A-Fa-f0-9]{2}|u[A-Fa-f0-9]{4}|U[A-Fa-f0-9]{8})
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - error: ..+
        - constant.specialChar: '%.'
        - constant.specialChar: \\[abfnrtv'\"\\]
        - constant.specialChar: \\([0-7]{3}|x[A-Fa-f0-9]{2}|u[A-Fa-f0-9]{4}|U[A-Fa-f0-9]{8})
    - constant.string:
        start: '`'
        end: '`'
        rules: []
    - comment:
        start: //
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment:
        start: /\*
        end: \*/
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: godoc -----
- comment:
    start: (?i)^```godoc$
    end: ^```$
    rules:
    - preproc: ^[^ ].*
    - comment:
        start: //
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: golo -----
- comment:
    start: (?i)^```golo$
    end: ^```$
    rules:
    - type: \b(function|fun|)\b
    - type: 
        \b(struct|DynamicObject|union|AdapterFabric|Adapter|DynamicVariable|Observable)\b
    - type: \b(list|set|array|vector|tuple|map)\b
    - type: 
        \b(Ok|Error|Empty|None|Some|Option|Result|Result.ok|Result.fail|Result.error|Result.empty|Optional.empty|Optional.of)\b
    - identifier.class: \b(augment|pimp)\b
    - identifier.class: \b(interfaces|implements|extends|overrides|maker|newInstance)\b
    - identifier.class: 
        \b(isEmpty|isNone|isPresent|isSome|iterator|flattened|toList|flatMap|`and|orElseGet|`or|toResult|apply|either)\b
    - identifier.class: \b(result|option|trying|raising|nullify|catching)\b
    - identifier.class: \b(promise|setFuture|failedFuture|all|any)\b
    - identifier.class: 
        \b(initialize|initializeWithinThread|start|future|fallbackTo|onSet|onFail|cancel|enqueue)\b
    - identifier.class: 
        \b(println|print|raise|readln|readPassword|secureReadPassword|requireNotNull|require|newTypedArray|range|reversedRange|mapEntry|asInterfaceInstance|asFunctionalInterface|isClosure|fileToText|textToFile|fileExists|currentDir|sleep|uuid|isArray|arrayTypeOf|charValue|intValue|longValue|doubleValue|floatValue|removeByIndex|box)\b
    - identifier.class: 
        \b(likelySupported|reset|bold|underscore|blink|reverse_video|concealed|fg_black|fg_red|fg_green|fg_yellow|fg_blue|fg_magenta|fg_cyan|fg_white|bg_black|bg_red|bg_green|bg_yellow|bg_blue|bg_magenta|bg_cyan|bg_white|cursor_position|cursor_save_position|cursor_restore_position|cursor_up|cursor_down|cursor_forward|cursor_backward|erase_display|erase_line)\b
    - identifier.class: \b(emptyList|cons|lazyList|fromIter|generator|repeat|iterate)\b
    - identifier.class: \b(asLazyList|foldl|foldr|take|takeWhile|drop|dropWhile|subList)\b
    - identifier.class: \b(import)\b
    - identifier.class: \b(module)\b
    - identifier.class: \b(JSON)\b
    - identifier.class: \b(stringify|parse|toJSON|toDynamicObject|updateFromJSON)\b
    - identifier.class: \b(newInstance|define|getKey|getValue|properties|fallback)\b
    - identifier.class: \b(times|upTo|downTo)\b
    - identifier.class: \b(format|toInt|toInteger|toDouble|toFloat|toLong)\b
    - identifier.class: \b(head|tail|isEmpty|reduce|each|count|exists)\b
    - identifier.class: 
        \b(newWithSameType|destruct|append|add|addIfAbsent|prepend|insert|last|unmodifiableView|find|filter|map|join|reverse|reversed|order|ordered|removeAt|include|exclude|remove|delete|has|contains|getOrElse|toArray)\b
    - identifier.class: 
        \b(add|addTo|succ|pred|mul|neg|sub|rsub|div|rdiv|mod|rmod|pow|rpow|str|lt|gt|eq|ne|ge|le|`and|`or|`not|xor|even|odd|contains|isEmpty|`is|`isnt|`oftype|`orIfNull|fst|snd|getitem|setitem|getter|id|const|False|True|Null|curry|uncurry|unary|spreader|varargs|swapArgs|swapCurry|swapCouple|swap|invokeWith|pipe|compose|io|andThen|until|recur|cond)\b
    - identifier.class: \b(toUpperCase|equals|startsWith)\b
    - statement: \b(if|else|then|when|case|match|otherwise)\b
    - special: \b(with|break|continue|return)\b
    - error: \b(try|catch|finally|throw)\b
    - identifier: \b(super|this|let|var|local)\b
    - symbol.brackets: '[(){}]|\[|\]'
    - statement: \b(for|while|foreach|in)\b
    - constant: \b(and|in|is|not|or|isnt|orIfNull)\b
    - constant.bool: \b(true|false)\b
    - constant: \b(null|undefined)\b
    - symbol.operator: '[\-+/*=<>!~%&|^]|:='
    - constant.number: \b([0-9]+|0x[0-9a-fA-F]*)\b|'.'
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - comment:
        start: '#'
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment:
        start: '----'
        end: '----'
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: gomod -----
- comment:
    start: (?i)^```gomod$
    end: ^```$
    rules:
    - type: (^|[ \t])+\b([a-zA-Z0-9-]+\.?)+(/[a-zA-Z0-9-_\.]+)*\b
    - special: (^|[ \t])+\b(module|go)\b
    - preproc: (^|[ \t])+\b(toolchain|require|exclude|replace|retract)\b
    - symbol.operator: =>
    - type: (\(|\))
    - type: (^|[ \t])+([0-9]+\.?)+
    - constant.string: (^|[ \t])+v([0-9]+\.?){3}.*
    - constant.number: (^|[ \t])+v([0-9]+\.?){3}
    - comment:
        start: //
        end: $
        rules:
        - todo: (indirect):?
# ----- Rule set for language: graphql -----
- comment:
    start: (?i)^```graphql$
    end: ^```$
    rules:
    - type: 
        \b(?:(query|mutation|subscription|type|input|scalar|fragment|schema|union|on|extends?))\b
    - statement: \b(ID|Int|Float|Boolean|String|Datetime|Null)\b
    - statement: (__\w+)
    - statement: ((\w+)(?:\:([\s]*)?)(?:\$))
    - statement: 
        \b(QUERY|MUTATION|SUBSCRIPTION|FIELD|FRAGMENT_DEFINITION|FRAGMENT_SPREAD|INLINE_FRAGMENT|SCHEMA|SCALAR|OBJECT|FIELD_DEFINITION|ARGUMENT_DEFINITION|INTERFACE|UNION|ENUM|ENUM_VALUE|INPUT_OBJECT|INPUT_FIELD_DEFINITION)\b
    - constant: (@\w+)
    - constant: \b(Query|Mutation|Subscription|Schema|Root)\b
    - special: (\$\w+)
    - special: (!)
    - symbol: (:|=|\||\(|\)|\{|\}|\[|\])
    - constant.bool: \b(true|false)\b
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - comment:
        start: '#'
        end: $
        rules: []
# ----- Rule set for language: groff -----
- comment:
    start: (?i)^```groff$
    end: ^```$
    rules:
    - statement: ^\.(ds|nr) [^[[:space:]]]*
    - constant.specialChar: \\.
    - constant.specialChar: \\f.|\\f\(..|\\s(\+|\-)?[0-9]
    - constant: (\\|\\\\)n(.|\(..)
    - constant:
        start: (\\|\\\\)n\[
        end: ']'
        rules: []
    - type: ^\.[[:space:]]*[^[[:space:]]]*
    - comment: ^\.\\".*$
    - constant.string: (\\|\\\\)\*(.|\(..)
    - constant.string:
        start: (\\|\\\\)\*\[
        end: ']'
        rules: []
    - constant.specialChar: \\\(..
    - constant.specialChar:
        start: \\\[
        end: ']'
        rules: []
    - identifier.macro: \\\\\$[1-9]
# ----- Rule set for language: groovy -----
- comment:
    start: (?i)^```groovy$
    end: ^```$
    rules:
    - identifier: \b[A-Z_$]+\b
    - identifier.class: \b[A-Z][a-zA-Z0-9$]+\b
    - type: \b(byte|short|int|long|float|double|char|boolean|void)\b
    - type.keyword: \b(private|public|protected|static|final|var|def)\b
    - statement: \b(for|while|do|if|else|switch|case|default|try|catch|finally)\b
    - statement: \b(break|continue|return|throw|assert)\b
    - statement: \b(package|import|class|interface|trait|enum|extends|implements|throws)\b
    - statement: \b(this|super)\b
    - statement: \b(goto|const)\b
    - symbol.operator: '[-+*/%=<>^~&|!?:;,.@]|\b(in|is|as|instanceof|new)\b'
    - symbol.brackets: '[(){}]|\[|\]'
    - constant.number: (?i)\b[1-9]([_0-9]*[0-9])?[GLIDF]?\b
    - constant.number: (?i)\b0b[01]([01_]*[01])?[GLIDF]?\b
    - constant.number: (?i)\b0[0-7]([0-7_]*[0-7])?[GLIDF]?\b
    - constant.number: (?i)\b0x[0-9a-fA-F]([0-9a-f_]*[0-9a-fA-F])?[GLIDF]?\b
    - constant.number: 
        (?i)\b[0-9]([0-9_]*[0-9])?([.][0-9]([0-9_]*[0-9])?)?(e[+-]?[0-9]([0-9_]*[0-9])?)?[DF]?\b
    - constant.bool: \b(true|false|null)\b
    - identifier: '@[A-Za-z_$][A-Za-z0-9_$]*\b'
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: \\(["'bfnrst\x24\\]|u[a-fA-F0-9]{4})
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\(["'bfnrst\x24\\]|u[a-fA-F0-9]{4})
        - identifier.var: "\\x24[\\wÀ-ÖØ-öø-ÿĀ-\uFFFE]+([.][a-zA-Z0-9_À-ÖØ-öø-ÿĀ-\uFFFE\
            ]+)*"
        - identifier: \x24[{].*[}]
    - constant.string:
        start: '"""'
        end: '"""'
        skip: \\.
        rules:
        - constant.specialChar: \\(["'bfnrst\x24\\]|u[a-fA-F0-9]{4})
        - identifier.var: "\\x24[\\wÀ-ÖØ-öø-ÿĀ-\uFFFE]+([.][a-zA-Z0-9_À-ÖØ-öø-ÿĀ-\uFFFE\
            ]+)*"
        - identifier:
            start: '[$][{]'
            end: '[}]'
            rules: []
    - constant.string:
        start: "'''"
        end: "'''"
        skip: \\.
        rules:
        - constant.specialChar: \\(["'bfnrst\x24\\]|u[a-fA-F0-9]{4})
    - constant.string:
        start: '[$]/'
        end: /[$]
        rules: []
    - comment:
        start: //
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment:
        start: /[*]
        end: '[*]/'
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment:
        start: /[*][*]@?
        end: '[*]/'
        rules: []
# ----- Rule set for language: haml -----
- comment:
    start: (?i)^```haml$
    end: ^```$
    rules:
    - symbol: -|=
    - default: ->|=>
    - constant: ([  ]|^)%[0-9A-Za-z_]+>
    - special: :[0-9A-Za-z_]+>
    - type: \.[A-Za-z_]+>
    - constant.string: '"([^"]|(\\"))*"|%[QW]?\{[^}]*\}|%[QW]?\([^)]*\)|%[QW]?<[^>]*>|%[QW]?\$[^$]*\$|%[QW]?\^[^^]*\^|%[QW]?![^!]*!'
    - constant.string: "'([^']|(\\\\'))*'|%[qw]\\{[^}]*\\}|%[qw]\\([^)]*\\)|%[qw]<[^>]*>|%[qw]\\\
        [[^]]*\\]|%[qw]\\$[^$]*\\$|%[qw]\\^[^^]*\\^|%[qw]![^!]*!"
    - identifier: '#\{[^}]*\}'
    - identifier.var: (@|@@)[0-9A-Z_a-z]+
    - comment: '#[^{].*$|#$'
# ----- Rule set for language: hare -----
- comment:
    start: (?i)^```hare$
    end: ^```$
    rules:
    - identifier: \b[A-Z_][0-9A-Z_]+\b
    - type: \b(bool|char|str|rune|void)\b
    - type: \b(f32|f64|uint|int|u8|u16|u32|u64|i8|i16|i32|i64|uintptr)\b
    - statement: \b(case|else|for|if|switch)\b
    - statement: \b(continue|break|return)\b
    - special: 
        \b(as|const|def|defer|enum|export|fn|is|let|match|static|struct|type|union|yield|_)\b
    - preproc: \b(abort|alloc|append|assert|delete|free|insert|len|nullable|offset|size)\b
    - preproc: ^use .+;
    - preproc: \@([a-zA-Z_][0-9a-zA-Z_]+)\b
    - constant: \b(false|null|true)\b
    - constant.number: \b(0x[0-9A-Fa-f]+(i(8|16|32|64)?|u(8|16|32|64)?|z)?)\b
    - constant.number: \b(0o[0-7]+(i(8|16|32|64)?|u(8|16|32|64)?|z)?)\b
    - constant.number: \b(0b[01]+(i(8|16|32|64)?|u(8|16|32|64)?|z)?)\b
    - constant.specialChar: \".*\"
    - constant.specialChar: '`.*`'
    - constant.specialChar: "'([^'\\\\]|\\\\(0|a|b|f|n|r|t|v|\\\\|'|\\\"|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8}))'"
    - symbol.operator: ([.:;,+*|=!\%]|<|>|/|-|&)
    - symbol.brackets: '[(){}]|\[|\]'
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: 
            \\(["'abfnrtv\\]|[0-3]?[0-7]{1,2}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - error: ..+
        - constant.specialChar: 
            \\(["'abfnrtv\\]|[0-3]?[0-7]{1,2}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})
    - comment:
        start: //
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: haskell -----
- comment:
    start: (?i)^```haskell$
    end: ^```$
    rules:
    - symbol.operator: '[!#$%&:*+/<=>?@.\\^\|~\p{Sm}\-]+'
    - type: \b([A-Z][A-Za-z0-9_]*\.)*[A-Z]+[A-Za-z0-9_']*\b
    - default: \b([A-Z][A-Za-z0-9_]*\.)*[a-z][A-Za-z0-9_']*\b
    - statement: ;
    - symbol.bracket: '[\(\)\[\]\{\}]'
    - special: "`[A-Za-z0-9']+`"
    - statement: 
        \b(case|of|class|data|default|deriving|do|forall|foreign|hiding|if|then|else|import|infix|infixl|infixr|instance|let|in|mdo|module|newtype|qualified|type|where)\b
    - constant.bool: \b(True|False)\b
    - constant: \b(Nothing|Just|Left|Right|LT|EQ|GT)\b
    - constant: \(\)
    - constant.number: 
        \b(0[xX][0-9A-Fa-f]+|0[oO][0-7]+|0[bB][01]+|[-]?[0-9]+([.][0-9]+)?([eE][+-]?[0-9]+)?)\b
    - identifier.class: 
        \b(Additive|Applicative|Bounded|Data|Enum|Eq|Floating|Foldable|Fractional|Functor|Integral|Monad|MonadPlus|Monoid|Num|Ord|Read|Real|RealFloat|RealFrac|Semigroup|Show|Traversable|Typeable|Zip)[
        ]
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - special: \\&
        - constant.specialChar: 
            \\([abfnrtv"'\\]|[0-9]+|x[0-9a-fA-F]+|o[0-7]+|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC[1-4]|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL)
    - comment:
        start: --
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment:
        start: \{-
        end: -\}
        rules:
        - todo: (TODO|XXX|FIXME):?
    - identifier.macro: undefined
# ----- Rule set for language: hc -----
- comment:
    start: (?i)^```hc$
    end: ^```$
    rules:
    - identifier: \b[A-Z_][0-9A-Z_]+\b
    - type: 
        \b(F64|I8|U8|I16|U16|I32|U32|I64|U64|sizeof|enum|U0|static|extern|struct|union|class|intern|public|argc|argv|asm)\b
    - statement: \b(for|if|while|do|else|case|default|switch)\b
    - statement: \b(try|catch|throw|goto|continue|break|return)\b
    - preproc: 
        ^[[:space:]]*#[[:space:]]*(define|pragma|include|(un|ifn?)def|endif|el(if|se)|if|help_index|ifjit|ifaot|exe)
    - symbol.operator: ([.:;,+*|=!\%]|<|>|/|-|&)
    - symbol.brackets: '[(){}]|\[|\]'
    - constant.number: 
        (\b([1-9][0-9]*|0[0-7]*|0[Xx][0-9A-Fa-f]+|0[Bb][01]+)([Uu]?[Ll][Ll]?|[Ll][Ll]?[Uu]?)?\b)
    - constant.number: 
        (\b(([0-9]*[.][0-9]+|[0-9]+[.][0-9]*)([Ee][+-]?[0-9]+)?|[0-9]+[Ee][+-]?[0-9]+)[FfLl]?\b)
    - constant.number: 
        (\b0[Xx]([0-9A-Za-z]*[.][0-9A-Za-z]+|[0-9A-Za-z]+[.][0-9A-Za-z]*)[Pp][+-]?[0-9]+[FfLl]?\b)
    - constant.number: 'NULL'
    - constant.number: 'TRUE'
    - constant.number: 'FALSE'
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: 
            \\(["'abfnrtv\\]|[0-3]?[0-7]{1,2}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - error: ..+
        - constant.specialChar: 
            \\(["'abfnrtv\\]|[0-3]?[0-7]{1,2}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})
    - comment:
        start: //
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment:
        start: /\*
        end: \*/
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: html -----
- comment:
    start: (?i)^```html$
    end: ^```$
    rules:
    - preproc: <!(?i)(DOCTYPE html.*)>
    - symbol.tag:
        start: 
          <(a|abbr|acronym|address|applet|area|article|aside|audio|b|base|bdi|bdo|big|blockquote|body|br|button|canvas|caption|center|cite|code|col|colgroup|command|datalist|dd|del|details|dfn|dialog|dir|div|dl|dt|em|embed|fieldset|figcaption|figure|font|footer|form|frame|frameset|h[1-6]|head|header|hgroup|hr|html|i|iframe|img|input|ins|kbd|keygen|label|legend|li|link|map|main|mark|menu|meta|meter|nav|noframes|noscript|object|ol|optgroup|option|output|p|param|pre|progress|q|rp|rt|ruby|s|samp|section|select|small|source|span|strike|strong|sub|summary|sup|table|tbody|td|textarea|tfoot|th|thead|time|title|tr|track|tt|u|ul|var|video|wbr)\b
        end: '>'
        rules:
        - identifier: 
            \b(placeholder|style|alt|bgcolor|height|href|id|(aria|data)\-.+|label|longdesc|name|on(click|focus|load|mouseover)|size|span|src|target|type|value|width|class|charset|content|rel|integrity|crossorigin|for|onsubmit|lang|role)\b
        - special: \b(required)\b
        - constant.string:
            start: '"'
            end: '"'
            skip: \\.
            rules:
            - constant.specialChar: \\.
            - constant.string.url: ((ftp(s)?|http(s)?|git|chrome)://[^\s]+)
        - constant.string:
            start: "'"
            end: "'"
            skip: \\.
            rules:
            - constant.specialChar: \\.
            - constant.string.url: ((ftp(s)?|http(s)?|git|chrome)://[^\s]+)
        - symbol: \b(=|:\b)
    - symbol.tag:
        start: 
          </(a|abbr|acronym|address|applet|area|article|aside|audio|b|base|bdi|bdo|big|blockquote|body|br|button|canvas|caption|center|cite|code|col|colgroup|command|datalist|dd|del|details|dfn|dialog|dir|div|dl|dt|em|embed|fieldset|figcaption|figure|font|footer|form|frame|frameset|h[1-6]|head|header|hgroup|hr|html|i|iframe|img|input|ins|kbd|keygen|label|legend|li|link|map|main|mark|menu|meta|meter|nav|noframes|noscript|object|ol|optgroup|option|output|p|param|pre|progress|q|rp|rt|ruby|s|samp|section|select|small|source|span|strike|strong|sub|summary|sup|table|tbody|td|textarea|tfoot|th|thead|time|title|tr|track|tt|u|ul|var|video|wbr)\b
        end: '>'
        rules:
        - error: .
    - special: (([a-zA-Z]&#[0-9]+|&[a-zA-Z]+|&#[a-zA-Z0-9]+);)
    - default:
        start: <script.*?>
        end: </script.*?>
        limit-group: symbol.tag
        rules:
        - include: javascript
    - default:
        start: <style.*?>
        end: </style.*?>
        limit-group: symbol.tag
        rules:
        - include: css
    - comment: <!>
    - comment.block:
        start: <!\-\-
        end: \-\->
        rules:
        - todo: (FIXME|NOTE|TODO):?
        - error: (\-\-|>)
# ----- Rule set for language: html4 -----
- comment:
    start: (?i)^```html4$
    end: ^```$
    rules:
    - error: <[^!].*?>
    - symbol.tag: 
        (?i)<[/]?(a(bbr|cronym|ddress|pplet|rea|rticle|side|udio)?|b(ase(font)?|d(i|o)|ig|lockquote|r)?|ca(nvas|ption)|center|cite|co(de|l|lgroup)|d(ata(list)?|d|el|etails|fn|ialog|ir|l|t)|em(bed)?|fieldset|fig(caption|ure)|font|form|(i)?frame|frameset|h[1-6]|hr|i|img|in(put|s)|kbd|keygen|label|legend|li(nk)?|ma(in|p|rk)|menu(item)?|met(a|er)|nav|no(frames|script)|o(l|pt(group|ion)|utput)|p(aram|icture|re|rogress)?|q|r(p|t|uby)|s(trike)?|samp|se(ction|lect)|small|source|span|strong|su(b|p|mmary)|textarea|time|track|u(l)?|var|video|wbr)(
        .*|>)*?>
    - symbol.tag.extended: (?i)<[/]?(body|div|html|head(er)?|footer|title|table|t(body|d|h(ead)?|r|foot))(
        .*)*?>
    - preproc: (?i)<[/]?(script|style)( .*)*?>
    - special: '&[^;[[:space:]]]*;'
    - symbol: '[:=]'
    - identifier: 
        (alt|bgcolor|height|href|id|label|longdesc|name|on(click|focus|load|mouseover)|size|span|src|style|target|type|value|width)=
    - constant.string: '"[^"]*"'
    - constant.number: (?i)#[0-9a-fA-F]{6,6}
    - default:
        start: '>'
        end: <
        rules: []
    - symbol.tag: <|>
    - constant.string.url: "(ftp(s)?|http(s)?|git|chrome)://[^ \t]+"
    - comment: <!--.+?-->
    - preproc: <!DOCTYPE.+?>
# ----- Rule set for language: html5 -----
- comment:
    start: (?i)^```html5$
    end: ^```$
    rules:
    - error: <[^!].*?>
    - symbol.tag: 
        (?i)<[/]?(a|a(bbr|ddress|rea|rticle|side|udio)|b|b(ase|d(i|o)|lockquote|r|utton)|ca(nvas|ption)|center|cite|co(de|l|lgroup)|d(ata|atalist|d|el|etails|fn|ialog|l|t)|em|embed|fieldset|fig(caption|ure)|form|iframe|h[1-6]|hr|i|img|in(put|s)|kbd|keygen|label|legend|li|link|ma(in|p|rk)|menu|menuitem|met(a|er)|nav|noscript|o(bject|l|pt(group|ion)|utput)|p|param|picture|pre|progress|q|r(p|t|uby)|s|samp|se(ction|lect)|small|source|span|strong|su(b|p|mmary)|textarea|time|track|u|ul|var|video|wbr)(
        .*)*?>
    - symbol.tag.extended: (?i)<[/]?(body|div|html|head(er)?|footer|title|table|t(body|d|h(ead)?|r|foot))(
        .*)*?>
    - preproc: (?i)<[/]?(script|style)( .*)*?>
    - special: '&[^;[[:space:]]]*;'
    - symbol: '[:=]'
    - identifier: 
        (alt|bgcolor|height|href|id|label|longdesc|name|on(click|focus|load|mouseover)|size|span|src|style|target|type|value|width)=
    - constant.string: '"[^"]*"'
    - constant.number: (?i)#[0-9a-fA-F]{6,6}
    - default:
        start: '>'
        end: <
        rules: []
    - symbol.tag: <|>
    - constant.string.url: "(ftp(s)?|http(s)?|git|chrome)://[^ \t]+"
    - comment: <!--.+?-->
    - preproc: <!DOCTYPE.+?>
# ----- Rule set for language: ini -----
- comment:
    start: (?i)^```ini$
    end: ^```$
    rules:
    - constant.bool.true: \btrue\b
    - constant.bool.false: \bfalse\b
    - identifier: ^[[:space:]]*[^=]*=
    - special: ^[[:space:]]*\[.*\]$
    - statement: '[=;]'
    - constant.string: "\"(\\\\.|[^\"])*\"|'(\\\\.|[^'])*'"
    - comment:
        start: '#'
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment:
        start: ;
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: inputrc -----
- comment:
    start: (?i)^```inputrc$
    end: ^```$
    rules:
    - constant.bool.false: \b(off|none)\b
    - constant.bool.true: \bon\b
    - preproc: \bset|\$include\b
    - constant.string: "\"(\\\\.|[^\"])*\"|'(\\\\.|[^'])*'"
    - constant.specialChar: \\.?
    - comment: (^|[[:space:]])#([^{].*)?$
    - indent-char.whitespace: '[[:space:]]+$'
    - indent-char: "\t+ +| +\t+"
# ----- Rule set for language: java -----
- comment:
    start: (?i)^```java$
    end: ^```$
    rules:
    - type: \b(boolean|byte|char|double|float|int|long|new|var|short|this|transient|void)\b
    - statement: 
        \b(break|case|catch|continue|default|do|else|finally|for|if|return|switch|throw|try|while)\b
    - type: 
        \b(abstract|class|extends|final|implements|import|instanceof|interface|native|package|private|protected|public|static|strictfp|super|synchronized|throws|volatile)\b
    - constant: \b(true|false|null)\b
    - constant.number: \b[0-9]+\b
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - preproc: ..+
        - constant.specialChar: \\.
    - comment:
        start: //
        end: $
        rules: []
    - comment:
        start: /\*
        end: \*/
        rules: []
# ----- Rule set for language: javascript -----
- comment:
    start: (?i)^```javascript$
    end: ^```$
    rules:
    - constant.number: \b[-+]?([1-9][0-9]*|0[0-7]*|0x[0-9a-fA-F]+)([uU][lL]?|[lL][uU]?)?\b
    - constant.number: \b[-+]?([0-9]+\.[0-9]*|[0-9]*\.[0-9]+)([EePp][+-]?[0-9]+)?[fFlL]?
    - constant.number: \b[-+]?([0-9]+[EePp][+-]?[0-9]+)[fFlL]?
    - symbol.brackets: '[(){}]|\[|\]'
    - symbol.operator: ([-+/*=<>!~%?:&|]|[.]{3})
    - statement: \b(async|await|break|case|catch|const|continue|debugger|default)\b
    - statement: \b(delete|do|else|export|finally|for|function\*?|class|extends)\b
    - statement: \b(get|if|import|from|in|of|instanceof|let|new|reject|resolve|return)\b
    - statement: \b(set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\b
    - error: \b(enum|implements|interface|package|private|protected|public)\b
    - constant: \b(globalThis|Infinity|null|undefined|NaN)\b
    - constant: \b(null|undefined|NaN)\b
    - constant: \b(true|false)\b
    - type: \b(Array|Boolean|Date|Enumerator|Error|Function|Generator|Map|Math)\b
    - type: 
        \b(Number|Object|Promise|Proxy|Reflect|RegExp|Set|String|Symbol|WeakMap|WeakSet)\b
    - type: \b(BigInt64Array|BigUint64Array|Float32Array|Float64Array|Int16Array)\b
    - constant: \\[0-7][0-7]?[0-7]?|\\x[0-9a-fA-F]+|\\[bfnrt'"\?\\]
    - comment: ^#!.*/(env +)?node( |$)
    - identifier: 
        \b(alert|decodeURI|decodeURIComponent|document|encodeURI|encodeURIComponent|escape|eval|isFinite|isNaN|parseFloat|parseInt|unescape|uneval|window)\b
    - identifier: \b(Intl|WebAssembly)\b
    - identifier: \b(Arguments)\b
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: '`'
        end: '`'
        rules:
        - constant.specialChar: \\.
        - identifier: \x24\{.*?\}
    - constant.bool: \b(true|false)\b
    - constant.bool.false: \b(false)\b
    - constant.bool.true: \b(true)\b
    - comment:
        start: //
        end: $
        rules:
        - todo: (TODO|XXX|FIXME)
    - comment:
        start: /\*
        end: \*/
        skip: \\.
        rules:
        - constant.specialChar: \\.
        - identifier: \s\*\s.*
        - todo: (TODO|XXX|FIXME)
# ----- Rule set for language: jinja2 -----
- comment:
    start: (?i)^```jinja2$
    end: ^```$
    rules:
    - include: html
    - special: ({{|}}|{%-?|-?%})
    - default:
        start: ({%-?|{{)
        end: (-?%}|}})
        limit-group: special
        rules:
        - include: python
        - statement: \b(ignore missing|with(out)? 
            context|block|call|endblock|endcall|endfilter|endfor|endmacro|endraw|endset|extends|filter|for|include|macro|raw|recursive|scoped|set)\b
        - identifier.builtinfunc: 
            \b(attr|batch|capitalize|center|count|d|default|dictsort|e|escape|filesizeformat|first|forceescape|groupby|indent|join|last|length|lower|pprint|random|reject|rejectattr|replace|reverse|safe|select|selectattr|striptags|title|tojson|trim|truncate|unique|upper|urlencode|urlize|wordcount|wordwrap|xmlattr)\b
        - identifier.builtintest: 
            \b(callable|defined|divisibleby|eq|equalto|escaped|even|ge|gt|iterable|le|lower|lt|mapping|ne|none|number|odd|sameas|sequence|string|undefined|upper)\b
        - identifier.defaultglobal: \b(lipsum|cycler|joiner|namespace)\b
    - comment:
        start: '{#'
        end: '#}'
        rules: []
# ----- Rule set for language: json -----
- comment:
    start: (?i)^```json$
    end: ^```$
    rules:
    - constant.number: \b[-+]?([1-9][0-9]*|0[0-7]*|0x[0-9a-fA-F]+)([uU][lL]?|[lL][uU]?)?\b
    - constant.number: \b[-+]?([0-9]+\.[0-9]*|[0-9]*\.[0-9]+)([EePp][+-]?[0-9]+)?[fFlL]?
    - constant.number: \b[-+]?([0-9]+[EePp][+-]?[0-9]+)[fFlL]?
    - constant: \b(null)\b
    - constant: \b(true|false)\b
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - statement: "\\\"(\\\\\"|[^\"])*\\\"[[:space:]]*:\"  \"'(\\'|[^'])*'[[:space:]]*:"
    - constant: \\u[0-9a-fA-F]{4}|\\[bfnrt'"/\\]
    - comment:
        start: //
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment:
        start: /\*
        end: \*/
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: jsonnet -----
- comment:
    start: (?i)^```jsonnet$
    end: ^```$
    rules:
    - constant: \b(self|\$|super)\b
    - constant.bool: \b(null|true|false)\b
    - identifier: 
        \bstd\.(extVar|thisFile|type|length|objectHas|objectFields|objectHasAll|objectFieldsAll|prune|mapWithKey|abs|sign|max|min|pow|exp|log|exponent|mantissa|floor|ceil|sqrt|sin|cos|tan|asin|acos|atan|mod|assertEqual|toString|codepoint|char|substr|findSubstr|startsWith|endsWith|split|splitLimit|strReplace|asciiUpper|asciiLower|stringChars|format|escapeStringDollars|escapeStringPython|parseInt|parseOctal|parseHex|parseJson|encodeUTF8|decodeUTF8|manifestIni|manifestPython|manifestPythonVars|manifestJsonEx|manifestYamlDoc|manifestYamlStream|manifestXmlJsonml|makeArray|count|find|map|mapWithIndex|filterMap|filter|foldl|foldr|range|join|lines|flattenArrays|sort|uniq|set|setInter|setUnion|setDiff|setMember|base64|base64DecodeBytes|base64Decode|md5|mergePatch|trace)\b
    - type: '[_a-zA-Z][_a-zA-Z0-9]*\s*:'
    - statement: ':'
    - statement: 
        \b(assert|else|error|for|function|if|import|importstr|in|local|tailstrict|then)\b
    - symbol.operator: ([.;,+*|=!\%]|<|>|/|-|&)
    - symbol.brackets: ([(){}]|\[|\])
    - constant.number: \b(0|([1-9][0-9]*))(\.[0-9]+)?([eE][\+-]?[0-9]+)?\b
    - constant.string:
        start: '"'
        end: '"'
        skip: \\"
        rules:
        - constant.specialChar: \\u[0-9a-fA-F]{4}|\\[bfnrt'"/\\]
    - constant.string:
        start: "'"
        end: "'"
        skip: \\'
        rules:
        - constant.specialChar: \\u[0-9a-fA-F]{4}|\\[bfnrt'"/\\]
    - constant.string:
        start: '@"'
        end: '"'
        skip: \\"
        rules:
        - constant.specialChar: \\"
    - constant.string:
        start: "@'"
        end: "'"
        skip: \\'
        rules:
        - constant.specialChar: \\'
    - constant.string:
        start: \|\|\| *$
        end: ^ *\|\|\|
        rules: []
    - comment:
        start: /\*
        end: \*/
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment:
        start: '#|(//)'
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: julia -----
- comment:
    start: (?i)^```julia$
    end: ^```$
    rules:
    - constant.bool: \b(true|false)\b
    - constant: \b(nothing|missing)\b
    - constant: __[A-Za-z0-9_]+__
    - identifier: '[A-Za-z_][A-Za-z0-9_]*[[:space:]]*[(]'
    - statement: 
        \b(baremodule|begin|break|catch|const|continue|do|else|elseif|end|export|finally|for|function|global|if|import|let|local|macro|module|public|quote|return|struct|try|using|while)\b
    - statement: \b(abstract\s+type|primitive\s+type|mutable\s+struct)\b
    - identifier.macro: '@[A-Za-z0-9_]+'
    - symbol.operator: '[:+*|=!%~<>/\-?&\\÷∈∉∘]|\b(in|isa|where)\b'
    - symbol.operator: \^
    - symbol.brackets: ([(){}]|\[|\])
    - constant.number: 
        \b([0-9]+(_[0-9]+)*|0x[0-9a-fA-F]+(_[0-9a-fA-F]+)*|0b[01]+(_[01]+)*|0o[0-7]+(_[0-7]+)*|Inf(16|32|64)?|NaN(16|32|64)?)\b
    - constant.string:
        start: '"""'
        end: '"""'
        rules: []
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: 
            \\(["'abfnrtv\\]|[0-3]?[0-7]{1,2}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{1,4}|U[0-9A-Fa-f]{1,8})
    - constant.string: "'(\\\\.|.)'"
    - constant.string:
        start: "'\""
        end: "'"
        rules: []
    - comment:
        start: '#='
        end: =#
        rules: []
    - comment:
        start: '#'
        end: $
        rules: []
# ----- Rule set for language: justfile -----
- comment:
    start: (?i)^```justfile$
    end: ^```$
    rules:
    - preproc: \<(ifeq|ifdef|ifneq|ifndef|else|endif)\>
    - statement: ^(export|include|override)\>
    - symbol.operator: "^[^:=\t]+:"
    - symbol.operator: ([=,%]|\+=|\?=|:=|&&|\|\|)
    - statement: \$\((abspath|addprefix|addsuffix|and|basename|call|dir)[[:space:]]
    - statement: \$\((error|eval|filter|filter-out|findstring|firstword)[[:space:]]
    - statement: \$\((flavor|foreach|if|info|join|lastword|notdir|or)[[:space:]]
    - statement: \$\((origin|patsubst|realpath|shell|sort|strip|suffix)[[:space:]]
    - statement: \$\((value|warning|wildcard|word|wordlist|words)[[:space:]]
    - statement: 
        \b(arch|os|os_family|env_var|invocation_directory|justfile|justfile_directory|just_executable|lowercase|quote|replace|trim|trim_end|trim_end|trim_end_match|trim_end_matches|trim_start|trim_start_match|trim_start_matches|uppercase)\b
    - identifier: '^.+:'
    - identifier: '[()$]'
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - identifier: \$+(\{[^} ]+\}|\([^) ]+\))
    - identifier: \$[@^<*?%|+]|\$\([@^<*?%+-][DF]\)
    - identifier: \$\$|\\.?
    - comment:
        start: '#'
        end: $
        rules: []
# ----- Rule set for language: keymap -----
- comment:
    start: (?i)^```keymap$
    end: ^```$
    rules:
    - statement: \b(add|clear|compose|keycode|keymaps|keysym|remove|string)\b
    - statement: \b(control|alt|shift)\b
    - constant.number: \b[0-9]+\b
    - special: '='
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - comment:
        start: ^!
        end: $
        rules: []
# ----- Rule set for language: kickstart -----
- comment:
    start: (?i)^```kickstart$
    end: ^```$
    rules:
    - special: '%[a-z]+'
    - statement: 
        ^[[:space:]]*(install|cdrom|text|graphical|volgroup|logvol|reboot|timezone|lang|keyboard|authconfig|firstboot|rootpw|user|firewall|selinux|repo|part|partition|clearpart|bootloader)
    - constant: --(name|mirrorlist|baseurl|utc)(=|\>)
    - statement: \$(releasever|basearch)\>
    - brightblack: ^@[A-Za-z][A-Za-z-]*
    - brightred: ^-@[a-zA-Z0-9*-]+
    - red: ^-[a-zA-Z0-9*-]+
    - comment: (^|[[:space:]])#([^{].*)?$
    - indent-char.whitespace: '[[:space:]]+$'
    - indent-char: "\t+ +| +\t+"
# ----- Rule set for language: kotlin -----
- comment:
    start: (?i)^```kotlin$
    end: ^```$
    rules:
    - symbol.operator: ([.:;,+*|=!?\\%]|<|>|/|-|&)
    - statement: 
        \b(as|by|class|constructor|companion|const|fun|import|in|infix|interface|inline|is|out|operator|package|return|suspend|super|this|when|val|var)\b
    - statement.properties: \b(get|set)\b
    - statement.control: \b(break|continue|else|do|if|try|catch|finally|for|while)\b
    - statement.class: \b(abstract|annotation|data|enum|final|open|sealed)\b
    - statement.member: \b(override|lateinit|init)\b
    - statement.access: \b(internal|private|protected|public)\b
    - statement.parameter: \b(crossinline|noinline|reified|vararg)\b
    - type: \b(dynamic|object|throw|typealias)\b
    - statement.meta: \@(\bfile|delegate|field|get|property|receiver|set|setparam|param|)\b
    - constant: \b(true|false|null)
    - constant.number: ([0-9]+)
    - type.storage: 
        \b(Byte|UByte|Char|Double|Float|Int|UInt|Long|ULong|Short|UShort|Boolean|Unit|Nothing)\b
    - type.collections: \b(Array)\b
    - constant.string:
        start: \"
        end: \"
        skip: \\.
        rules:
        - constant.specialChar: (\\0|\\\\|\\t|\\n|\\r|\\"|\\')
        - constant.unicode: \\u\{[[:xdigit:]]+}
    - comment.shebang: ^(#!).*
    - comment.line: //.*
    - comment.block:
        start: /\*
        end: \*/
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment.block:
        start: /\*\*
        end: \*/
        rules:
        - todo: (TODO|XXX|FIXME):?
    - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: kvlang -----
- comment:
    start: (?i)^```kvlang$
    end: ^```$
    rules:
    - special: \b[a-z].+
    - identifier: \b(self|app|root)\b
    - type: \b[A-Z].+
    - type: 
        \b(AnchorLayout|BoxLayout|FloatLayout|RelativeLayout|GridLayout|PageLayout|StackLayout)\b
    - type: \b(canvas)\b
    - identifier.function: '[a-zA-Z_0-9]+\('
    - type: \b(abs|all|any|ascii|bin|bool|breakpoint|bytearray|bytes)\b
    - type: \b(callable|chr|classmethod|compile|copyright|credits|oct)\b
    - type: \b(delattr|dict|dir|display|divmod|enumerate|eval|filter)\b
    - type: \b(float|format|frozenset|get_ipython|getattr|globals|type)\b
    - type: \b(hash|help|hex|id|input|int|isinstance|issubclass|iter|len)\b
    - type: \b(license|list|locals|map|max|memoryview|min|next|object)\b
    - type: \b(open|ord|pow|print|property|range|repr|reversed|round|set)\b
    - type: \b(setattr|slice|sorted|staticmethod|hasattr|super|tuple|str)\b
    - type: \b(vars|zip|exec|sum|complex)\b
    - statement.built_in: \b(and|as|assert|async|await|break|class|continue|def)\b
    - statement.built_in: \b(del|elif|else|except|finally|for|from|global|if)\b
    - statement.built_in: \b(import|in|is|lambda|nonlocal|not|or|pass|raise)\b
    - statement.built_in: \b(return|try|while|with|yield|match|case)\b
    - symbol.operator: ([~^.:;,+*|=!\%]|<|>|/|-|&)
    - symbol.brackets: ([(){}]|\[|\])
    - constant.number: \b[0-9](_?[0-9])*(\.([0-9](_?[0-9])*)?)?(e[0-9](_?[0-9])*)?\b
    - constant.number: \b0b(_?[01])+\b
    - constant.number: \b0o(_?[0-7])+\b
    - constant.number: \b0x(_?[0-9a-f])+\b
    - constant.bool.none: \b(None)\b
    - constant.bool.true: \b(True)\b
    - constant.bool.false: \b(False)\b
    - constant.string:
        start: '"'
        end: ("|$)
        skip: \\.
        rules: []
    - constant.string:
        start: "'"
        end: ('|$)
        skip: \\.
        rules: []
    - comment:
        start: '#'
        end: $
        rules: []
# ----- Rule set for language: ledger -----
- comment:
    start: (?i)^```ledger$
    end: ^```$
    rules:
    - special: ^([0-9]{4}(/|-)[0-9]{2}(/|-)[0-9]{2}|[=~]) .*
    - constant: ^[0-9]{4}(/|-)[0-9]{2}(/|-)[0-9]{2}
    - statement: ^~ .*
    - identifier.var: ^= .*
    - identifier: ^[[:space:]]+(![[:space:]]+)?\(?[A-Za-z ]+(:[A-Za-z ]+)*\)?
    - identifier: ^[[:space:]]+(![[:space:]]+)?\(?[A-Za-z_\-]+(:[A-Za-z_\-]+)*\)?
    - symbol: '[*!]'
    - comment: ^[[:space:]]*;.*
# ----- Rule set for language: lfe -----
- comment:
    start: (?i)^```lfe$
    end: ^```$
    rules:
    - symbol.brackets: \(|\)
    - type: defun|define-syntax|define|defmacro|defmodule|export
    - constant: '\ [A-Za-z][A-Za-z0-9_-]+\ '
    - symbol.operator: \(([\-+*/<>]|<=|>=)|'
    - constant.number: \b[0-9]+\b
    - constant.string: \"(\\.|[^"])*\"
    - special: "['|`][A-Za-z][A-Za-z0-9_\\-]+"
    - constant.specialChar: \\.?
    - comment: (^|[[:space:]]);.*
    - indent-char.whitespace: '[[:space:]]+$'
    - indent-char: "\t+ +| +\t+"
# ----- Rule set for language: lilypond -----
- comment:
    start: (?i)^```lilypond$
    end: ^```$
    rules:
    - constant.number: \d+
    - identifier: 
        \b(staff|spacing|signature|routine|notes|handler|corrected|beams|arpeggios|Volta_engraver|Voice|Vertical_align_engraver|Vaticana_ligature_engraver|VaticanaVoice|VaticanaStaff|Tweak_engraver|Tuplet_engraver|Trill_spanner_engraver|Timing_translator|Time_signature_performer|Time_signature_engraver|Tie_performer|Tie_engraver|Text_spanner_engraver|Text_engraver|Tempo_performer|Tab_tie_follow_engraver|Tab_staff_symbol_engraver|Tab_note_heads_engraver|TabVoice|TabStaff|System_start_delimiter_engraver|Stem_engraver|Stanza_number_engraver|Stanza_number_align_engraver|Staff_symbol_engraver|Staff_performer|Staff_collecting_engraver|StaffGroup|Staff|Spanner_break_forbid_engraver|Span_bar_stub_engraver|Span_bar_engraver|Span_arpeggio_engraver|Spacing_engraver|Slur_performer|Slur_engraver|Slash_repeat_engraver|Separating_line_group_engraver|Script_row_engraver|Script_engraver|Script_column_engraver|Score|Rhythmic_column_engraver|RhythmicStaff|Rest_engraver|Rest_collision_engraver|Repeat_tie_engraver|Repeat_acknowledge_engraver|Pure_from_neighbor_engraver|Pitched_trill_engraver|Pitch_squash_engraver|Piano_pedal_performer|Piano_pedal_engraver|Piano_pedal_align_engraver|PianoStaff|Phrasing_slur_engraver|PetrucciVoice|PetrucciStaff|Percent_repeat_engraver|Part_combine_engraver|Parenthesis_engraver|Paper_column_engraver|Output_property_engraver|Ottava_spanner_engraver|OneStaff|NullVoice|Note_spacing_engraver|Note_performer|Note_name_engraver|Note_heads_engraver|Note_head_line_engraver|NoteName\|NoteHead|New_fingering_engraver|Multi_measure_rest_engraver|Midi_control_function_performer|Metronome_mark_engraver|Mensural_ligature_engraver|MensuralVoice|MensuralStaff|Mark_engraver|Lyrics|Lyric_performer|Lyric_engraver|Ligature_bracket_engraver|Ledger_line_engraver|Laissez_vibrer_engraver|Kievan_ligature_engraver|KievanVoice|KievanStaff|Key_performer|Key_engraver|Keep_alive_together_engraver|Instrument_switch_engraver|Instrument_name_engraver|Hyphen_engraver|Grob_pq_engraver|GregorianTranscriptionVoice|GregorianTranscriptionStaff|GrandStaff|Grace_spacing_engraver|Grace_engraver|Grace_beam_engraver|Grace_auto_beam_engraver|Global|Glissando_engraver|Fretboard_engraver|FretBoards|Forbid_line_break_engraver|Footnote_engraver|Font_size_engraver|Fingering_engraver|Fingering_column_engraver|Figured_bass_position_engraver|Figured_bass_engraver|FiguredBass|Extender_engraver|Episema_engraver|Dynamics|Dynamic_performer|Dynamic_engraver|Dynamic_align_engraver|Drum_notes_engraver|Drum_note_performer|DrumVoice|DrumStaff|Double_percent_repeat_engraver|Dots_engraver|Dot_column_engraver|Devnull|Default_bar_line_engraver|Custos_engraver|Cue_clef_engraver|CueVoice|Control_track_performer|Concurrent_hairpin_engraver|Collision_engraver|Cluster_spanner_engraver|Clef_engraver|Chord_tremolo_engraver|Chord_name_engraver|ChordNames|ChoirStaff|Breathing_sign_engraver|Break_align_engraver|Bend_engraver|Beam_performer|Beam_engraver|Beam_collision_engraver|Bar_number_engraver|Bar_engraver|Axis_group_engraver|Auto_beam_engraver|Arpeggio_engraver|Accidental_engraver|Score)\b
    - statement: '[-_^]?\\[-A-Za-z_]+'
    - preproc: 
        \b(((gisis|gis|geses|ges|g|fisis|fis|feses|fes|f|eisis|eis|eeses|ees|e|disis|dis|deses|des|d|cisis|cis|ceses|ces|c|bisis|bis|beses|bes|b|aisis|ais|aeses|aes|a)[,']*[?!]?)|s|r|R|q)(128|64|32|16|8|4|2|1|\\breve|\\longa|\\maxima)?([^\\\w]|_|\b)
    - special: '[(){}<>]|\[|\]'
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - comment:
        start: '%\{'
        end: '%\}'
        rules: []
    - comment:
        start: '%'
        end: $
        rules: []
# ----- Rule set for language: lisp -----
- comment:
    start: (?i)^```lisp$
    end: ^```$
    rules:
    - default: \([a-z-]+
    - symbol: \(([\-+*/<>]|<=|>=)|'
    - constant.number: \b[0-9]+b>
    - special: \bnil\b
    - preproc: \b[tT]b>
    - constant.string: \"(\\.|[^"])*\"
    - constant.specialChar: "'[A-Za-z][A-Za-z0-9_-]+"
    - constant.specialChar: \\.?
    - comment: (^|[[:space:]]);.*
    - indent-char.whitespace: '[[:space:]]+$'
    - indent-char: "\t+ +| +\t+"
# ----- Rule set for language: log -----
- comment:
    start: (?i)^```log$
    end: ^```$
    rules:
    - diff-modified: \b(WARN(ING)?|[Ww]arn(ing)?|w(r)?n|w|W/)\b
    - diff-modified: \b(CRITICAL|[Cc]ritical)\b
    - constant: \b(INFO(RMATION)?|[Ii]nfo(rmation)?|[Ii]n(f)?|i|I/)\b
    - constant: \b(DEBUG|[Dd]ebug|dbug|dbg|de|d|D/)\b
    - constant: \b(VERBOSE|[Vv]erbose|V/)\b
    - constant: \b(ALERT|[Aa]lert)\b
    - preproc: \b(TRACE|Trace|NOTICE|VERBOSE|verb|vrb|vb|v)\b
    - gutter-error: \b(ERROR|[Ee]rr(or)?|[Ee]r(or)?|e|E\x2F)\b
    - gutter-error: \b(FATAL|[Ff]atal)\b
    - gutter-error: \b(EMERGENCY|[Ee]mergency)\b
    - gutter-error: \b(FAIL(URE)?|[Ff]ail(ure)?)\b
    - constant.bool.true: \b(YES|yes|Y|y|ON|on|TRUE|True|true)\b
    - constant.bool.false: \b(NO|no|N|n|OFF|off|FALSE|False|false)\b
    - constant.bool.false: \b(None|null|nil)\b
    - constant.number: \b[0-9](_?[0-9])*(\.([0-9](_?[0-9])*)?)?(e[0-9](_?[0-9])*)?\b
    - constant.number: \b0b(_?[01])+\b
    - constant.number: \b0o(_?[0-7])+\b
    - constant.number: \b0x(_?[0-9a-f])+\b
    - symbol.operator: ([~^.:;,+*|=!\%]|<|>|/|-|&)
    - symbol.brackets: ([(){}]|\[|\])
    - constant.string:
        start: '"'
        end: ("|$)
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'"
        end: ('|$)
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - preproc: \b(FILE|File|file)\b
    - identifier: 
        \b((([Mm]on|[Tt]ues|[Ww]ed(nes)?|[Tt]hur(s)?|[Ff]ri|[Ss]at(ur)?|[Ss]un)(day)?\s)?([Jj]an(uary)?|[Ff]eb(ruary)?|[Mm]ar(ch)?|[Aa]pr(il)?|[Mm]ay|[Jj]un(e)?|[Jj]ul(y)?|[Aa]ug(ust)?|[Aa]go|[Ss]ep(tember)?|[Oo]ct(ober)?|[Nn]ov(ember)?|[Dd]ec(ember)?)\s\d{1,2},?(\s\d{4})?)\b
    - identifier: \b(\d{2,4}[-/\.]?\d{2,3}[-/\.]?\d{2,4})\b
    - identifier: 
        \b(\d{2}:\d{2}(:\d{2})?([\.,]?\d{1,8}[\.\+,]?\d{1,8}?)?([\.\+,]?\d{1,8}[\.\+,]?\d{1,8}?)?([\.\+,]?\d{1,8}?)?(\s-\d{0,4})?)\b
    - identifier: ^([0-2][0-9][0-2][0-9][-/]?[0-9][0-9][-/]?[0-9][0-9])
    - identifier: ^(\d{4}[-/]?\d{2}[-/]?\d{2}\s\d{2}:\d{2}(:\d{2})?(\.?\d{2,8})?)
    - identifier: ^([0-2][0-9]|[0-2]-?[0-9][0-9]-?[0-9][0-9])\-([0-1][0-9])\-([0-3][0-9])
        ([0-2][0-9])\:([0-5][0-9])\:([0-5][0-9]),([0-9][0-9][0-9])
    - identifier: ^(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))
    - identifier: ^(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))
    - identifier: ^(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))
    - identifier: 
        ^(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))
    - identifier: ^(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+)
    - identifier: ^(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)
    - identifier: ^(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d)
    - identifier: 
        ^(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+)|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d)|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d)
    - constant.string.url:
        start: https?://
        end: \s
        rules: []
    - diff-modified: ([Cc]ommit:)\s\w+\[\w+]
# ----- Rule set for language: lua -----
- comment:
    start: (?i)^```lua$
    end: ^```$
    rules:
    - statement: 
        \b(do|end|while|break|repeat|until|if|elseif|then|else|for|in|function|local|return|goto)\b
    - statement: \b(not|and|or)\b
    - statement: \b(debug|string|math|table|io|coroutine|os|utf8|bit32)\b\.
    - statement: 
        \b(_ENV|_G|_VERSION|assert|collectgarbage|dofile|error|getfenv|getmetatable|ipairs|load|loadfile|module|next|pairs|pcall|print|rawequal|rawget|rawlen|rawset|require|select|setfenv|setmetatable|tonumber|tostring|type|unpack|xpcall)\s*\(
    - identifier: io\.\b(close|flush|input|lines|open|output|popen|read|tmpfile|type|write)\b
    - identifier: 
        math\.\b(abs|acos|asin|atan2|atan|ceil|cosh|cos|deg|exp|floor|fmod|frexp|huge|ldexp|log10|log|max|maxinteger|min|mininteger|modf|pi|pow|rad|random|randomseed|sin|sqrt|tan|tointeger|type|ult)\b
    - identifier: 
        os\.\b(clock|date|difftime|execute|exit|getenv|remove|rename|setlocale|time|tmpname)\b
    - identifier: 
        package\.\b(config|cpath|loaded|loadlib|path|preload|seeall|searchers|searchpath)\b
    - identifier: 
        string\.\b(byte|char|dump|find|format|gmatch|gsub|len|lower|match|pack|packsize|rep|reverse|sub|unpack|upper)\b
    - identifier: table\.\b(concat|insert|maxn|move|pack|remove|sort|unpack)\b
    - identifier: utf8\.\b(char|charpattern|codes|codepoint|len|offset)\b
    - identifier: coroutine\.\b(create|isyieldable|resume|running|status|wrap|yield)\b
    - identifier: 
        debug\.\b(debug|getfenv|gethook|getinfo|getlocal|getmetatable|getregistry|getupvalue|getuservalue|setfenv|sethook|setlocal|setmetatable|setupvalue|setuservalue|traceback|upvalueid|upvaluejoin)\b
    - identifier: 
        bit32\.\b(arshift|band|bnot|bor|btest|bxor|extract|replace|lrotate|lshift|rrotate|rshift)\b
    - identifier: 
        \:\b(close|flush|lines|read|seek|setvbuf|write|byte|char|dump|find|format|gmatch|gsub|len|lower|match|pack|packsize|rep|reverse|sub|unpack|upper)\b
    - identifier: \b(self|arg)\b
    - constant: \b(false|nil|true)\b
    - statement: (\b(dofile|require|include)|%q|%!|%Q|%r|%x)\b
    - symbol.brackets: '[(){}\[\]]'
    - symbol: (\*|//|/|%|\+|-|\^|>|>=|<|<=|~=|=|[\.]{2,3}|#)
    - constant.number: 
        \b((0[xX](([0-9A-Fa-f]+\.[0-9A-Fa-f]*)|(\.?[0-9A-Fa-f]+))([pP][-+]?[0-9]+)?)|((([0-9]+\.[0-9]*)|(\.?[0-9]+))([eE][-+]?[0-9]+)?))
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\([abfnrtvz\'"]|[0-9]{1,3}|x[0-9a-fA-F][0-9a-fA-F]|u\{[0-9a-fA-F]+\})
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: \\([abfnrtvz\'"]|[0-9]{1,3}|x[0-9a-fA-F][0-9a-fA-F]|u\{[0-9a-fA-F]+\})
    - constant.string:
        start: \[\[
        end: \]\]
        rules: []
    - constant.string:
        start: \[=\[
        end: \]=\]
        rules: []
    - constant.string:
        start: \[==\[
        end: \]==\]
        rules: []
    - constant.string:
        start: \[===\[
        end: \]===\]
        rules: []
    - constant.string:
        start: \[====+\[
        end: \]====+\]
        rules: []
    - comment.block:
        start: \-\-\[\[
        end: \]\]
        rules:
        - todo: (TODO|NOTE|FIXME):?
    - comment.block:
        start: \-\-\[=\[
        end: \]=\]
        rules:
        - todo: (TODO|NOTE|FIXME):?
    - comment.block:
        start: \-\-\[==\[
        end: \]==\]
        rules:
        - todo: (TODO|NOTE|FIXME):?
    - comment.block:
        start: \-\-\[===\[
        end: \]===\]
        rules:
        - todo: (TODO|NOTE|FIXME):?
    - comment.block:
        start: \-\-\[====+\[
        end: \]====+\]
        rules:
        - todo: (TODO|NOTE|FIXME):?
    - comment:
        start: \-\-
        end: $
        rules:
        - todo: (TODO|NOTE|FIXME):?
# ----- Rule set for language: mail -----
- comment:
    start: (?i)^```mail$
    end: ^```$
    rules:
    - type: ^From .*
    - identifier: '^[^[:space:]]+:'
    - preproc: '^List-(Id|Archive|Subscribe|Unsubscribe|Post|Help):'
    - constant: '^(To|From):'
    - constant.string:
        start: ^Subject:.*
        end: $
        rules:
        - constant.specialChar: \\.
    - statement: <?[^@[:space:]]+@[^[:space:]]+>?
    - default:
        start: ^\n\n
        end: .*
        rules: []
    - comment:
        start: ^>.*
        end: $
        rules: []
# ----- Rule set for language: makefile -----
- comment:
    start: (?i)^```makefile$
    end: ^```$
    rules:
    - preproc: \<(ifeq|ifdef|ifneq|ifndef|else|endif)\>
    - statement: ^(export|include|override)\>
    - symbol.operator: "^[^:=\t]+:"
    - symbol.operator: ([=,%]|\+=|\?=|:=|&&|\|\|)
    - statement: \$\((abspath|addprefix|addsuffix|and|basename|call|dir)[[:space:]]
    - statement: \$\((error|eval|filter|filter-out|findstring|firstword)[[:space:]]
    - statement: \$\((flavor|foreach|if|info|join|lastword|notdir|or)[[:space:]]
    - statement: \$\((origin|patsubst|realpath|shell|sort|strip|suffix)[[:space:]]
    - statement: \$\((value|warning|wildcard|word|wordlist|words)[[:space:]]
    - identifier: '^.+:'
    - identifier: '[()$]'
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - identifier: \$+(\{[^} ]+\}|\([^) ]+\))
    - identifier: \$[@^<*?%|+]|\$\([@^<*?%+-][DF]\)
    - identifier: \$\$|\\.?
    - comment:
        start: '#'
        end: $
        rules: []
# ----- Rule set for language: man -----
- comment:
    start: (?i)^```man$
    end: ^```$
    rules:
    - green: \.(S|T)H.*$
    - brightgreen: \.(S|T)H|\.TP
    - brightred: \.(BR?|I[PR]?).*$
    - brightblue: \.(BR?|I[PR]?|PP)
    - brightwhite: \\f[BIPR]
    - yellow: \.(br|DS|RS|RE|PD)
# ----- Rule set for language: mc -----
- comment:
    start: (?i)^```mc$
    end: ^```$
    rules:
    - statement: ^(divert|VERSIONID|OSTYPE|DOMAIN|FEATURE|define)
    - statement: ^(DAEMON_OPTIONS|MAILER)
    - comment:
        start: '#'
        end: $
        rules: []
    - comment:
        start: dnl
        end: $
        rules: []
    - constant.string:
        start: '`'
        end: "'"
        rules: []
# ----- Rule set for language: micro -----
- comment:
    start: (?i)^```micro$
    end: ^```$
    rules:
    - statement: \b(syntax|color(-link)?)\b
    - statement: \b(start=|end=)\b
    - identifier: 
        \b(default|number|statement|underlined|error|todo|statusline|indent-char|cursor\-line|color\-column|ignore|divider|tabbar)\b
    - identifier: \b(special(Char)?)\b
    - identifier: \b((current\-)?line\-number)\b
    - identifier: \b(gutter\-(info|error|warning){1})\b
    - identifier: \b(comment(\.bright)?)\b
    - identifier: \b(symbol(\.(brackets|operator|tag))?)\b
    - identifier: \b(identifier(\.(class|macro|var))?)\b
    - identifier: 
        \b(constant(\.(bool(\.(true|false){1})?|number|specialChar|string(\.url)?){1})?)\b
    - identifier: \b(preproc(\.shebang)?)\b
    - identifier: \b(type(\.keyword)?)\b
    - constant.number: \b(|h|A|0x)+[0-9]+(|h|A)+\b
    - constant.number: \b0x[0-9 a-f A-F]+\b
    - comment:
        start: '#'
        end: $
        rules:
        - todo: (FIXME|TODO|NOTE):?
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.number: '#[0-9 A-F a-f]+'
# ----- Rule set for language: mpdconf -----
- comment:
    start: (?i)^```mpdconf$
    end: ^```$
    rules:
    - statement: \b(user|group|bind_to_address|host|port|plugin|name|type)\b
    - statement: \b((music|playlist)_directory|(db|log|state|pid|sticker)_file)\b
    - special: ^(input|audio_output|decoder)[[:space:]]*\{|\}
    - constant.string: "\"(\\\\.|[^\"])*\"|'(\\\\.|[^'])*'"
    - comment: (^|[[:space:]])#([^{].*)?$
    - indent-char.whitespace: '[[:space:]]+$'
    - indent-char: "\t+ +| +\t+"
# ----- Rule set for language: msbuild -----
- comment:
    start: (?i)^```msbuild$
    end: ^```$
    rules:
    - include: xml
# ----- Rule set for language: nanorc -----
- comment:
    start: (?i)^```nanorc$
    end: ^```$
    rules:
    - default: (?i)^[[:space:]]*((un)?set|include|syntax|i?color).*$
    - type: 
        (?i)^[[:space:]]*(set|unset)[[:space:]]+(autoindent|backup|backupdir|backwards|boldtext|brackets|casesensitive|const|cut|fill|historylog|matchbrackets|morespace|mouse|multibuffer|noconvert|nofollow|nohelp|nonewlines|nowrap|operatingdir|preserve|punct)\>|^[[:space:]]*(set|unset)[[:space:]]+(quickblank|quotestr|rebinddelete|rebindkeypad|regexp|smarthome|smooth|speller|suspend|tabsize|tabstospaces|tempfile|undo|view|whitespace|wordbounds)\b
    - preproc: (?i)^[[:space:]]*(set|unset|include|syntax|header)\b
    - constant.bool.true: (?i)(set)\b
    - constant.bool.false: (?i)(unset)\b
    - identifier: 
        (?i)^[[:space:]]*(i)?color[[:space:]]*(bright)?(white|black|red|blue|green|yellow|magenta|cyan)?(,(white|black|red|blue|green|yellow|magenta|cyan))?\b
    - special: (?i)^[[:space:]]*(i)?color\b|\b(start|end)=
    - constant.string: '"(\\.|[^"])*"'
    - comment: ^[[:space:]]*#.*$
    - comment.bright: ^[[:space:]]*##.*$
# ----- Rule set for language: nftables -----
- comment:
    start: (?i)^```nftables$
    end: ^```$
    rules:
    - type: \b(chain|counter|map|rule|ruleset|set|table)\b
    - type: \b(ether|icmp|icmpv6|icmpx|inet|ip|ip6|ipv4|ipv6|tcp|udp)\b
    - special: \b(elements|hook|policy|priority|type)\b
    - identifier: \b(ct|iif|iifname|meta|oif|oifname|th)\b
    - statement: \b(accept|drop|goto|jump|log|masquerade|reject)\b
    - preproc: \b(add|define|flush|include|delete)\b
    - symbol: '[-=/:;,@]'
    - symbol.operator: '[<>.&|^!]|\b(and|ge|gt|le|lt|or|xor)\b'
    - constant.string: ([\"]{1})(.*)([\"]{1})
    - identifier.var: '[$@][a-zA-Z_.][a-zA-Z0-9_/.-]*'
    - comment: (^|[[:space:]])#([^{].*)?$
    - indent-char.whitespace: '[[:space:]]+$'
    - indent-char: '    + +| +  +'
# ----- Rule set for language: nginx -----
- comment:
    start: (?i)^```nginx$
    end: ^```$
    rules:
    - preproc: \b(events|server|http|location|upstream)[[:space:]]*\{
    - statement: 
        (^|[[:space:]{;])(access_log|add_after_body|add_before_body|add_header|addition_types|aio|alias|allow|ancient_browser|ancient_browser_value|auth_basic|auth_basic_user_file|autoindex|autoindex_exact_size|autoindex_localtime|break|charset|charset_map|charset_types|chunked_transfer_encoding|client_body_buffer_size|client_body_in_file_only|client_body_in_single_buffer|client_body_temp_path|client_body_timeout|client_header_buffer_size|client_header_timeout|client_max_body_size|connection_pool_size|create_full_put_path|daemon|dav_access|dav_methods|default_type|deny|directio|directio_alignment|disable_symlinks|empty_gif|env|error_log|error_page|expires|fastcgi_buffer_size|fastcgi_buffers|fastcgi_busy_buffers_size|fastcgi_cache|fastcgi_cache_bypass|fastcgi_cache_key|fastcgi_cache_lock|fastcgi_cache_lock_timeout|fastcgi_cache_min_uses|fastcgi_cache_path|fastcgi_cache_use_stale|fastcgi_cache_valid|fastcgi_connect_timeout|fastcgi_hide_header|fastcgi_ignore_client_abort|fastcgi_ignore_headers|fastcgi_index|fastcgi_intercept_errors|fastcgi_keep_conn|fastcgi_max_temp_file_size|fastcgi_next_upstream|fastcgi_no_cache|fastcgi_param|fastcgi_pass|fastcgi_pass_header|fastcgi_read_timeout|fastcgi_send_timeout|fastcgi_split_path_info|fastcgi_store|fastcgi_store_access|fastcgi_temp_file_write_size|fastcgi_temp_path|flv|geo|geoip_city|geoip_country|gzip|gzip_buffers|gzip_comp_level|gzip_disable|gzip_http_version|gzip_min_length|gzip_proxied|gzip_static|gzip_types|gzip_vary|if|if_modified_since|ignore_invalid_headers|image_filter|image_filter_buffer|image_filter_jpeg_quality|image_filter_sharpen|image_filter_transparency|include|index|internal|ip_hash|keepalive|keepalive_disable|keepalive_requests|keepalive_timeout|large_client_header_buffers|limit_conn|limit_conn_log_level|limit_conn_zone|limit_except|limit_rate|limit_rate_after|limit_req|limit_req_log_level|limit_req_zone|limit_zone|lingering_close|lingering_time|lingering_timeout|listen|location|log_format|log_not_found|log_subrequest|map|map_hash_bucket_size|map_hash_max_size|master_process|max_ranges|memcached_buffer_size|memcached_connect_timeout|memcached_next_upstream|memcached_pass|memcached_read_timeout|memcached_send_timeout|merge_slashes|min_delete_depth|modern_browser|modern_browser_value|mp4|mp4_buffer_size|mp4_max_buffer_size|msie_padding|msie_refresh|open_file_cache|open_file_cache_errors|open_file_cache_min_uses|open_file_cache_valid|open_log_file_cache|optimize_server_names|override_charset|pcre_jit|perl|perl_modules|perl_require|perl_set|pid|port_in_redirect|postpone_output|proxy_buffer_size|proxy_buffering|proxy_buffers|proxy_busy_buffers_size|proxy_cache|proxy_cache_bypass|proxy_cache_key|proxy_cache_lock|proxy_cache_lock_timeout|proxy_cache_min_uses|proxy_cache_path|proxy_cache_use_stale|proxy_cache_valid|proxy_connect_timeout|proxy_cookie_domain|proxy_cookie_path|proxy_hide_header|proxy_http_version|proxy_ignore_client_abort|proxy_ignore_headers|proxy_intercept_errors|proxy_max_temp_file_size|proxy_next_upstream|proxy_no_cache|proxy_pass|proxy_pass_header|proxy_read_timeout|proxy_redirect|proxy_send_timeout|proxy_set_header|proxy_ssl_session_reuse|proxy_store|proxy_store_access|proxy_temp_file_write_size|proxy_temp_path|random_index|read_ahead|real_ip_header|recursive_error_pages|request_pool_size|reset_timedout_connection|resolver|resolver_timeout|return|rewrite|root|satisfy|satisfy_any|secure_link_secret|send_lowat|send_timeout|sendfile|sendfile_max_chunk|server|server|server_name|server_name_in_redirect|server_names_hash_bucket_size|server_names_hash_max_size|server_tokens|set|set_real_ip_from|source_charset|split_clients|ssi|ssi_silent_errors|ssi_types|ssl|ssl_certificate|ssl_certificate_key|ssl_ciphers|ssl_client_certificate|ssl_crl|ssl_dhparam|ssl_engine|ssl_prefer_server_ciphers|ssl_protocols|ssl_session_cache|ssl_session_timeout|ssl_verify_client|ssl_verify_depth|sub_filter|sub_filter_once|sub_filter_types|tcp_nodelay|tcp_nopush|timer_resolution|try_files|types|types_hash_bucket_size|types_hash_max_size|underscores_in_headers|uninitialized_variable_warn|upstream|user|userid|userid_domain|userid_expires|userid_name|userid_p3p|userid_path|userid_service|valid_referers|variables_hash_bucket_size|variables_hash_max_size|worker_priority|worker_processes|worker_rlimit_core|worker_rlimit_nofile|working_directory|xml_entities|xslt_stylesheet|xslt_types)([[:space:]]|$)
    - constant.bool.true: \b(on)\b
    - constant.bool.false: \b(off)\b
    - identifier: \$[A-Za-z][A-Za-z0-9_]*
    - symbol: '[*]'
    - constant-string: "\"(\\\\.|[^\"])*\"|'(\\\\.|[^'])*'"
    - constant.string:
        start: "'$"
        end: "';$"
        rules: []
    - comment: (^|[[:space:]])#([^{].*)?$
    - indent-char.whitespace: '[[:space:]]+$'
    - indent-char: "\t+ +| +\t+"
# ----- Rule set for language: nim -----
- comment:
    start: (?i)^```nim$
    end: ^```$
    rules:
    - preproc: '[\{\|]\b(atom|lit|sym|ident|call|lvalue|sideeffect|nosideeffect|param|genericparam|module|type|let|var|const|result|proc|method|iterator|converter|macro|template|field|enumfield|forvar|label|nk[a-zA-Z]+|alias|noalias)\b[\}\|]'
    - statement: 
        \b(addr|and|as|asm|atomic|bind|block|break|case|cast|concept|const|continue|converter|defer|discard|distinct|div|do|elif|else|end|enum|except|export|finally|for|from|func|generic|if|import|in|include|interface|is|isnot|iterator|let|macro|method|mixin|mod|nil|not|notin|object|of|or|out|proc|ptr|raise|ref|return|shl|shr|static|template|try|tuple|type|using|var|when|while|with|without|xor|yield)\b
    - statement: 
        \b(deprecated|noSideEffect|constructor|destructor|override|procvar|compileTime|noReturn|acyclic|final|shallow|pure|asmNoStackFrame|error|fatal|warning|hint|line|linearScanEnd|computedGoto|unroll|immediate|checks|boundsChecks|overflowChecks|nilChecks|assertations|warnings|hints|optimization|patterns|callconv|push|pop|global|pragma|experimental|bitsize|volatile|noDecl|header|incompleteStruct|compile|link|passC|passL|emit|importc|importcpp|importobjc|codegenDecl|injectStmt|intdefine|strdefine|varargs|exportc|extern|bycopy|byref|union|packed|unchecked|dynlib|cdecl|thread|gcsafe|threadvar|guard|locks|compileTime)\b
    - symbol.operator: '[=\+\-\*/<>@\$~&%\|!\?\^\.:\\]+'
    - special: \{\.|\.\}|\[\.|\.\]|\(\.|\.\)|;|,|`
    - statement: \.\.
    - type: 
        \b(int|cint|int8|int16|int32|int64|uint|uint8|uint16|uint32|uint64|float|float32|float64|bool|char|enum|string|cstring|cstringArray|cdouble|csize_t|pointer|array|openarray|seq|varargs|tuple|object|set|void|auto|cshort|clong|range|nil|T|untyped|typedesc)\b
    - type: "'[iI](8|16|32|64)?\\b|'[uU](8|16|32|64)?\\b|'[fF](32|64|128)?\\b|'[dD]\\\
        b"
    - constant.number: \b[0-9]+\b
    - constant.number: \b0[xX][0-9A-Fa-f][0-9_A-Fa-f]+\b
    - constant.number: \b0[ocC][0-7][0-7_]+\b
    - constant.number: \b0[bB][01][01_]+\b
    - constant.number: \b[0-9_]((\.?)[0-9_]+)?[eE][+\-][0-9][0-9_]+\b
    - constant.string: "\"(\\\\.|[^\"])*\"|'(\\\\.|[^'])*'"
    - comment: '[[:space:]]*(?:[^\\]|^)#.*$'
    - comment:
        start: \#\[
        end: \]\#
        rules: []
    - todo: (TODO|FIXME|XXX):?
# ----- Rule set for language: nix -----
- comment:
    start: (?i)^```nix$
    end: ^```$
    rules:
    - special: \b(Ellipsis|null|self|super|true|false|abort)\b
    - statement: \b(let|in|with|import|rec|inherit)\b
    - symbol.operator: ([~^.:;,+*|=!\%@]|<|>|/|-|&)
    - symbol.brackets: ([(){}]|\[|\])
    - constant.number: \b[0-9](_?[0-9])*(\.([0-9](_?[0-9])*)?)?(e[0-9](_?[0-9])*)?\b
    - constant.string:
        start: '"'
        end: '"'
        rules: []
    - constant.string:
        start: "''"
        end: "''"
        rules: []
    - comment:
        start: '#'
        end: $
        rules: []
    - comment:
        start: /\*
        end: \*/
        rules: []
# ----- Rule set for language: nu -----
- comment:
    start: (?i)^```nu$
    end: ^```$
    rules:
    - symbol: '[-+/*=<>!~%?:&|]'
    - statement: \b(agg-groups|agg|alias|all-false|all-true|all?|ansi gradient)\b
    - statement: \b(ansi strip|ansi|any?|append|append|arg-max)\b
    - statement: \b(arg-min|arg-sort|arg-true|arg-unique|as-date)\b
    - statement: \b(as-datetime|as|benchmark|build-string|cache|cal|cd)\b
    - statement: \b(char|clear|col|collect|columns|compact|complete)\b
    - statement: \b(concatenate|config|config env|config nu|contains)\b
    - statement: \b(count|count-null|cp|cumulative|date format|date humanize)\b
    - statement: \b(date list-timezone|date now|date to-record|date to-table)\b
    - statement: \b(date to-timezone|date|db and|db as|db col|db collect)\b
    - statement: \b(db describe|db fn|db from|db group-by|db join|db limit)\b
    - statement: \b(db open|db or|db order-by|db over|db query|db schema)\b
    - statement: \b(db select|db testing|db where|db|debug|decode)\b
    - statement: \b(def-env|default|def|describe|describe|detect columns)\b
    - statement: \b(df-not|do|drop|drop|drop column|drop nth|drop-duplicates)\b
    - statement: \b(drop-nulls|dtypes|du|each while|each|echo|empty?)\b
    - statement: \b(enter|env|error make|every|exec|exit|explode)\b
    - statement: \b(export alias|export def|export def-env|export env)\b
    - statement: \b(export extern|export|expr-not|extern|fetch|fill-na)\b
    - statement: \b(fill-null|filter-with|find|first|flatten)\b
    - statement: \b(fmt|format filesize|format|for|from csv|from eml)\b
    - statement: \b(from ics|from ini|from json|from nuon|from ods|from ssv)\b
    - statement: \b(from toml|from tsv|from url|from vcf|from xlsx|from xml)\b
    - statement: \b(from yaml|from yml|from|get-day|get-hour|get-minute)\b
    - statement: \b(get-month|get-nanosecond|get-ordinal|get-second|get-week)\b
    - statement: \b(get-weekday|get-year|get|glob|grid|group-by)\b
    - statement: \b(group|gstat|g|hash base64|hash md5|hash sha256|hash)\b
    - statement: \b(headers|help|hide|histogram|history|if|ignore)\b
    - statement: \b(inc|input|insert|into binary|into bool|into datetime|into decimal)\b
    - statement: \b(into duration|into filesize|into int|into string|into)\b
    - statement: \b(is-admin|is-duplicated|is-in|is-not-null)\b
    - statement: \b(is-null|is-unique|join|keep|keep until)\b
    - statement: \b(keep while|keybindings default|keybindings listen|keybindings
        list)\b
    - statement: \b(keybindings|kill|last|length|let-env|let)\b
    - statement: \b(lines|list|lit|load-env|ls|ls-df|match|math abs)\b
    - statement: \b(math avg|math ceil|math eval|math floor|math max)\b
    - statement: \b(math median|math min|math mode|math product|math round)\b
    - statement: \b(math sqrt|math stddev|math sum|math variance|math|max)\b
    - statement: \b(mean|median|melt|merge|metadata)\b
    - statement: \b(min|mkdir|module|move|mv|n|n-unique|n-unique)\b
    - statement: \b(nth|nu-highlight|open|open-df|otherwise|overlay)\b
    - statement: \b(overlay add|overlay list|overlay new|overlay remove|p)\b
    - statement: \b(par-each|parse|path basename|path dirname|path exists)\b
    - statement: \b(path expand|path join|path parse|path relative-to|path split)\b
    - statement: \b(path type|path|pivot|post|prepend|print|ps|quantile)\b
    - statement: \b(quantile|query json|query web|query xml|query|random bool)\b
    - statement: \b(random chars|random decimal|random dice|random integer)\b
    - statement: \b(random uuid|random|range|reduce|register|reject|rename)\b
    - statement: \b(replace|replace-all|reverse|reverse|rm|roll down)\b
    - statement: \b(roll left|roll right|roll up|rolling|roll|rotate)\b
    - statement: \b(run-external|sample|save|select|select|seq|seq char)\b
    - statement: \b(seq date|set|set-with-idx|shape|shells|shift|shuffle)\b
    - statement: \b(size|skip until|skip while|skip|sleep|slice|sort)\b
    - statement: \b(sort-by|source|split chars|split column|split row)\b
    - statement: \b(split-by|split|std|std|str camel-case|str capitalize)\b
    - statement: \b(str collect|str contains|str downcase|str ends-with|str find-replace)\b
    - statement: \b(str index-of|str kebab-case|str length|str lpad|str pascal-case)\b
    - statement: \b(str replace|str reverse|str rpad|str screaming-snake-case)\b
    - statement: \b(str snake-case|str starts-with|str substring|str title-case)\b
    - statement: \b(str to-datetime|str to-decimal|str to-int|str trim|str upcase)\b
    - statement: \b(str-lengths|str-slice|strftime|str|sum|sys|table)\b
    - statement: \b(take until|take while|take|term size|to csv)\b
    - statement: \b(to html|to json|to md|to nuon|to text|to toml|to tsv)\b
    - statement: \b(to url|to xml|to yaml|to-csv|to-df|to-dummies|to-lazy)\b
    - statement: \b(to-lowercase|to-nu|to-parquet|to-uppercase|touch|to)\b
    - statement: \b(transpose|tutor|unalias|uniq|unique|update|update cells)\b
    - statement: \b(upsert|url host|url path|url query|url scheme|url)\b
    - statement: \b(use|value-counts|var|version|view-source|watch)\b
    - statement: \b(when|where|which|window|with-column|with-env|wrap)\b
    - constant: \b(false|true)\b
    - constant.number: \b[-+]?([1-9][0-9])*\b
    - constant.number: \b[-+]?(0(x|b|o)\[[0-9a-fA-F ]+\])
    - constant.number: \b[-+]?([0-9]+[BbMmGgTtPp][i]?[Bb]?)?\b
    - constant.number: \b[-+]?([0-9]+[num]?[s])?\b
    - constant.number: \b[-+]?([0-9]+(sec|min|hr|day|wk))?\b
    - constant.number: 
        \b([0-9]+[-][0-9]+[-][0-9]+([T][0-9]+[:][0-9]+[:][0-9]+)?([\+][0-9]+[:][0-9]+)?)\b
    - constant.number: ([0-9]+(\.\.)[0-9]+)?
    - constant.number: ((\.\.)[0-9]+)?
    - constant.number: ([0-9]+(\.\.))?
    - comment:
        start: '#'
        end: $
        rules: []
    - comment:
        start: /\*
        end: \*/
        rules:
        - todo: (FIXME|TODO|NOTE):?
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: \\.
# ----- Rule set for language: objc -----
- comment:
    start: (?i)^```objc$
    end: ^```$
    rules:
    - type: 
        \b(float|double|CGFloat|id|bool|BOOL|Boolean|char|int|short|long|sizeof|enum|void|static|const|struct|union|typedef|extern|(un)?signed|inline|Class|SEL|IMP|NS(U)?Integer)\b
    - type: \b((s?size)|((u_?)?int(8|16|32|64|ptr)))_t\b
    - type: \b[A-Z][A-Z][[:alnum:]]*\b
    - type: \b[A-Za-z0-9_]*_t\b
    - type: \bdispatch_[a-zA-Z0-9_]*_t\b
    - statement: 
        (__attribute__[[:space:]]*\(\([^)]*\)\)|__(aligned|asm|builtin|hidden|inline|packed|restrict|section|typeof|weak)__|__unused|_Nonnull|_Nullable|__block|__builtin.*)
    - statement: 
        \b(class|namespace|template|public|protected|private|typename|this|friend|virtual|using|mutable|volatile|register|explicit)\b
    - statement: \b(for|if|while|do|else|case|default|switch)\b
    - statement: \b(try|throw|catch|operator|new|delete)\b
    - statement: \b(goto|continue|break|return)\b
    - statement: \b(nonatomic|atomic|readonly|readwrite|strong|weak|assign)\b
    - statement: '@(encode|end|interface|implementation|class|selector|protocol|synchronized|try|catch|finally|property|optional|required|import|autoreleasepool)'
    - preproc: 
        ^[[:space:]]*#[[:space:]]*(define|include|import|(un|ifn?)def|endif|el(if|se)|if|warning|error|pragma).*$
    - preproc: __[A-Z0-9_]*__
    - special: 
        ^[[:space:]]*[#|@][[:space:]]*(import|include)[[:space:]]*["|<].*\/?[>|"][[:space:]]*$
    - statement: ([.:;,+*|=!\%\[\]]|<|>|/|-|&)
    - constant.number: (\b(-?)?[0-9]+\b|\b\[0-9]+\.[0-9]+\b|\b0x[0-9a-fA-F]+\b)
    - constant: (@\[(\\.|[^\]])*\]|@\{(\\.|[^\}])*\}|@\((\\.|[^\)])*\))
    - constant: \b<(\\.[^\>])*\>\b
    - constant: \b(nil|NULL|YES|NO|TRUE|true|FALSE|false|self)\b
    - constant: \bk[[:alnum]]*\b
    - constant.string: "'.'"
    - constant.string:
        start: '@"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - comment:
        start: //
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment:
        start: /\*
        end: \*/
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: ocaml -----
- comment:
    start: (?i)^```ocaml$
    end: ^```$
    rules:
    - identifier: \b[A-Z][0-9a-z_]{2,}\b
    - statement: \b(let|val|method|in|and|rec|private|virtual|constraint)\b
    - type: \b(type|open|class|module|exception|external)\b
    - statement: \b(fun|function|functor|match|try|with)\b
    - statement: \b(as|when|of)\b
    - statement: \b(if|then|else)\b
    - type: \b(begin|end|object|struct|sig|for|while|do|done|to|downto)\b
    - type: "'[0-9A-Za-z_]+"
    - constant.bool: \b(true|false)\b
    - special: \b(include|inherit|initializer)\b
    - special: \b(new|ref|mutable|lazy|assert|raise)\b
    - constant.string: "'(\\\\[0-7]{3}|\\\\x[A-Fa-f0-9]{2}|\\\\u[A-Fa-f0-9]{4}|\\\\\
        U[A-Fa-f0-9]{8}|\\\\[abfnrtv'\\\"\\\\]|.)'"
    - constant.specialChar: \\[abfnrtv'\"\\]
    - constant.specialChar: \\([0-7]{3}|x[A-Fa-f0-9]{2}|u[A-Fa-f0-9]{4}|U[A-Fa-f0-9]{8})
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: '%.'
        - constant.specialChar: \\[abfnrtv'\"\\]
        - constant.specialChar: \\([0-7]{3}|x[A-Fa-f0-9]{2}|u[A-Fa-f0-9]{4}|U[A-Fa-f0-9]{8})
    - comment:
        start: \(\*
        end: \*\)
        rules: []
# ----- Rule set for language: octave -----
- comment:
    start: (?i)^```octave$
    end: ^```$
    rules:
    - statement: \b(function|endfunction|return|end|global|persistent)\b
    - statement: \b(if|elseif|else|endif|switch|case|otherwise|endswitch)\b
    - statement: \b(while|endwhile|do|until|for|endfor|parfor|endparfor|break|continue)\b
    - statement: 
        \b(unwind_protect|unwind_protect_cleanup|end_unwind_protect|try|catch|end_try_catch)\b
    - symbol.operator: '[-+/*=<>!~%&|^]|:='
    - symbol.brackets: (\{|\})
    - symbol.brackets: (\(|\))
    - symbol.brackets: (\[|\])
    - symbol: ','
    - constant.number: \b([0-9]+|0x[0-9a-fA-F]*)\b|'.'
    - constant.number: \b(pi|e|I|Inf|NaN|eps|realmax|realmin)\b|
    - constant.bool: \b(true|false)\b
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: '%'
        - constant.specialChar: \\[abfnrtv'\"\\]
        - constant.specialChar: \\([0-7]{3}|x[A-Fa-f0-9]{2}|u[A-Fa-f0-9]{4}|U[A-Fa-f0-9]{8})
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - error: ..+
        - constant.specialChar: '%'
        - constant.specialChar: \\[abfnrtv'\"\\]
        - constant.specialChar: \\([0-7]{3}|x[A-Fa-f0-9]{2}|u[A-Fa-f0-9]{4}|U[A-Fa-f0-9]{8})
    - comment:
        start: '%'
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment:
        start: '#'
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment:
        start: '%{'
        end: '%}'
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment:
        start: '#{'
        end: '#}'
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: odin -----
- comment:
    start: (?i)^```odin$
    end: ^```$
    rules:
    - special: 
        \b(asm|auto_cast|break|case|cast|context|continue|do|dynamic|fallthrough|return|transmute|using|where)\b
    - statement: \b(else|for|if|switch|in|not_in|or_else|or_return|when)\b
    - preproc: 
        \b(assert|package|foreign|import|proc|defer|make|new|free|delete|copy|len|cap|append|raw_data)\b
    - preproc: \b((size|align|offset|type|type_info|typeid)_of|offset_of_by_string)\b
    - preproc: 
        \b(swizzle|complex|quaternion|real|imag|jmag|kmag|conj|expand_to_tuple|min|max|abs|clamp|soa_zip|soa_unzip|transpose|outer_product|hadamard_product|matrix_flatten)\b
    - symbol.operator: '[-+/*=<>!~%&|^@]|:\s*=|:\s*:|\?'
    - symbol: (,|\.)
    - type: 
        \b(b(8|16|32|64)|(i|u)(8|(16|32|64|128)(le|be)?)|f(16|32|64)(le|be)?|complex(32|64|128)|quaternion(64|128|256))\b
    - type: \b(any|bool|byte|rune|u?int|uintptr|rawptr|c?string|map|matrix|typeid)\b
    - type.keyword: \b(distinct|struct|enum|union|bit_set)\b
    - constant.bool: \b(true|false|nil)\b
    - symbol.brackets: (\{|\})
    - symbol.brackets: (\(|\))
    - symbol.brackets: (\[|\])
    - constant.number: \b(0b[01]*|0o[0-7]*|0x[0-9a-fA-F]*|[0-9_]+|0d[0-9]*|0z[0-9abAB]*)\b|'.'
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: '%.'
        - constant.specialChar: \\[abfnrtv'\"\\]
        - constant.specialChar: \\([0-7]{1,3}|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - error: ..+
        - constant.specialChar: '%.'
        - constant.specialChar: \\[abfnrtv'\"\\]
        - constant.specialChar: \\([0-7]{1,3}|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})
    - constant.string:
        start: '`'
        end: '`'
        rules: []
    - comment:
        start: //
        end: $
        rules:
        - todo: TODO:?|NOTE(\(.*\))?:?
    - comment:
        start: /\*
        end: \*/
        rules:
        - todo: TODO:?|NOTE(\(.*\))?:?
# ----- Rule set for language: pascal -----
- comment:
    start: (?i)^```pascal$
    end: ^```$
    rules:
    - type: 
        \b(?i:(string|ansistring|widestring|shortstring|char|ansichar|widechar|boolean|byte|shortint|word|smallint|longword|cardinal|longint|integer|int64|single|currency|double|extended))\b
    - statement: 
        \b(?i:(and|asm|array|begin|break|case|const|constructor|continue|destructor|div|do|downto|else|end|file|for|function|goto|if|implementation|in|inline|interface|label|mod|not|object|of|on|operator|or|packed|procedure|program|record|repeat|resourcestring|set|shl|shr|then|to|type|unit|until|uses|var|while|with|xor))\b
    - statement: 
        \b(?i:(as|class|dispose|except|exit|exports|finalization|finally|inherited|initialization|is|library|new|on|out|property|raise|self|threadvar|try))\b
    - statement: 
        \b(?i:(absolute|abstract|alias|assembler|cdecl|cppdecl|default|export|external|forward|generic|index|local|name|nostackframe|oldfpccall|override|pascal|private|protected|public|published|read|register|reintroduce|safecall|softfloat|specialize|stdcall|virtual|write))\b
    - constant: \b(?i:(false|true|nil))\b
    - special:
        start: asm
        end: end
        rules: []
    - constant.number: \$[0-9A-Fa-f]+
    - constant.number: \b[+-]?[0-9]+([.]?[0-9]+)?(?i:e[+-]?[0-9]+)?
    - constant.string:
        start: '#[0-9]{1,}'
        end: $
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - preproc:
        start: '{\$'
        end: '}'
        rules: []
    - comment:
        start: //
        end: $
        rules: []
    - comment:
        start: \(\*
        end: \*\)
        rules: []
    - comment:
        start: ({)(?:[^$])
        end: '}'
        rules: []
# ----- Rule set for language: patch -----
- comment:
    start: (?i)^```patch$
    end: ^```$
    rules:
    - brightgreen: ^\+.*
    - green: ^\+\+\+.*
    - brightblue: ^ .*
    - brightred: ^-.*
    - red: ^---.*
    - brightyellow: ^@@.*
    - magenta: ^diff.*
# ----- Rule set for language: peg -----
- comment:
    start: (?i)^```peg$
    end: ^```$
    rules:
    - identifier: ^[[:space:]]*[A-Za-z][A-Za-z0-9_]*[[:space:]]*<-
    - constant.number: \^[+-]?[0-9]+
    - symbol.operator: '[-+*?^/!&]|->|<-|=>'
    - identifier.var: '%[A-Za-z][A-Za-z0-9_]*'
    - special: \[[^]]*\]
    - constant.string: "\"(\\\\.|[^\"])*\"|'(\\\\.|[^'])*'"
    - comment: (^|[[:space:]])\-\-.*$
    - todo: TODO:?
    - indent-char.whitespace: '[[:space:]]+$'
    - indent-char: "\t+ +| +\t+"
# ----- Rule set for language: perl -----
- comment:
    start: (?i)^```perl$
    end: ^```$
    rules:
    - type: 
        \b(accept|alarm|atan2|bin(d|mode)|c(aller|homp|h(dir|mod|op|own|root)|lose(dir)?|onnect|os|rypt)|d(bm(close|open)|efined|elete|ie|o|ump)|e(ach|of|val|x(ec|ists|it|p))|f(cntl|ileno|lock|ork))\b|\b(get(c|login|peername|pgrp|ppid|priority|pwnam|(host|net|proto|serv)byname|pwuid|grgid|(host|net)byaddr|protobynumber|servbyport)|([gs]et|end)(pw|gr|host|net|proto|serv)ent|getsock(name|opt)|gmtime|goto|grep|hex|index|int|ioctl|join)\b|\b(keys|kill|last|length|link|listen|local(time)?|log|lstat|m|mkdir|msg(ctl|get|snd|rcv)|next|oct|open(dir)?|ord|pack|pipe|pop|printf?|push|q|qq|qx|rand|re(ad(dir|link)?|cv|say|do|name|quire|set|turn|verse|winddir)|rindex|rmdir|s|scalar|seek(dir)?)\b|\b(se(lect|mctl|mget|mop|nd|tpgrp|tpriority|tsockopt)|shift|shm(ctl|get|read|write)|shutdown|sin|sleep|socket(pair)?|sort|spli(ce|t)|sprintf|sqrt|srand|stat|study|substr|symlink|sys(call|read|tem|write)|tell(dir)?|time|tr(y)?|truncate|umask)\b|\b(un(def|link|pack|shift)|utime|values|vec|wait(pid)?|wantarray|warn|write)\b
    - statement: 
        \b(continue|else|elsif|do|for|foreach|if|unless|until|while|eq|ne|lt|gt|le|ge|cmp|x|my|sub|use|package|can|isa)\b
    - special: \-\>
    - symbol: (,|\.)
    - identifier.macro: m?\/.*?\/[a-z]*
    - identifier.macro: m?\|.*?\|[a-z]*
    - identifier.macro: \bs/.*?/.*?/[a-z]*
    - identifier.macro: \bs\|.*?\|.*?\|[a-z]*
    - constant.string:
        start: '"'
        end: '"'
        skip: \\"
        rules:
        - identifier.var: '[\\$@%].[a-zA-Z0-9_]*'
    - constant.string:
        start: "'"
        end: "'"
        skip: \\'
        rules: []
    - comment:
        start: '#'
        end: $
        rules: []
    - constant.string: '"\(.*\)"|qq?\|.*\||qq?\{.*\}|qq?\/.*\/'
    - constant.number: \b([0-9]*[.])?[0-9]+
    - constant.number: \b[0-9]+
    - constant.number: \b0x[a-f0-9]+
    - constant.string.url: '`(.+?)`'
    - identifier.var: '[\\$@%].[a-zA-Z0-9_]*'
    - preproc:
        start: (^use| = new)
        end: ;
        rules: []
    - comment:
        start: ^=
        end: ^=cut
        rules: []
    - identifier.macro:
        start: << 'STOP'
        end: STOP
        rules: []
# ----- Rule set for language: php -----
- comment:
    start: (?i)^```php$
    end: ^```$
    rules:
    - symbol.operator: <|>
    - error: <[^!].*?>
    - symbol.tag: 
        (?i)<[/]?(a(bbr|cronym|ddress|pplet|rea|rticle|side|udio)?|b(ase(font)?|d(i|o)|ig|lockquote|r)?|ca(nvas|ption)|center|cite|co(de|l|lgroup)|d(ata(list)?|d|el|etails|fn|ialog|ir|l|t)|em(bed)?|fieldset|fig(caption|ure)|font|form|(i)?frame|frameset|h[1-6]|hr|i|img|in(put|s)|kbd|keygen|label|legend|li(nk)?|ma(in|p|rk)|menu(item)?|met(a|er)|nav|no(frames|script)|o(l|pt(group|ion)|utput)|p(aram|icture|re|rogress)?|q|r(p|t|uby)|s(trike)?|samp|se(ction|lect)|small|source|span|strong|su(b|p|mmary)|textarea|time|track|u(l)?|var|video|wbr)(
        .*|>)*?>
    - symbol.tag.extended: (?i)<[/]?(body|div|html|head(er)?|footer|title|table|t(body|d|h(ead)?|r|foot))(
        .*|>)*?>
    - preproc: (?i)<[/]?(script|style)( .*|>)*?>
    - preproc: <\?(php|=)?
    - preproc: \?>
    - preproc: <!DOCTYPE.+?>
    - special: '&[^;[[:space:]]]*;'
    - symbol: '[:=]'
    - identifier: 
        (alt|bgcolor|height|href|label|longdesc|name|onclick|onfocus|onload|onmouseover|size|span|src|style|target|type|value|width)=
    - constant.number: (?i)#[0-9a-fA-F]{6,6}
    - constant.string.url: "(ftp(s)?|http(s)?|git|chrome)://[^ \t]+"
    - comment: <!--.+?-->
    - default: <\?(php|=)" end="\?>
    - identifier.class: ([a-zA-Z0-9_-]+)\(
    - type: \b(array|bool|callable|float|int|iterable|object|mixed|string|void)\b
    - identifier.class: '[a-zA-Z\\]+::'
    - identifier: \b([A-Z][a-zA-Z0-9_]+)\b
    - identifier: ([A-Z0-9_]+)[;|\s|\)|,]
    - type.keyword: \b(global|final|public|private|protected|static|const|var)\b
    - statement: 
        \b(abstract|catch|class|declare|do|else(if)?|end(declare|for(each)?|if|switch|while)|enum|finally|for(each)|function|if|interface|namespace|switch|trait|try|while)\b
    - identifier: \bnew\s+([a-zA-Z0-9\\]+)
    - special: 
        \b(as|and|break|case|clone|continue|default|die|fn|echo|empty|eval|exit|extends|goto|or|include(_once)?|implements|instanceof|insteadof|isset|list|match|new|print|return|require(_once)?|unset|use|throw|xor|yield(\s+from))\b
    - constant.bool: \b(true|false|null|TRUE|FALSE|NULL)\b
    - constant: '[\s|=|\s|\(|/|+|-|\*|\[]'
    - constant.number: '[0-9]'
    - identifier: (\$this|parent|self|\$this->)
    - symbol.operator: (=>|===|!==|==|!=|&&|\|\||::|=|->|\!)
    - identifier.var: (\$[a-zA-Z0-9\-_]+)
    - symbol.operator: '[\(|\)|/|+|\-|\*|\[|.|,|;]'
    - symbol.brackets: (\[|\]|\{|\}|[()])
    - comment:
        start: (^|[[:space:]])*(//|#)
        end: $
        rules: []
    - comment:
        start: /\*
        end: \*/
        rules: []
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\[abfnrtv'\"\\]
        - constant.specialChar: \\[abfnrtv'\"\\]
# ----- Rule set for language: pkg-config -----
- comment:
    start: (?i)^```pkg-config$
    end: ^```$
    rules:
    - preproc: '^(Name|Description|URL|Version|Conflicts|Cflags):'
    - preproc: '^(Requires|Libs)(\.private)?:'
    - symbol.operator: '='
    - identifier.var: \$\{[A-Za-z_][A-Za-z0-9_]*\}
    - indent-char.whitespace: '[[:space:]]+$'
    - indent-char: "\t+ +| +\t+"
# ----- Rule set for language: po -----
- comment:
    start: (?i)^```po$
    end: ^```$
    rules:
    - preproc: \b(msgid|msgstr)\b
    - constant.string: "\"(\\\\.|[^\"])*\"|'(\\\\.|[^'])*'"
    - special: \\.?
    - comment: (^|[[:space:]])#([^{].*)?$
    - indent-char.whitespace: '[[:space:]]+$'
    - indent-char: "\t+ +| +\t+"
# ----- Rule set for language: pony -----
- comment:
    start: (?i)^```pony$
    end: ^```$
    rules:
    - statement: \b(type|interface|trait|primitive|class|struct|actor)\b
    - statement: \b(compiler_intrinsic)\b
    - statement: \b(use)\b
    - statement: \b(var|let|embed)\b
    - statement: \b(new|be|fun)\b
    - statement: \b(iso|trn|ref|val|box|tag|consume)\b
    - statement: \b(break|continue|return|error)\b
    - statement: 
        \b(if|then|elseif|else|end|match|where|try|with|as|recover|object|lambda|as|digestof|ifdef)\b
    - statement: \b(while|do|repeat|until|for|in)\b
    - statement: (\?|=>)
    - statement: (\||\&|\,|\^)
    - symbol.operator: (\-|\+|\*|/|\!|%|<<|>>)
    - symbol.operator: (==|!=|<=|>=|<|>)
    - statement: \b(is|isnt|not|and|or|xor)\b
    - type: \b(_*[A-Z][_a-zA-Z0-9\']*)\b
    - constant: \b(this)\b
    - constant.bool: \b(true|false)\b
    - constant.number: 
        \b((0b[0-1_]*)|(0o[0-7_]*)|(0x[0-9a-fA-F_]*)|([0-9_]+(\.[0-9_]+)?((e|E)(\\+|-)?[0-9_]+)?))\b
    - constant.string: '"(\\.|[^"])*"'
    - comment:
        start: '"""[^"]*'
        end: '"""'
        rules: []
    - comment: (^|[[:space:]])//.*
    - comment:
        start: /\*
        end: \*/
        rules: []
    - todo: TODO:?
# ----- Rule set for language: pov -----
- comment:
    start: (?i)^```pov$
    end: ^```$
    rules:
    - preproc: ^[[:space:]]*#[[:space:]]*(declare)
    - statement: \b(sphere|cylinder|translate|matrix|rotate|scale)\b
    - statement: \b(orthographic|location|up|right|direction|clipped_by)\b
    - statement: \b(fog_type|fog_offset|fog_alt|rgb|distance|transform)\b
    - identifier: ^\b(texture)\b
    - identifier: \b(light_source|background)\b
    - identifier: \b(fog|object|camera)\b
    - symbol.operator: (\{|\}|\(|\)|\;|\]|\[|`|\\|\$|<|>|!|=|&|\|)
    - special: \b(union|group|subgroup)\b
    - comment: //.*
    - comment:
        start: /\*
        end: \*/
        rules: []
# ----- Rule set for language: PowerShell -----
- comment:
    start: (?i)^```PowerShell$
    end: ^```$
    rules:
    - identifier.class: class +[A-Za-z0-9]+ *((:) +[A-Za-z0-9.]+)?
    - identifier.class: (function)(?:([[:space:]][A-Za-z0-9]+[[:space:]]*))
    - identifier: 
        (Add|Approve|Assert|Backup|Block|Build|Checkpoint|Clear|Close|Compare|Complete|Compress|Confirm|Connect|Convert|ConvertFrom|ConvertTo|Copy)[-][A-Za-z0-9]+
    - identifier: 
        (Debug|Deny|Deploy|Disable|Disconnect|Dismount|Edit|Enable|Enter|Exit|Expand|Export|Find|Format|Get|Grant|Group|Hide)[-][A-Za-z0-9]+
    - identifier: 
        (Import|Initialize|Install|Invoke|Join|Limit|Lock|Measure|Merge|Mount|Move|New|Open|Optimize|Out|Ping|Pop|Protect|Publish|Push)[-][A-Za-z0-9]+
    - identifier: 
        (Read|Receive|Redo|Register|Remove|Rename|Repair|Request|Reset|Resize|Resolve|Restart|Restore|Resume|Revoke)[-][A-Za-z0-9]+
    - identifier: 
        (Save|Search|Select|Send|Set|Show|Skip|Split|Start|Step|Stop|Submit|Suspend|Switch|Sync|Test|Trace)[-][A-Za-z0-9]+
    - identifier: 
        (Unblock|Undo|Uninstall|Unlock|Unprotect|Unpublish|Unregister|Update|Use|Wait|Watch|Write)[-][A-Za-z0-9]+
    - identifier.var: \$(?i)((Global|Local|Private|Script|Using|Workflow)[:])?[A-Za-z0-9]*
    - type: \[\b([A-Za-z]+|[A-Za-z]+[0-9]+)\b\]
    - statement: \b(alias|as|begin|break|catch|continue|data|default|define|do|dynamicparam)\b
    - statement: 
        \b(else|elseif|end|exit|finally|for|foreach|foreach-object|from|if|in|inlinescript)\b
    - statement: 
        \b(parallel|param|process|return|switch|throw|trap|try|until|using|var|where|where-object|while)\b
    - special: \b(break|continue|exit)\b
    - symbol.brackets: (\{|\})
    - symbol.brackets: (\(|\))
    - symbol.brackets: (\[|\])
    - symbol.operator: '[\-+/*=<>?:!~%&|]'
    - symbol.operator: '[[:space:]][-](ne|eq|gt|ge|lt|le|like|notlike|match|notmatch|contains|notcontains|in|notin|replace|is|isnot)[[:space:]]'
    - constant.bool: \b\$(true|false|null)\b
    - constant.number: \b([0-9._]+|0x[A-Fa-f0-9_]+|0b[0-1_]+)[FL]?\b
    - constant.string:
        start: '"'
        end: '"'
        rules:
        - constant.specialChar: \\([btnfr]|'|\"|\\)
        - constant.specialChar: \\u[A-Fa-f0-9]{4}
    - constant.string:
        start: "'"
        end: "'"
        rules:
        - constant.specialChar: \\([btnfr]|'|\"|\\)
        - constant.specialChar: \\u[A-Fa-f0-9]{4}
    - comment:
        start: '#'
        end: $
        rules:
        - todo: (TODO|XXX|FIXME|BUG):?
    - comment:
        start: <#
        end: '#>'
        rules:
        - todo: (TODO|XXX|FIXME|BUG):?
    - default:
        start: '@"'
        end: '"@'
        rules:
        - include: csharp
    - todo: (TODO|XXX|FIXME|BUG):?
# ----- Rule set for language: privoxy-action -----
- comment:
    start: (?i)^```privoxy-action$
    end: ^```$
    rules:
    - constant.bool.false: '[{[:space:]]\-block([[:space:]{}]|$)'
    - constant.bool.true: '[{[:space:]]\+block([[:space:]{}]|$)'
    - constant.bool.false: 
        -(add-header|change-x-forwarded-for|client-header-filter|client-header-tagger|content-type-overwrite|crunch-client-header|crunch-if-none-match|crunch-incoming-cookies|crunch-outgoing-cookies|crunch-server-header|deanimate-gifs|downgrade-http-version|fast-redirects|filter|force-text-mode|forward-override|handle-as-empty-document|handle-as-image|hide-accept-language|hide-content-disposition|hide-from-header|hide-if-modified-since|hide-referrer|hide-user-agent|limit-connect|overwrite-last-modified|prevent-compression|redirect|server-header-filter|server-header-tagger|session-cookies-only|set-image-blocker)
    - constant.bool.true: 
        \+(add-header|change-x-forwarded-for|client-header-filter|client-header-tagger|content-type-overwrite|crunch-client-header|crunch-if-none-match|crunch-incoming-cookies|crunch-outgoing-cookies|crunch-server-header|deanimate-gifs|downgrade-http-version|fast-redirects|filter|force-text-mode|forward-override|handle-as-empty-document|handle-as-image|hide-accept-language|hide-content-disposition|hide-from-header|hide-if-modified-since|hide-referrer|hide-user-agent|limit-connect|overwrite-last-modified|prevent-compression|redirect|server-header-filter|server-header-tagger|session-cookies-only|set-image-blocker)
    - constant.specialChar: \\.?
    - comment: (^|[[:space:]])#([^{].*)?$
    - indent-char.whitespace: '[[:space:]]+$'
    - indent-char: "\t+ +| +\t+"
# ----- Rule set for language: privoxy-config -----
- comment:
    start: (?i)^```privoxy-config$
    end: ^```$
    rules:
    - statement: 
        (accept-intercepted-requests|actionsfile|admin-address|allow-cgi-request-crunching|buffer-limit|compression-level|confdir|connection-sharing|debug|default-server-timeout|deny-access|enable-compression|enable-edit-actions|enable-remote-http-toggle|enable-remote-toggle|enforce-blocks|filterfile|forward|forwarded-connect-retries|forward-socks4|forward-socks4a|forward-socks5|handle-as-empty-doc-returns-ok|hostname|keep-alive-timeout|listen-address|logdir|logfile|max-client-connections|permit-access|proxy-info-url|single-threaded|socket-timeout|split-large-forms|templdir|toggle|tolerate-pipelining|trustfile|trust-info-url|user-manual)[[:space:]]
    - comment: (^|[[:space:]])#([^{].*)?$
    - indent-char.whitespace: '[[:space:]]+$'
    - indent-char: "\t+ +| +\t+"
# ----- Rule set for language: privoxy-filter -----
- comment:
    start: (?i)^```privoxy-filter$
    end: ^```$
    rules:
    - statement: '^(FILTER|CLIENT-HEADER-FILTER|CLIENT-HEADER-TAGGER|SERVER-HEADER-FILTER|SERVER-HEADER-TAGGER):
        [a-z-]+'
    - identifier: '^(FILTER|CLIENT-HEADER-FILTER|CLIENT-HEADER-TAGGER|SERVER-HEADER-FILTER|SERVER-HEADER-TAGGER):'
    - constant.specialChar: \\.?
    - comment: (^|[[:space:]])#([^{].*)?$
    - indent-char.whitespace: '[[:space:]]+$'
    - indent-char: "\t+ +| +\t+"
# ----- Rule set for language: proto -----
- comment:
    start: (?i)^```proto$
    end: ^```$
    rules:
    - identifier: \b[A-Z_][0-9A-Z_]+\b
    - type: 
        \b(int(8|16|32|64))|string|bytes|repeated|bool|required|map|optional|oneof|union\b
    - statement: 
        \b(import|service|enum|syntax|package|option|message|rpc|returns|extensions|to)\b
    - constant: "'\\\\(([0-3]?[0-7]{1,2}))'"
    - constant: "'\\\\x[0-9A-Fa-f]{1,2}'"
    - symbol.brackets: '[(){}]|\[|\]'
    - constant.number: (\b[0-9]+\b|\b0x[0-9A-Fa-f]+\b)
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - preproc: ..+
        - constant.specialChar: \\.
    - comment:
        start: //
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment:
        start: /\*
        end: \*/
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: puppet -----
- comment:
    start: (?i)^```puppet$
    end: ^```$
    rules:
    - default: ^[[:space:]]([a-z][a-z0-9_]+)
    - identifier.var: \$[a-z:][a-z0-9_:]+
    - type: 
        \b(augeas|computer|cron|exec|file|filebucket|group|host|interface|k5login|macauthorization|mailalias|maillist|mcx|mount|nagios_command|nagios_contact|nagios_contactgroup|nagios_host|nagios_hostdependency|nagios_hostescalation|nagios_hostextinfo|nagios_hostgroup|nagios_service|nagios_servicedependency|nagios_serviceescalation|nagios_serviceextinfo|nagios_servicegroup|nagios_timeperiod|notify|package|resources|router|schedule|scheduled_task|selboolean|selmodule|service|ssh_authorized_key|sshkey|stage|tidy|user|vlan|yumrepo|zfs|zone|zpool|anchor)\b
    - statement: \b(class|define|if|else|undef|inherits)\b
    - symbol: (=|-|~|>)
    - identifier.var: (\$|@|@@)?\b[A-Z]+[0-9A-Z_a-z]*
    - symbol: ([      ]|^):[0-9A-Z_]+\b
    - constant: /([^/]|(\\/))*/[iomx]*|%r\{([^}]|(\\}))*\}[iomx]*
    - constant.string: '`[^`]*`|%x\{[^}]*\}'
    - constant.string: '"([^"]|(\\"))*"|%[QW]?\{[^}]*\}|%[QW]?\([^)]*\)|%[QW]?<[^>]*>|%[QW]?\[[^]]*\]|%[QW]?\$[^$]*\$|%[QW]?\^[^^]*\^|%[QW]?![^!]*!'
    - special: \$\{[^}]*\}
    - constant.string: "'([^']|(\\\\'))*'|%[qw]\\{[^}]*\\}|%[qw]\\([^)]*\\)|%[qw]<[^>]*>|%[qw]\\\
        [[^]]*\\]|%[qw]\\$[^$]*\\$|%[qw]\\^[^^]*\\^|%[qw]![^!]*!"
    - comment: '#[^{].*$|#$'
    - comment.bright: '##[^{].*$|##$'
    - todo: (XXX|TODO|FIXME|\?\?\?)
    - indent-char.whitespace: '[[:space:]]+$'
# ----- Rule set for language: python2 -----
- comment:
    start: (?i)^```python2$
    end: ^```$
    rules:
    - constant: \b(None|self|True|False)\b
    - constant: 
        \b(__bases__|__builtin__|__class__|__debug__|__dict__|__doc__|__file__|__members__|__methods__|__name__|__self__)\b
    - identifier: 
        \b(abs|apply|callable|chr|cmp|compile|delattr|dir|divmod|eval|exec|execfile|filter|format|getattr|globals|hasattr|hash|help|hex|id|input|intern|isinstance|issubclass|len|locals|max|min|next|oct|open|ord|pow|range|raw_input|reduce|reload|repr|round|setattr|unichr|vars|zip|__import__)\b
    - identifier: 
        \b(__abs__|__add__|__and__|__call__|__cmp__|__coerce__|__complex__|__concat__|__contains__|__del__|__delattr__|__delitem__|__dict__|__delslice__|__div__|__divmod__|__float__|__getattr__|__getitem__|__getslice__|__hash__|__hex__|__init__|__int__|__inv__|__invert__|__len__|__long__|__lshift__|__mod__|__mul__|__neg__|__nonzero__|__oct__|__or__|__pos__|__pow__|__radd__|__rand__|__rcmp__|__rdiv__|__rdivmod__|__repeat__|__repr__|__rlshift__|__rmod__|__rmul__|__ror__|__rpow__|__rrshift__|__rshift__|__rsub__|__rxor__|__setattr__|__setitem__|__setslice__|__str__|__sub__|__xor__)\b
    - type: 
        \b(basestring|bool|buffer|bytearray|bytes|classmethod|complex|dict|enumerate|file|float|frozenset|int|list|long|map|memoryview|object|property|reversed|set|slice|staticmethod|str|super|tuple|type|unicode|xrange)\b
    - identifier: def [a-zA-Z_0-9]+
    - statement: 
        \b(and|as|assert|break|class|continue|def|del|elif|else|except|finally|for|from|global|if|import|in|is|lambda|not|or|pass|print|raise|return|try|while|with|yield)\b
    - preproc: ^\s*@[^(]*
    - symbol.operator: ([.:;,+*|=!\%@]|<|>|/|-|&)
    - symbol.brackets: ([(){}]|\[|\])
    - constant.number: \b[0-9]+\b
    - constant.string:
        start: '"""'
        end: '"""'
        rules: []
    - constant.string:
        start: "'''"
        end: "'''"
        rules: []
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - comment:
        start: '#'
        end: $
        rules: []
# ----- Rule set for language: python -----
- comment:
    start: (?i)^```python$
    end: ^```$
    rules:
    - constant: \b(Ellipsis|None|self|cls|True|False)\b
    - constant: 
        \b(__bases__|__builtin__|__class__|__debug__|__dict__|__doc__|__file__|__members__|__methods__|__name__|__self__)\b
    - identifier: 
        \b(abs|all|any|ascii|bin|bool|breakpoint|bytearray|bytes|callable|chr|classmethod|compile|complex|delattr|dir|divmod|eval|exec|format|getattr|globals|hasattr|hash|help|hex|id|input|isinstance|issubclass|iter|len|locals|max|min|next|nonlocal|oct|open|ord|pow|print|repr|round|setattr|sorted|sum|vars|__import__)\b
    - identifier: 
        \b__(abs|add|and|call|cmp|coerce|complex|concat|contains|delattr|delitem|delslice|del|dict|divmod|div|float|getattr|getitem|getslice|hash|hex|iadd|iand|iconcat|ifloordiv|ilshift|imatmul|imod|imul|init|int|invert|inv|ior|ipow|irshift|isub|iter|itruediv|ixor|len|long|lshift|mod|mul|neg|next|nonzero|oct|or|pos|pow|radd|rand|rcmp|rdivmod|rdiv|repeat|repr|rlshift|rmod|rmul|ror|rpow|rrshift|rshift|rsub|rxor|setattr|setitem|setslice|str|sub|xor)__\b
    - type: 
        \b(bool|bytearray|bytes|classmethod|complex|dict|enumerate|filter|float|frozenset|int|list|map|memoryview|object|property|range|reversed|set|slice|staticmethod|str|super|tuple|type|zip)\b
    - identifier: def [a-zA-Z_0-9]+
    - statement: 
        \b(and|as|assert|async|await|break|case|class|continue|def|del|elif|else|except|finally|for|from|global|if|import|in|is|lambda|match|nonlocal|not|or|pass|raise|return|try|while|with|yield)\b
    - preproc: ^\s*@[^(]*
    - symbol.operator: ([~^.:;,+*|=!\%@]|<|>|/|-|&)
    - symbol.brackets: ([(){}]|\[|\])
    - constant.number: \b[0-9](_?[0-9])*(\.([0-9](_?[0-9])*)?)?(e[0-9](_?[0-9])*)?\b
    - constant.number: \b0b(_?[01])+\b
    - constant.number: \b0o(_?[0-7])+\b
    - constant.number: \b0x(_?[0-9a-fA-F])+\b
    - constant.string:
        start: '"""'
        end: '"""'
        rules: []
    - constant.string:
        start: "'''"
        end: "'''"
        rules: []
    - constant.string:
        start: '"'
        end: ("|$)
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'"
        end: ('|$)
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - comment:
        start: '#'
        end: $
        rules:
        - todo: 
            (TODO|FIXME|HACK|BUG|NOTE|FAQ|MNEMONIC|REQ|RFE|IDEA|PORT|\?\?\?|!!!|GLOSS|SEE|TODOC|STAT|RVD|CRED):?
# ----- Rule set for language: r -----
- comment:
    start: (?i)^```r$
    end: ^```$
    rules:
    - statement: 
        \b(library|require|break|else|for|function|if|ifelse|in|next|names|switch|repeat|print|try|tryCatch|isTRUE|return|while)\b
    - constant: 
        \b(T|TRUE|F|FALSE|NULL|Inf|NaN|NA|NA_integer_|NA_real_|NA_complex_|NA_character_)\b
    - constant.number: (\b[0-9]+\b|\b0x[0-9A-Fa-f]+\b)
    - symbol.operator: ([.:;,+*|=!\%]|<|>|/|-|&|\^|\$)
    - comment:
        start: '#'
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: \\.
# ----- Rule set for language: raku -----
- comment:
    start: (?i)^```raku$
    end: ^```$
    rules:
    - type: 
        \b(accept|alarm|atan2|bin(d|mode)|c(aller|h(dir|mod|op|own|root)|lose(dir)?|onnect|os|rypt)|d(bm(close|open)|efined|elete|ie|o|ump)|e(ach|of|val|x(ec|ists|it|p))|f(cntl|ileno|lock|ork)|get(c|login|peername|pgrp|ppid|priority|pwnam|(host|net|proto|serv)byname|pwuid|grgid|(host|net)byaddr|protobynumber|servbyport)|([gs]et|end)(pw|gr|host|net|proto|serv)ent|getsock(name|opt)|gmtime|goto|grep|hex|index|int|ioctl|join|keys|kill|last|length|link|listen|local(time)?|log|lstat|m|mkdir|msg(ctl|get|snd|rcv)|next|oct|open(dir)?|ord|pack|pipe|pop|printf?|push|q|qq|qx|rand|re(ad(dir|link)?|cv|do|name|quire|set|turn|verse|winddir)|rindex|rmdir|s|scalar|seek|seekdir|se(lect|mctl|mget|mop|nd|tpgrp|tpriority|tsockopt)|shift|shm(ctl|get|read|write)|shutdown|sin|sleep|socket(pair)?|sort|spli(ce|t)|sprintf|sqrt|srand|stat|study|substr|symlink|sys(call|read|tem|write)|tell(dir)?|time|tr|y|truncate|umask|un(def|link|pack|shift)|utime|values|vec|wait(pid)?|wantarray|warn|write)\b
    - statement: 
        \b(continue|else|elsif|do|for|foreach|if|unless|until|while|eq|ne|lt|gt|le|ge|cmp|x|my|sub|use|package|can|isa)\b
    - special: 
        \b(has|is|class|role|given|when|BUILD|multi|returns|method|submethod|slurp|say|sub)\b
    - identifier: '[$@%&](\.|!|\^)?([[:alpha:]]|_)'
    - identifier: '[$@%&](\.|!|^)?([[:alpha:]]|_)([[:alnum:]]|-|_)*([[:alnum:]]|_)'
    - identifier: '[$@%&](\?|\*)([A-Z])([A-Z]|-)*([A-Z])'
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - preproc:
        start: (^use| = new)
        end: ;
        rules: []
    - identifier.macro:
        start: <<EOSQL
        end: EOSQL
        rules: []
    - comment:
        start: '#'
        end: $
        rules: []
# ----- Rule set for language: renpy -----
- comment:
    start: (?i)^```renpy$
    end: ^```$
    rules:
    - statement: 
        \b(python|init|early|define|default|label|call|jump|image|layeredimage|screen|style|transform|menu|show|hide|scene|at|with|zorder|behind|pause|play|stop|fadeout|fadein|queue)\b
    - type: 
        \b(repeat|block|choice|parallel|(x|y|)(pos|offset|anchor|align|center|tile|zoom)|time|linear|easein|alpha|subpixel)\b
    - identifier: \bpersistent\b
    - special: '\$ '
    - error: \t
    - include: python
# ----- Rule set for language: reST -----
- comment:
    start: (?i)^```reST$
    end: ^```$
    rules:
    - statement: \*\*[^*]+\*\*
    - preproc: '::'
    - constant.string: '`[^`]+`_{1,2}'
    - constant.string: '``[^`]+``'
    - identifier: ^\.\. .*$
    - identifier: ^__ .*$
    - type: ^###+$
    - type: ^\*\*\*+$
    - special: ^===+$
    - special: ^---+$
    - special: ^\^\^\^+$
    - special: ^"""+$
# ----- Rule set for language: rpmspec -----
- comment:
    start: (?i)^```rpmspec$
    end: ^```$
    rules:
    - preproc: '\b(Icon|ExclusiveOs|ExcludeOs):'
    - preproc: '\b(BuildArch|BuildArchitectures|ExclusiveArch|ExcludeArch):'
    - preproc: '\b(Conflicts|Obsoletes|Provides|Requires|Requires\(.*\)|Enhances|Suggests|BuildConflicts|BuildRequires|Recommends|PreReq|Supplements):'
    - preproc: '\b(Epoch|Serial|Nosource|Nopatch):'
    - preproc: '\b(AutoReq|AutoProv|AutoReqProv):'
    - preproc: '\b(Copyright|License|Summary|Summary\(.*\)|Distribution|Vendor|Packager|Group|Source[0-9]*|Patch[0-9]*|BuildRoot|Prefix):'
    - preproc: '\b(Name|Version|Release|Url|URL):'
    - preproc:
        start: ^(Source|Patch)
        end: ':'
        rules: []
    - preproc: 
        (i386|i486|i586|i686|athlon|ia64|alpha|alphaev5|alphaev56|alphapca56|alphaev6|alphaev67|sparc|sparcv9|sparc64armv3l|armv4b|armv4lm|ips|mipsel|ppc|ppc|iseries|ppcpseries|ppc64|m68k|m68kmint|Sgi|rs6000|i370|s390x|s390|noarch)
    - preproc: (ifarch|ifnarch|ifos|ifnos)
    - constant.string: "\"(\\\\.|[^\"])*\"|'(\\\\.|[^'])*'"
    - statement: '%(if|else|endif|define|global|undefine)'
    - statement: '%_?([A-Z_a-z_0-9_]*)'
    - statement:
        start: '%\{'
        end: \}
        rules: []
    - statement:
        start: '%\{__'
        end: \}
        rules: []
    - statement: \$(RPM_BUILD_ROOT)\>
    - special: ^%(build$|changelog|check$|clean$|description)
    - special: ^%(files|install$|package|prep$)
    - special: ^%(pre|preun|pretrans|post|postun|posttrans)
    - special: ^%(trigger|triggerin|triggerpostun|triggerun|verifyscript)
    - comment: (^|[[:space:]])#([^{].*)?$
    - constant: ^\*.*$
    - indent-char.whitespace: '[[:space:]]+$'
    - indent-char: "\t+ +| +\t+"
    - todo: TODO:?
# ----- Rule set for language: ruby -----
- comment:
    start: (?i)^```ruby$
    end: ^```$
    rules:
    - comment.bright:
        start: '##'
        end: $
        rules:
        - todo: (XXX|TODO|FIXME|BUG|\?\?\?)
    - comment:
        start: '#'
        end: $
        rules:
        - todo: (XXX|TODO|FIXME|BUG|\?\?\?)
    - statement: 
        \b(BEGIN|END|alias|and|begin|break|case|class|def|defined\?|do|else|elsif|end|ensure|for|if|in|module|next|nil|not|or|private|protected|public|redo|rescue|retry|return|self|super|then|undef|unless|until|when|while|yield)\b
    - constant: (\$|@|@@)?\b[A-Z]+[0-9A-Z_a-z]*
    - constant.number: (?i)\b0x[0-9a-fA-F][0-9a-f_]*\b
    - constant.number: (?i)\b0b[01][01_]*\b
    - constant.number: (?i)\b[0-9][0-9_]*(['.'][0-9_]+)?(e[\-]?[0-9_]+)?\b
    - constant: "(i?)([ \t]|^):[0-9A-Z_]+\\b"
    - constant: \b(__FILE__|__LINE__)\b
    - constant: /([^/]|(\\/))*/[iomx]*|%r\{([^}]|(\\}))*\}[iomx]*
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules: []
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - symbol.brackets:
            start: '#\{'
            end: \}
            rules:
            - default: .*
    - constant.string.exec:
        start: '`'
        end: '`'
        skip: \\.
        rules:
        - symbol.brackets:
            start: '#\{'
            end: \}
            rules:
            - default: .*
    - constant.string: '%[QW]?\{[^}]*\}|%[QW]?\([^)]*\)|%[QW]?<[^>]*>|%[QW]?\[[^]]*\]|%[QW]?\$[^$]*\$|%[QW]?\^[^^]*\^|%[QW]?![^!]*!'
    - constant.string: '%[qw]\{[^}]*\}|%[qw]\([^)]*\)|%[qw]<[^>]*>|%[qw]\[[^]]*\]|%[qw]\$[^$]*\$|%[qw]\^[^^]*\^|%[qw]![^!]*!'
    - constant.string.exec: '%[x]\{[^}]*\}|%[x]\([^)]*\)|%[x]<[^>]*>|%[x]\[[^]]*\]|%[x]\$[^$]*\$|%[x]\^[^^]*\^|%[x]![^!]*!'
    - constant.bool: \b(true|false|nil|TRUE|FALSE|NIL)\b
    - symbol.operator: '[-+/*=<>!~%&|^]|\b:'
    - symbol.brackets: ([(){}]|\[|\])
    - constant.macro:
        start: <<-?'?EOT'?
        end: ^EOT
        rules: []
    - preproc.shebang: ^#!.+?( |$)
# ----- Rule set for language: rust -----
- comment:
    start: (?i)^```rust$
    end: ^```$
    rules:
    - identifier: fn [a-z0-9_]+
    - statement: 
        \b(abstract|alignof|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|false|final|fn|for|gen|if|impl|in|let|loop|macro|match|mod|move|mut|offsetof|override|priv|pub|pure|ref|return|sizeof|static|self|struct|super|true|trait|type|typeof|try|union|unsafe|unsized|use|virtual|where|while|yield)\b
    - special: '[a-z_]+!'
    - constant: \b[A-Z][A-Z_0-9]+\b
    - constant.number: \b[0-9]+\b
    - constant: \b(true|false)\b
    - type: \b[A-Z]+[a-zA-Z_0-9]*[a-z]+[a-zA-Z_0-9]*\b
    - type: \b(bool|str|char|((i|u)(8|16|32|64|128|size))|f(16|32|64|128))\b
    - constant.string:
        start: '[bc]?"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: '[bc]?r#"'
        end: '"#'
        rules: []
    - constant.string:
        start: '[bc]?r##"'
        end: '"##'
        rules: []
    - constant.string:
        start: '[bc]?r###"'
        end: '"###'
        rules: []
    - constant.string:
        start: '[bc]?r####+"'
        end: '"####+'
        rules: []
    - constant.string: "'(\\\\.|.)'"
    - constant.string:
        start: "'\""
        end: "'"
        rules: []
    - comment:
        start: //
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment:
        start: /\*
        end: \*/
        rules:
        - todo: (TODO|XXX|FIXME):?
    - special:
        start: '#!\['
        end: \]
        rules: []
# ----- Rule set for language: sage -----
- comment:
    start: (?i)^```sage$
    end: ^```$
    rules:
    - constant: \b(None|self|True|False)\b
    - constant: 
        \b(__bases__|__builtin__|__class__|__debug__|__dict__|__doc__|__file__|__members__|__methods__|__name__|__self__)\b
    - identifier: 
        \b(abs|apply|callable|chr|cmp|compile|delattr|dir|divmod|eval|exec|execfile|filter|format|getattr|globals|hasattr|hash|help|hex|id|input|intern|isinstance|issubclass|len|locals|max|min|next|oct|open|ord|pow|range|raw_input|reduce|reload|repr|round|setattr|unichr|vars|zip|__import__)\b
    - identifier: 
        \b(__abs__|__add__|__and__|__call__|__cmp__|__coerce__|__complex__|__concat__|__contains__|__del__|__delattr__|__delitem__|__dict__|__delslice__|__div__|__divmod__|__float__|__getattr__|__getitem__|__getslice__|__hash__|__hex__|__init__|__int__|__inv__|__invert__|__len__|__long__|__lshift__|__mod__|__mul__|__neg__|__nonzero__|__oct__|__or__|__pos__|__pow__|__radd__|__rand__|__rcmp__|__rdiv__|__rdivmod__|__repeat__|__repr__|__rlshift__|__rmod__|__rmul__|__ror__|__rpow__|__rrshift__|__rshift__|__rsub__|__rxor__|__setattr__|__setitem__|__setslice__|__str__|__sub__|__xor__)\b
    - type: 
        \b(basestring|bool|buffer|bytearray|bytes|classmethod|complex|dict|enumerate|file|float|frozenset|int|list|long|map|memoryview|object|property|reversed|set|slice|staticmethod|str|super|tuple|type|unicode|xrange)\b
    - identifier: def [a-zA-Z_0-9]+
    - statement: 
        \b(and|as|assert|break|class|continue|def|del|elif|else|except|finally|for|from|global|if|import|in|is|lambda|not|or|pass|print|raise|return|try|while|with|yield)\b
    - brightgreen: '@.*[(]'
    - statement: ([.:;,+*|=!\%@]|<|>|/|-|&)
    - statement: ([(){}]|\[|\])
    - constant.number: \b[0-9]+\b
    - comment:
        start: '"""'
        end: '"""'
        rules: []
    - comment:
        start: "'''"
        end: "'''"
        rules: []
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - comment:
        start: '#'
        end: $
        rules: []
# ----- Rule set for language: scad -----
- comment:
    start: (?i)^```scad$
    end: ^```$
    rules:
    - identifier: \b(function|module) +[a-z0-9_]+
    - statement: 
        \b(abs|acos|asin|assert|atan|atan2|ceil|child|children|chr|circle|color|concat|cos|cross|cube|cylinder|difference|dxf_cross|dxf_dim|each|echo|else|exp|floor|for|function|hull|if|import|import_dxf|intersection|intersection_for|is_bool|is_function|is_list|is_num|is_string|is_undef|len|let|linear_extrude|ln|log|lookup|max|min|minkowski|mirror|module|multmatrix|norm|offset|ord|parent_module|polygon|polyhedron|pow|projection|rands|render|resize|rotate|rotate_extrude|round|scale|search|sign|sin|sphere|sqrt|square|str|surface|tan|text|translate|union|version|version_num)\b
    - symbol: '[,\.;:?]'
    - symbol.operator: '[-+*/%^<>!=]|[<=>!]=|&&|\|\|'
    - symbol.brackets: '[{(<>)}]|\[|\]'
    - special: '[#%!*]'
    - special: \B\$[a-z]+\b
    - preproc:
        start: ^ *(use|include) <
        end: '>;?'
        rules: []
    - constant.number: \b[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?|PI|inf|nan\b
    - constant.bool: \b(true|false)\b
    - constant: \b(undef)\b
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - comment:
        start: //
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment:
        start: /\*
        end: \*/
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: scala -----
- comment:
    start: (?i)^```scala$
    end: ^```$
    rules:
    - type: \b(boolean|byte|char|double|float|int|long|new|short|this|transient|void)\b
    - statement: 
        \b(match|val|var|break|case|catch|continue|default|do|else|finally|for|if|return|switch|throw|try|while)\b
    - statement: 
        \b(def|object|case|trait|lazy|implicit|abstract|class|extends|with|final|implements|override|import|instanceof|interface|native|package|private|protected|public|static|strictfp|super|synchronized|throws|volatile|sealed)\b
    - constant.string:
        start: '"""'
        end: '"""'
        rules: []
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant: \b(true|false|null)\b
    - comment:
        start: //
        end: $
        rules: []
    - comment:
        start: /\*
        end: \*/
        rules: []
    - comment:
        start: /\*\*
        end: \*/
        rules: []
# ----- Rule set for language: sed -----
- comment:
    start: (?i)^```sed$
    end: ^```$
    rules:
    - symbol.operator: '[|^$.*+]'
    - constant.number: \{[0-9]+,?[0-9]*\}
    - constant.specialChar: \\.
    - comment: (^|[[:space:]])#([^{].*)?$
    - indent-char.whitespace: '[[:space:]]+$'
    - indent-char: "\t+ +| +\t+"
# ----- Rule set for language: sh -----
- comment:
    start: (?i)^```sh$
    end: ^```$
    rules:
    - constant.number: \b[0-9]+\b
    - statement: 
        \b(break|case|continue|do|done|elif|else|esac|exec|exit|fi|for|function|if|in|return|select|then|trap|until|wait|while)\b
    - special: '[`$<>!=&~^\{\}\(\)\;\]\[]+'
    - type: 
        \b(cd|command|echo|eval|export|getopts|let|local|read|set|shift|time|umask|unset)\b
    - type: 
        \b((g|ig)?awk|bash|dash|find|getopt|\w{0,4}grep|kill|killall|\w{0,4}less|make|pkill|sed|sh|tar)\b
    - type: 
        \b(base64|basename|cat|chcon|chgrp|chmod|chown|chroot|cksum|comm|cp|csplit|cut|date|dd|df|dir|dircolors|dirname|du|env|expand|expr|factor|false|fmt|fold|head|hostid|id|install|join|link|ln|logname|ls|md5sum|mkdir|mkfifo|mknod|mktemp|mv|nice|nl|nohup|nproc|numfmt|od|paste|pathchk|pinky|pr|printenv|printf|ptx|pwd|readlink|realpath|rm|rmdir|runcon|seq|(sha1|sha224|sha256|sha384|sha512)sum|shred|shuf|sleep|sort|split|stat|stdbuf|stty|sum|sync|tac|tail|tee|test|time|timeout|touch|tr|true|truncate|tsort|tty|uname|unexpand|uniq|unlink|users|vdir|wc|who|whoami|yes)\b
    - statement: \s+(-[A-Za-z]+|--[a-z]+)
    - identifier: \$\{[\w:!%&=+#~@*^$?, .\-\/\[\]]+\}
    - identifier: \$([0-9_!#@*$?-]|[A-Za-z_]\w*)
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules: []
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules: []
    - constant.string:
        start: <<[^\s]+[-~.]*[A-Za-z0-9]+$
        end: ^[^\s]+[A-Za-z0-9]+$
        skip: \\.
        rules: []
    - comment:
        start: (^|\s)#
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: sls -----
- comment:
    start: (?i)^```sls$
    end: ^```$
    rules:
    - identifier.var: ^[^ -].*:$
    - identifier.var: '.*:'
    - default: 'salt:'
    - constant.number: /*[0-9]/*
    - constant.bool: \b(True|False)\b
    - constant.string: "\"(\\\\.|[^\"])*\"|'(\\\\.|[^'])*'"
    - special: \b(grain|grains|compound|pcre|grain_pcre|list|pillar)\b
    - comment: ^#.*
    - statement: \b(if|elif|else|or|not|and|endif|end)\b
# ----- Rule set for language: smalltalk -----
- comment:
    start: (?i)^```smalltalk$
    end: ^```$
    rules:
    - statement: \b(self|nil|true|false|ifTrue|ifFalse|whileTrue|whileFalse)\b
    - constant: (\$|@|@@)?\b[A-Z]+[0-9A-Z_a-z]*
    - constant.number: (?i)\b0x[0-9a-fA-F][0-9a-f_]*\b
    - constant.number: (?i)\b0b[01][01_]*\b
    - constant.number: (?i)\b[0-9][0-9_]*(['.'][0-9_]+)?(e[\-]?[0-9_]+)?\b
    - constant: "(i?)([ \t]|^):[0-9A-Z_]+\\b"
    - constant: \b(__FILE__|__LINE__)\b
    - constant: /([^/]|(\\/))*/[iomx]*|%r\{([^}]|(\\}))*\}[iomx]*
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules: []
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - symbol.brackets:
            start: '#\{'
            end: \}
            rules:
            - default: .*
    - constant.string.exec:
        start: '`'
        end: '`'
        skip: \\.
        rules:
        - symbol.brackets:
            start: '#\{'
            end: \}
            rules:
            - default: .*
    - constant.string: '%[QW]?\{[^}]*\}|%[QW]?\([^)]*\)|%[QW]?<[^>]*>|%[QW]?\[[^]]*\]|%[QW]?\$[^$]*\$|%[QW]?\^[^^]*\^|%[QW]?![^!]*!'
    - constant.string: '%[qw]\{[^}]*\}|%[qw]\([^)]*\)|%[qw]<[^>]*>|%[qw]\[[^]]*\]|%[qw]\$[^$]*\$|%[qw]\^[^^]*\^|%[qw]![^!]*!'
    - constant.string.exec: '%[x]\{[^}]*\}|%[x]\([^)]*\)|%[x]<[^>]*>|%[x]\[[^]]*\]|%[x]\$[^$]*\$|%[x]\^[^^]*\^|%[x]![^!]*!'
    - symbol.operator: '[-+/*=<>!~%&|^]|\b:'
    - symbol.brackets: ([(){}]|\[|\])
    - constant.macro:
        start: <<-?'?EOT'?
        end: ^EOT
        rules: []
    - preproc.shebang: ^#!.+?( |$)
# ----- Rule set for language: solidity -----
- comment:
    start: (?i)^```solidity$
    end: ^```$
    rules:
    - preproc: \b(contract|library|pragma)\b
    - constant.number: \b[-]?([0-9]+|0x[0-9a-fA-F]+)\b
    - identifier: '[a-zA-Z][_a-zA-Z0-9]*[[:space:]]*'
    - statement: \b(assembly|break|continue|do|for|function|if|else|new|return|returns|while)\b
    - special: \b(\.send|throw)\b
    - type.keyword: \b(anonymous|constant|indexed|payable|public|private|external|internal)\b
    - constant: 
        \b(block(\.(blockhash|coinbase|difficulty|gaslimit|number|timestamp))?|msg(\.(data|gas|sender|value))?|now|tx(\.(gasprice|origin))?)\b
    - constant: 
        \b(keccak256|sha3|sha256|ripemd160|ecrecover|addmod|mulmod|this|super|selfdestruct|\.balance)\b
    - constant: \b(true|false)\b
    - constant: \b(wei|szabo|finney|ether|seconds|minutes|hours|days|weeks|years)\b
    - type: 
        \b(address|bool|mapping|string|var|int(\d*)|uint(\d*)|byte(\d*)|fixed(\d*)|ufixed(\d*))\b
    - error: 
        \b(abstract|after|case|catch|default|final|in|inline|interface|let|match|null|of|pure|relocatable|static|switch|try|type|typeof|view)\b
    - operator: '[-+/*=<>!~%?:&|]'
    - comment:
        start: //
        end: $
        rules: []
    - comment:
        start: /\*
        end: \*/
        rules: []
    - todo: TODO:?
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: \\.
# ----- Rule set for language: sql -----
- comment:
    start: (?i)^```sql$
    end: ^```$
    rules:
    - statement: (?i)\b(ALL|ASC|AS|ALTER|AND|ADD|AUTO_INCREMENT)\b
    - statement: (?i)\b(BETWEEN|BINARY|BOTH|BY|BOOLEAN)\b
    - statement: (?i)\b(CHANGE|CHECK|COLUMNS|COLUMN|CROSS|CREATE)\b
    - statement: 
        (?i)\b(DATABASES|DATABASE|DATA|DELAYED|DESCRIBE|DESC|DISTINCT|DELETE|DROP|DEFAULT)\b
    - statement: (?i)\b(ENCLOSED|ESCAPED|EXISTS|EXPLAIN)\b
    - statement: (?i)\b(FIELDS|FIELD|FLUSH|FOR|FOREIGN|FUNCTION|FROM)\b
    - statement: (?i)\b(GROUP|GRANT|HAVING)\b
    - statement: (?i)\b(IGNORE|INDEX|INFILE|INSERT|INNER|INTO|IDENTIFIED|IN|IS|IF)\b
    - statement: (?i)\b(JOIN|KEYS|KILL|KEY)\b
    - statement: (?i)\b(LEADING|LIKE|LIMIT|LINES|LOAD|LOCAL|LOCK|LOW_PRIORITY|LEFT|LANGUAGE)\b
    - statement: (?i)\b(MODIFY|NATURAL|NOT|NULL|NEXTVAL)\b
    - statement: (?i)\b(OPTIMIZE|OPTION|OPTIONALLY|ORDER|OUTFILE|OR|OUTER|ON)\b
    - statement: (?i)\b(PROCEDURE|PROCEDURAL|PRIMARY)\b
    - statement: (?i)\b(READ|REFERENCES|REGEXP|RENAME|REPLACE|RETURN|REVOKE|RLIKE|RIGHT)\b
    - statement: (?i)\b(SHOW|SONAME|STATUS|STRAIGHT_JOIN|SELECT|SETVAL|SET)\b
    - statement: (?i)\b(TABLES|TERMINATED|TO|TRAILING|TRUNCATE|TABLE|TEMPORARY|TRIGGER|TRUSTED)\b
    - statement: (?i)\b(UNIQUE|UNLOCK|USE|USING|UPDATE|VALUES|VARIABLES|VIEW)\b
    - statement: (?i)\b(WITH|WRITE|WHERE|ZEROFILL|TYPE|XOR)\b
    - type: 
        (?i)\b(VARCHAR|TINYINT|TEXT|DATE|SMALLINT|MEDIUMINT|INT|INTEGER|BIGINT|FLOAT|DOUBLE|DECIMAL|DATETIME|TIMESTAMP|TIME|YEAR|UNSIGNED|CHAR|TINYBLOB|TINYTEXT|BLOB|MEDIUMBLOB|MEDIUMTEXT|LONGBLOB|LONGTEXT|ENUM|BOOL|BINARY|VARBINARY)\b
    - preproc: (?i)\.\b(databases|dump|echo|exit|explain|header(s)?|help)\b
    - preproc: (?i)\.\b(import|indices|mode|nullvalue|output|prompt|quit|read)\b
    - preproc: (?i)\.\b(schema|separator|show|tables|timeout|width)\b
    - constant.bool: \b(ON|OFF)\b
    - constant.number: \b([0-9]+)\b
    - constant.string: "\"(\\\\.|[^\"])*\"|'(\\\\.|[^'])*'"
    - constant.string: '`(\\.|[^\\`])*`'
    - comment: \-\-.*$
    - indent-char.whitespace: '[[:space:]]+$'
    - indent-char: "\t+ +| +\t+"
# ----- Rule set for language: stata -----
- comment:
    start: (?i)^```stata$
    end: ^```$
    rules:
    - constant.string:
        start: '`"'
        end: "\"'"
        rules:
        - identifier.macro:
            start: '`'
            end: "'"
            rules: []
        - identifier.macro: \$\w+
        - constant.specialChar: \\.
    - constant.string:
        start: '"'
        end: '"'
        rules:
        - identifier.macro:
            start: '`'
            end: "'"
            rules: []
        - identifier.macro: \$\w+
        - constant.specialChar: \\.
    - identifier: 
        \b(_caller|abbrev|abs|acos|acosh|asin|asinh|atan|atan2|atanh|autocode|betaden|binomial|binomialp|binomialtail|binormal|bofd|byteorder|c|cauchy|cauchyden|cauchytail|Cdhms|ceil|char|chi2|chi2den|chi2tail|Chms|cholesky|chop|clip|Clock|cloglog|Cmdyhms|Cofc|Cofd|coleqnumb|collatorlocale|collatorversion|colnfreeparms|colnumb|colsof|comb|cond|corr|cos|cosh|date|day|det|dgammapda|dgammapdada|dgammapdadx|dgammapdx|dgammapdxdx|dhms|diag|diag0cnt|digamma|dofb|dofC|dofh|dofm|dofq|dofw|dofy|dow|doy|dunnettprob|e|el|epsdouble|epsfloat|exp|exponential|exponentialden|exponentialtail|F|Fden|fileexists|fileread|filereaderror|filewrite|float|floor|fmtwidth|Ftail|gammaden|gammap|gammaptail|hadamard|halfyear|halfyearly|has_eprop|hh|hhC|hms|hofd|hours|hypergeometric|hypergeometricp|I|ibeta|ibetatail|igaussian|igaussianden|igaussiantail|indexnot|inlist|inrange|int|inv|invbinomial|invbinomialtail|invcauchy|invcauchytail|invchi2|invchi2tail|invcloglog|invdunnettprob|invexponential|invexponentialtail|invF|invFtail|invgammap|invgammaptail|invibeta|invibetatail|invigaussian|invigaussiantail|invlaplace|invlaplacetail|invlogistic|invlogistictail|invlogit|invnbinomial|invnbinomialtail|invnchi2|invnchi2tail|invnF|invnFtail|invnibeta|invnormal|invnt|invnttail|invpoisson|invpoissontail|invsym|invt|invttail|invtukeyprob|invweibull|invweibullph|invweibullphtail|invweibulltail|irecode|issymmetric|J|laplace|laplaceden|laplacetail|ln|lncauchyden|lnfactorial|lngamma|lnigammaden|lnigaussianden|lniwishartden|lnlaplaceden|lnmvnormalden|lnnormal|lnnormalden|lnwishartden|log|log10|logistic|logisticden|logistictail|logit|matmissing|matrix|matuniform|max|maxbyte|maxdouble|maxfloat|maxint|maxlong|mdy|mdyhms|missing|min|minbyte|mindouble|minfloat|minint|minlong|minutes|mm|mmC|mod|mofd|month|monthly|mreldif|msofhours|msofminutes|msofseconds|nbetaden|nbinomial|nbinomialp|nbinomialtail|nchi2|nchi2den|nchi2tail|nF|nFden|nFtail|nibeta|normal|normalden|npnchi2|npnF|npnt|nt|ntden|nttail|nullmat|plural|poisson|poissonp|poissontail|qofd|quarter|quarterly|r|rbeta|rbinomial|rcauchy|rchi2|real|recode|regexm|regexr|regexs|reldif|replay|return|rexponential|rgamma|rhypergeometric|rigaussian|rlaplace|rlogistic|rnbinomial|rnormal|round|roweqnumb|rownfreeparms|rownumb|rowsof|rpoisson|rt|runiform|runiformint|rweibull|rweibullph|s|scalar|seconds|sign|sin|sinh|smallestdouble|soundex|sqrt|ss|ssC|strcat|strdup|strofreal|string|strtrim|stritrim|strltrim|strrtrim|strlen|strupper|strlower|strproper|strmatch|strpos|strrpos|strreverse|strtoname|subinstr|subinword|substr|sum|sweep|t|tan|tanh|tC|td|tden|th|tin|tm|tobytes|tq|trace|trigamma|ttail|tukeyprob|tw|twithin|uchar|udstrlen|udsubstr|uisdigit|uisletter|ustrcompare|ustrsortkey|ustrcompareex|ustrsortkeyex|ustrfix|ustrto|ustrfrom|ustrlen|ustrinvalidcnt|usubstr|ustrleft|ustrright|ustrupper|ustrlower|ustrtitle|ustrtrim|ustrltrim|ustrrtrim|ustrnormalize|ustrpos|ustrrpos|ustrregexm|ustrregexrf|ustrregexra|ustrregexs|ustrreverse|ustrunescape|ustrtohex|ustrtoname|ustrword|ustrwordcount|usubinstr|vec|vecdiag|week|weekly|weibull|weibullden|weibullph|weibullphden|weibullphtail|weibulltail|wofd|word|wordbreaklocale|year|yearly|yh|ym|yofd|yq|yw)\b
    - statement: 
        \b(if|else|else\s+if|in|foreach|for|forv|forva|forval|forvalu|forvalue|forvalues|by|bys|bysort|quietly|qui|about|ac|ac_7|acprplot|acprplot_7|adjust|ado|adopath|adoupdate|alpha|ameans|an|ano|anov|anova|anova_estat|anova_terms|anovadef|aorder|ap|app|appe|appen|append|arch|arch_dr|arch_estat|arch_p|archlm|areg|areg_p|args|arima|arima_dr|arima_estat|arima_p|as|asmprobit|asmprobit_estat|asmprobit_lf|asmprobit_mfx__dlg|asmprobit_p|ass|asse|asser|assert|avplot|avplot_7|avplots|avplots_7|bcskew0|bgodfrey|binreg|bip0_lf|biplot|bipp_lf|bipr_lf|bipr_p|biprobit|bitest|bitesti|bitowt|blogit|bmemsize|boot|bootsamp|bootstrap|bootstrap_8|boxco_l|boxco_p|boxcox|boxcox_6|boxcox_p|bprobit|br|break|brier|bro|brow|brows|browse|brr|brrstat|bs|bs_7|bsampl_w|bsample|bsample_7|bsqreg|bstat|bstat_7|bstat_8|bstrap|bstrap_7|ca|ca_estat|ca_p|cabiplot|camat|canon|canon_8|canon_8_p|canon_estat|canon_p|cap|caprojection|capt|captu|captur|capture|cat|cc|cchart|cchart_7|cci|cd|censobs_table|centile|cf|char|chdir|checkdlgfiles|checkestimationsample|checkhlpfiles|checksum|chelp|ci|cii|cl|class|classutil|clear|cli|clis|clist|clo|clog|clog_lf|clog_p|clogi|clogi_sw|clogit|clogit_lf|clogit_p|clogitp|clogl_sw|cloglog|clonevar|clslistarray|cluster|cluster_measures|cluster_stop|cluster_tree|cluster_tree_8|clustermat|cmdlog|cnr|cnre|cnreg|cnreg_p|cnreg_sw|cnsreg|codebook|collaps4|collapse|colormult_nb|colormult_nw|compare|compress|conf|confi|confir|confirm|conren|cons|const|constr|constra|constrai|constrain|constraint|continue|contract|copy|copyright|copysource|cor|corc|corr|corr2data|corr_anti|corr_kmo|corr_smc|corre|correl|correla|correlat|correlate|corrgram|cou|coun|count|cox|cox_p|cox_sw|coxbase|coxhaz|coxvar|cprplot|cprplot_7|crc|cret|cretu|cretur|creturn|cross|cs|cscript|cscript_log|csi|ct|ct_is|ctset|ctst_5|ctst_st|cttost|cumsp|cumsp_7|cumul|cusum|cusum_7|cutil|d|datasig|datasign|datasigna|datasignat|datasignatu|datasignatur|datasignature|datetof|db|dbeta|de|dec|deco|decod|decode|deff|des|desc|descr|descri|describ|describe|destring|dfbeta|dfgls|dfuller|di|di_g|dir|dirstats|dis|discard|disp|disp_res|disp_s|displ|displa|display|distinct|do|doe|doed|doedi|doedit|dotplot|dotplot_7|dprobit|drawnorm|drop|ds|ds_util|dstdize|duplicates|durbina|dwstat|dydx|e|ed|edi|edit|egen|eivreg|emdef|end|en|enc|enco|encod|encode|eq|erase|ereg|ereg_lf|ereg_p|ereg_sw|ereghet|ereghet_glf|ereghet_glf_sh|ereghet_gp|ereghet_ilf|ereghet_ilf_sh|ereghet_ip|eret|eretu|eretur|ereturn|err|erro|error|est|est_cfexist|est_cfname|est_clickable|est_expand|est_hold|est_table|est_unhold|est_unholdok|estat|estat_default|estat_summ|estat_vce_only|esti|estimates|etodow|etof|etomdy|ex|exi|exit|expand|expandcl|fac|fact|facto|factor|factor_estat|factor_p|factor_pca_rotated|factor_rotate|factormat|fcast|fcast_compute|fcast_graph|fdades|fdadesc|fdadescr|fdadescri|fdadescrib|fdadescribe|fdasav|fdasave|fdause|fh_st|open|read|close|file|filefilter|fillin|find_hlp_file|findfile|findit|findit_7|fit|fl|fli|flis|flist|for5_0|form|forma|format|fpredict|frac_154|frac_adj|frac_chk|frac_cox|frac_ddp|frac_dis|frac_dv|frac_in|frac_mun|frac_pp|frac_pq|frac_pv|frac_wgt|frac_xo|fracgen|fracplot|fracplot_7|fracpoly|fracpred|fron_ex|fron_hn|fron_p|fron_tn|fron_tn2|frontier|ftodate|ftoe|ftomdy|ftowdate|g|gamhet_glf|gamhet_gp|gamhet_ilf|gamhet_ip|gamma|gamma_d2|gamma_p|gamma_sw|gammahet|gdi_hexagon|gdi_spokes|ge|gen|gene|gener|genera|generat|generate|genrank|genstd|genvmean|gettoken|gl|gladder|gladder_7|glim_l01|glim_l02|glim_l03|glim_l04|glim_l05|glim_l06|glim_l07|glim_l08|glim_l09|glim_l10|glim_l11|glim_l12|glim_lf|glim_mu|glim_nw1|glim_nw2|glim_nw3|glim_p|glim_v1|glim_v2|glim_v3|glim_v4|glim_v5|glim_v6|glim_v7|glm|glm_6|glm_p|glm_sw|glmpred|glo|glob|globa|global|glogit|glogit_8|glogit_p|gmeans|gnbre_lf|gnbreg|gnbreg_5|gnbreg_p|gomp_lf|gompe_sw|gomper_p|gompertz|gompertzhet|gomphet_glf|gomphet_glf_sh|gomphet_gp|gomphet_ilf|gomphet_ilf_sh|gomphet_ip|gphdot|gphpen|gphprint|gprefs|gprobi_p|gprobit|gprobit_8|gr|gr7|gr_copy|gr_current|gr_db|gr_describe|gr_dir|gr_draw|gr_draw_replay|gr_drop|gr_edit|gr_editviewopts|gr_example|gr_example2|gr_export|gr_print|gr_qscheme|gr_query|gr_read|gr_rename|gr_replay|gr_save|gr_set|gr_setscheme|gr_table|gr_undo|gr_use|graph|graph7|grebar|greigen|greigen_7|greigen_8|grmeanby|grmeanby_7|gs_fileinfo|gs_filetype|gs_graphinfo|gs_stat|gsort|gwood|h|hadimvo|hareg|hausman|haver|he|heck_d2|heckma_p|heckman|heckp_lf|heckpr_p|heckprob|hel|help|hereg|hetpr_lf|hetpr_p|hetprob|hettest|hexdump|hilite|hist|hist_7|histogram|hlogit|hlu|hmeans|hotel|hotelling|hprobit|hreg|hsearch|icd9|icd9_ff|icd9p|iis|impute|imtest|inbase|include|inf|infi|infil|infile|infix|inp|inpu|input|ins|insheet|insp|inspe|inspec|inspect|integ|inten|intreg|intreg_7|intreg_p|intrg2_ll|intrg_ll|intrg_ll2|ipolate|iqreg|ir|irf|irf_create|irfm|iri|is_svy|is_svysum|isid|istdize|ivprob_1_lf|ivprob_lf|ivprobit|ivprobit_p|ivreg|ivreg_footnote|ivtob_1_lf|ivtob_lf|ivtobit|ivtobit_p|jackknife|jacknife|jknife|jknife_6|jknife_8|jkstat|joinby|kalarma1|kap|kap_3|kapmeier|kappa|kapwgt|kdensity|kdensity_7|keep|ksm|ksmirnov|ktau|kwallis|l|la|lab|labe|label|labelbook|ladder|levels|levelsof|leverage|lfit|lfit_p|li|lincom|line|linktest|lis|list|lloghet_glf|lloghet_glf_sh|lloghet_gp|lloghet_ilf|lloghet_ilf_sh|lloghet_ip|llogi_sw|llogis_p|llogist|llogistic|llogistichet|lnorm_lf|lnorm_sw|lnorma_p|lnormal|lnormalhet|lnormhet_glf|lnormhet_glf_sh|lnormhet_gp|lnormhet_ilf|lnormhet_ilf_sh|lnormhet_ip|lnskew0|loadingplot|loc|loca|local|log|logi|logis_lf|logistic|logistic_p|logit|logit_estat|logit_p|loglogs|logrank|loneway|lookfor|lookup|lowess|lowess_7|lpredict|lrecomp|lroc|lroc_7|lrtest|ls|lsens|lsens_7|lsens_x|lstat|ltable|ltable_7|ltriang|lv|lvr2plot|lvr2plot_7|m|ma|mac|macr|macro|makecns|man|manova|manova_estat|manova_p|manovatest|mantel|mark|markin|markout|marksample|mat|mat_capp|mat_order|mat_put_rr|mat_rapp|mata|mata_clear|mata_describe|mata_drop|mata_matdescribe|mata_matsave|mata_matuse|mata_memory|mata_mlib|mata_mosave|mata_rename|mata_which|matalabel|matcproc|matlist|matname|matr|matri|matrix|matrix_input__dlg|matstrik|mcc|mcci|md0_|md1_|md1debug_|md2_|md2debug_|mds|mds_estat|mds_p|mdsconfig|mdslong|mdsmat|mdsshepard|mdytoe|mdytof|me_derd|mean|means|median|memory|memsize|meqparse|mer|merg|merge|mfp|mfx|mhelp|mhodds|minbound|mixed_ll|mixed_ll_reparm|mkassert|mkdir|mkmat|mkspline|ml|ml_5|ml_adjs|ml_bhhhs|ml_c_d|ml_check|ml_clear|ml_cnt|ml_debug|ml_defd|ml_e0|ml_e0_bfgs|ml_e0_cycle|ml_e0_dfp|ml_e0i|ml_e1|ml_e1_bfgs|ml_e1_bhhh|ml_e1_cycle|ml_e1_dfp|ml_e2|ml_e2_cycle|ml_ebfg0|ml_ebfr0|ml_ebfr1|ml_ebh0q|ml_ebhh0|ml_ebhr0|ml_ebr0i|ml_ecr0i|ml_edfp0|ml_edfr0|ml_edfr1|ml_edr0i|ml_eds|ml_eer0i|ml_egr0i|ml_elf|ml_elf_bfgs|ml_elf_bhhh|ml_elf_cycle|ml_elf_dfp|ml_elfi|ml_elfs|ml_enr0i|ml_enrr0|ml_erdu0|ml_erdu0_bfgs|ml_erdu0_bhhh|ml_erdu0_bhhhq|ml_erdu0_cycle|ml_erdu0_dfp|ml_erdu0_nrbfgs|ml_exde|ml_footnote|ml_geqnr|ml_grad0|ml_graph|ml_hbhhh|ml_hd0|ml_hold|ml_init|ml_inv|ml_log|ml_max|ml_mlout|ml_mlout_8|ml_model|ml_nb0|ml_opt|ml_p|ml_plot|ml_query|ml_rdgrd|ml_repor|ml_s_e|ml_score|ml_searc|ml_technique|ml_unhold|mleval|mlf_|mlmatbysum|mlmatsum|mlog|mlogi|mlogit|mlogit_footnote|mlogit_p|mlopts|mlsum|mlvecsum|mnl0_|mor|more|mov|move|mprobit|mprobit_lf|mprobit_p|mrdu0_|mrdu1_|mvdecode|mvencode|mvreg|mvreg_estat|n|nbreg|nbreg_al|nbreg_lf|nbreg_p|nbreg_sw|nestreg|net|newey|newey_7|newey_p|news|nl|nl_7|nl_9|nl_9_p|nl_p|nl_p_7|nlcom|nlcom_p|nlexp2|nlexp2_7|nlexp2a|nlexp2a_7|nlexp3|nlexp3_7|nlgom3|nlgom3_7|nlgom4|nlgom4_7|nlinit|nllog3|nllog3_7|nllog4|nllog4_7|nlog_rd|nlogit|nlogit_p|nlogitgen|nlogittree|nlpred|no|nobreak|noi|nois|noisi|noisil|noisily|note|notes|notes_dlg|nptrend|numlabel|numlist|odbc|old_ver|olo|olog|ologi|ologi_sw|ologit|ologit_p|ologitp|on|one|onew|onewa|oneway|op_colnm|op_comp|op_diff|op_inv|op_str|opr|opro|oprob|oprob_sw|oprobi|oprobi_p|oprobit|oprobitp|opts_exclusive|order|orthog|orthpoly|ou|out|outf|outfi|outfil|outfile|outs|outsh|outshe|outshee|outsheet|ovtest|pac|pac_7|palette|parse|parse_dissim|pause|pca|pca_8|pca_display|pca_estat|pca_p|pca_rotate|pcamat|pchart|pchart_7|pchi|pchi_7|pcorr|pctile|pentium|pergram|pergram_7|permute|permute_8|personal|peto_st|pkcollapse|pkcross|pkequiv|pkexamine|pkexamine_7|pkshape|pksumm|pksumm_7|pl|plo|plot|plugin|pnorm|pnorm_7|poisgof|poiss_lf|poiss_sw|poisso_p|poisson|poisson_estat|post|postclose|postfile|postutil|pperron|pr|prais|prais_e|prais_e2|prais_p|predict|predictnl|preserve|print|pro|prob|probi|probit|probit_estat|probit_p|proc_time|procoverlay|procrustes|procrustes_estat|procrustes_p|profiler|prog|progr|progra|program|prop|proportion|prtest|prtesti|pwcorr|pwd|q|s|qby|qbys|qchi|qchi_7|qladder|qladder_7|qnorm|qnorm_7|qqplot|qqplot_7|qreg|qreg_c|qreg_p|qreg_sw|qu|quadchk|quantile|quantile_7|que|quer|query|range|ranksum|ratio|rchart|rchart_7|rcof|recast|reclink|recode|reg|reg3|reg3_p|regdw|regr|regre|regre_p2|regres|regres_p|regress|regress_estat|regriv_p|remap|ren|rena|renam|rename|renpfix|repeat|replace|report|reshape|restore|ret|retu|retur|return|rm|rmdir|robvar|roccomp|roccomp_7|roccomp_8|rocf_lf|rocfit|rocfit_8|rocgold|rocplot|rocplot_7|roctab|roctab_7|rolling|rologit|rologit_p|rot|rota|rotat|rotate|rotatemat|rreg|rreg_p|ru|run|runtest|rvfplot|rvfplot_7|rvpplot|rvpplot_7|sa|safesum|sample|sampsi|sav|save|savedresults|saveold|sc|sca|scal|scala|scalar|scatter|scm_mine|sco|scob_lf|scob_p|scobi_sw|scobit|scor|score|scoreplot|scoreplot_help|scree|screeplot|screeplot_help|sdtest|sdtesti|se|search|separate|seperate|serrbar|serrbar_7|serset|set|set_defaults|sfrancia|sh|she|shel|shell|shewhart|shewhart_7|signestimationsample|signrank|signtest|simul|simul_7|simulate|simulate_8|sktest|sleep|slogit|slogit_d2|slogit_p|smooth|snapspan|so|sor|sort|spearman|spikeplot|spikeplot_7|spikeplt|spline_x|split|sqreg|sqreg_p|sret|sretu|sretur|sreturn|ssc|st|st_ct|st_hc|st_hcd|st_hcd_sh|st_is|st_issys|st_note|st_promo|st_set|st_show|st_smpl|st_subid|stack|statsby|statsby_8|stbase|stci|stci_7|stcox|stcox_estat|stcox_fr|stcox_fr_ll|stcox_p|stcox_sw|stcoxkm|stcoxkm_7|stcstat|stcurv|stcurve|stcurve_7|stdes|stem|stepwise|stereg|stfill|stgen|stir|stjoin|stmc|stmh|stphplot|stphplot_7|stphtest|stphtest_7|stptime|strate|strate_7|streg|streg_sw|streset|sts|sts_7|stset|stsplit|stsum|sttocc|sttoct|stvary|stweib|su|suest|suest_8|sum|summ|summa|summar|summari|summariz|summarize|sunflower|sureg|survcurv|survsum|svar|svar_p|svmat|svy|svy_disp|svy_dreg|svy_est|svy_est_7|svy_estat|svy_get|svy_gnbreg_p|svy_head|svy_header|svy_heckman_p|svy_heckprob_p|svy_intreg_p|svy_ivreg_p|svy_logistic_p|svy_logit_p|svy_mlogit_p|svy_nbreg_p|svy_ologit_p|svy_oprobit_p|svy_poisson_p|svy_probit_p|svy_regress_p|svy_sub|svy_sub_7|svy_x|svy_x_7|svy_x_p|svydes|svydes_8|svygen|svygnbreg|svyheckman|svyheckprob|svyintreg|svyintreg_7|svyintrg|svyivreg|svylc|svylog_p|svylogit|svymarkout|svymarkout_8|svymean|svymlog|svymlogit|svynbreg|svyolog|svyologit|svyoprob|svyoprobit|svyopts|svypois|svypois_7|svypoisson|svyprobit|svyprobt|svyprop|svyprop_7|svyratio|svyreg|svyreg_p|svyregress|svyset|svyset_7|svyset_8|svytab|svytab_7|svytest|svytotal|sw|sw_8|swcnreg|swcox|swereg|swilk|swlogis|swlogit|swologit|swoprbt|swpois|swprobit|swqreg|swtobit|swweib|symmetry|symmi|symplot|symplot_7|syntax|sysdescribe|sysdir|sysuse|szroeter|ta|tab|tab1|tab2|tab_or|tabd|tabdi|tabdis|tabdisp|tabi|table|tabodds|tabodds_7|tabstat|tabu|tabul|tabula|tabulat|tabulate|te|tempfile|tempname|tempvar|tes|test|testnl|testparm|teststd|tetrachoric|time_it|timer|tis|tob|tobi|tobit|tobit_p|tobit_sw|token|tokeni|tokeniz|tokenize|tostring|total|translate|translator|transmap|treat_ll|treatr_p|treatreg|trim|trnb_cons|trnb_mean|trpoiss_d2|trunc_ll|truncr_p|truncreg|tsappend|tset|tsfill|tsline|tsline_ex|tsreport|tsrevar|tsrline|tsset|tssmooth|tsunab|ttest|ttesti|tut_chk|tut_wait|tutorial|tw|tware_st|two|twoway|twoway__fpfit_serset|twoway__function_gen|twoway__histogram_gen|twoway__ipoint_serset|twoway__ipoints_serset|twoway__kdensity_gen|twoway__lfit_serset|twoway__normgen_gen|twoway__pci_serset|twoway__qfit_serset|twoway__scatteri_serset|twoway__sunflower_gen|twoway_ksm_serset|ty|typ|type|typeof|u|unab|unabbrev|unabcmd|update|us|use|uselabel|var|var_mkcompanion|var_p|varbasic|varfcast|vargranger|varirf|varirf_add|varirf_cgraph|varirf_create|varirf_ctable|varirf_describe|varirf_dir|varirf_drop|varirf_erase|varirf_graph|varirf_ograph|varirf_rename|varirf_set|varirf_table|varlist|varlmar|varnorm|varsoc|varstable|varstable_w|varstable_w2|varwle|vce|vec|vec_fevd|vec_mkphi|vec_p|vec_p_w|vecirf_create|veclmar|veclmar_w|vecnorm|vecnorm_w|vecrank|vecstable|verinst|vers|versi|versio|version|view|viewsource|vif|vwls|wdatetof|webdescribe|webseek|webuse|weib1_lf|weib2_lf|weib_lf|weib_lf0|weibhet_glf|weibhet_glf_sh|weibhet_glfa|weibhet_glfa_sh|weibhet_gp|weibhet_ilf|weibhet_ilf_sh|weibhet_ilfa|weibhet_ilfa_sh|weibhet_ip|weibu_sw|weibul_p|weibull|weibull_c|weibull_s|weibullhet|wh|whelp|whi|which|whil|while|wilc_st|wilcoxon|win|wind|windo|window|winexec|wntestb|wntestb_7|wntestq|xchart|xchart_7|xcorr|xcorr_7|xi|xi_6|xmlsav|xmlsave|xmluse|xpose|xsh|xshe|xshel|xshell|xt_iis|xt_tis|xtab_p|xtabond|xtbin_p|xtclog|xtcloglog|xtcloglog_8|xtcloglog_d2|xtcloglog_pa_p|xtcloglog_re_p|xtcnt_p|xtcorr|xtdata|xtdes|xtfront_p|xtfrontier|xtgee|xtgee_elink|xtgee_estat|xtgee_makeivar|xtgee_p|xtgee_plink|xtgls|xtgls_p|xthaus|xthausman|xtht_p|xthtaylor|xtile|xtint_p|xtintreg|xtintreg_8|xtintreg_d2|xtintreg_p|xtivp_1|xtivp_2|xtivreg|xtline|xtline_ex|xtlogit|xtlogit_8|xtlogit_d2|xtlogit_fe_p|xtlogit_pa_p|xtlogit_re_p|xtmixed|xtmixed_estat|xtmixed_p|xtnb_fe|xtnb_lf|xtnbreg|xtnbreg_pa_p|xtnbreg_refe_p|xtpcse|xtpcse_p|xtpois|xtpoisson|xtpoisson_d2|xtpoisson_pa_p|xtpoisson_refe_p|xtpred|xtprobit|xtprobit_8|xtprobit_d2|xtprobit_re_p|xtps_fe|xtps_lf|xtps_ren|xtps_ren_8|xtrar_p|xtrc|xtrc_p|xtrchh|xtrefe_p|xtreg|xtreg_be|xtreg_fe|xtreg_ml|xtreg_pa_p|xtreg_re|xtregar|xtrere_p|xtset|xtsf_ll|xtsf_llti|xtsum|xttab|xttest0|xttobit|xttobit_8|xttobit_p|xttrans|yx|yxview__barlike_draw|yxview_area_draw|yxview_bar_draw|yxview_dot_draw|yxview_dropline_draw|yxview_function_draw|yxview_iarrow_draw|yxview_ilabels_draw|yxview_normal_draw|yxview_pcarrow_draw|yxview_pcbarrow_draw|yxview_pccapsym_draw|yxview_pcscatter_draw|yxview_pcspike_draw|yxview_rarea_draw|yxview_rbar_draw|yxview_rbarm_draw|yxview_rcap_draw|yxview_rcapsym_draw|yxview_rconnected_draw|yxview_rline_draw|yxview_rscatter_draw|yxview_rspike_draw|yxview_spike_draw|yxview_sunflower_draw|zap_s|zinb|zinb_llf|zinb_plf|zip|zip_llf|zip_p|zip_plf|zt_ct_5|zt_hc_5|zt_hcd_5|zt_is_5|zt_iss_5|zt_sho_5|zt_smp_5|ztbase_5|ztcox_5|ztdes_5|ztereg_5|ztfill_5|ztgen_5|ztir_5|ztjoin_5|ztnb|ztnb_p|ztp|ztp_p|zts_5|ztset_5|ztspli_5|ztsum_5|zttoct_5|ztvary_5|ztweib_5)\b
    - constant.number: \b[+-]?([0-9]+(\.[0-9]+)?|\.[0-9]+|\.)([eE][+-]?[0-9]+)?[i]?\b
    - symbol.operator: -|==|<=|>=|<|>|&|!=
    - symbol.operator: \*|\+|\^|/|!|~|=|~=
    - symbol.brackets: '[\{\}\(\)\[\]]'
    - identifier: '%-?\d{1,2}(\.\d{1,2})?[gfe]c?'
    - identifier: '%(21x|16H|16L|8H|8L)'
    - identifier: '%-?(tc|tC|td|tw|tm|tq|th|ty|tg).{0,32}'
    - identifier: '%[-~]?\d{1,4}s'
    - identifier.macro: \$\w{1,32}
    - identifier.macro:
        start: '`'
        end: "'"
        rules: []
    - comment:
        start: ///?
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment:
        start: /\*
        end: \*/
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment:
        start: ^\s*\*
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: svelte -----
- comment:
    start: (?i)^```svelte$
    end: ^```$
    rules:
    - default:
        start: <script>
        end: </script>
        rules:
        - include: javascript
    - default:
        start: <script lang="ts">
        end: </script>
        rules:
        - include: typescript
    - default:
        start: <style.*?>
        end: </style.*?>
        rules:
        - include: css
    - default:
        start: ^
        end: $
        rules:
        - include: html5
# ----- Rule set for language: swift -----
- comment:
    start: (?i)^```swift$
    end: ^```$
    rules:
    - type: \b(_)\b
    - symbol.operator: ([.:;,+*|=!?\\%]|<|>|/|-|&)
    - statement.declaration: \b(associatedtype|class|deinit|enum|extension|fileprivate|func|import|init)\b
    - statement.declaration: 
        \b(inout|internal|let|open|operator|private|protocol|public|static|struct|subscript|typealias|var)\b
    - statement: \b(break|case|continue|default|defer|do|else|fallthrough|for|guard)\b
    - statement: \b(if|inif|repeat|return|switch|where|while)\b
    - statement.reserved: 
        \b(associativity|convenience|dynamic|didSet|final|get|infix|indirect|lazy|left|mutating)\b
    - statement.reserved: \b(none|nonmutating|override|postfix|precedence|prefix|Protocol|required)\b
    - statement.reserved: \b(right|set|Type|unowned|weak|willSet)\b
    - type: \b(as|Any|catch|is|rethrows|super|self|throw|throws|try)\b
    - statement.built_in: 
        \b(abs|advance|alignof|alignofValue|anyGenerator|assert|assertionFailure|bridgeFromObjectiveC)\b
    - statement.built_in: 
        \b(bridgeFromObjectiveCUnconditional|bridgeToObjectiveC|bridgeToObjectiveCUnconditional|contains)\b
    - statement.built_in: 
        \b(count|countElements|countLeadingZeros|debugPrint|debugPrintln|distance|dropFirst|dropLast|dump|encodeBitsAsWords)\b
    - statement.built_in: 
        \b(enumerate|equal|fatalError|filter|find|getBridgedObjectiveCType|getVaList|indices|insertionSort)\b
    - statement.built_in: 
        \b(isBridgedToObjectiveC|isBridgedVerbatimToObjectiveC|isUniquelyReferenced|isUniquelyReferencedNonObjC)\b
    - statement.built_in: 
        \b(join|lexicographicalCompare|map|max|maxElement|min|minElement|numericCast|overlaps|partition|posix)\b
    - statement.built_in: 
        \b(precondition|preconditionFailure|print|println|quickSort|readLine|reduce|reflect)\b
    - statement.built_in: 
        \b(reinterpretCast!reverse|roundUpToAlignment|sizeof|sizeofValue|sort|split|startsWith|stride)\b
    - statement.built_in: 
        \b(strideof|strideofValue|swap|toString|transcode|underestimateCount|unsafeAddressOf|unsafeBitCast)\b
    - statement.built_in: 
        \b(unsafeDowncast|unsafeUnwrap|unsafeReflect|withExtendedLifetime|withObjectAtPlusZero|withUnsafePointer)\b
    - statement.built_in: 
        \b(withUnsafePointerToObject|withUnsafeMutablePointer|withUnsafeMutablePointers|withUnsafePointer)\b
    - statement.built_in: \b(withUnsafePointers|withVaList|zip)\b
    - statement.meta: 
        \@\b(autoclosure|available|convention|exported|IBAction|IBDesignable|IBOutlet|IBInspectable|infix)\b
    - statement.meta: 
        \@\b(lazy|noreturn|noescape|nonobjc|NSApplicationMain|NSCopying|NSManaged|objc|prefix|postfix)\b
    - statement.meta: \@\b(required|testable|warn_unused_result|UIApplicationMain)\b
    - preproc: ^[[:space:]]*#[[:space:]]*(define|else|elseif|endif|if|selector)\b
    - preproc.DebugIdentifier: \b(__COLUMN__|__FILE__|__FUNCTION__|__LINE__)\b
    - preproc.DebugIdentifier: ^[[:space:]]*#[[:space:]]*(column|file|function|line)\b
    - constant: \b(true|false|nil)
    - constant.number: ([0-9]+)
    - type.storage: \b((U)?Int(8|16|32|64))\b
    - type.storage: \b(Int|UInt|String|Bit|Bool|Character|Double|Optional|Float|Range)\b
    - type.storage: \b(AnyObject)\b
    - type.collections: \b(Array|Dictionary|Set)\b
    - type.ctypes: 
        \b(CBool|CChar|CUnsignedChar|CShort|CUnsignedShort|CInt|CUnsignedInt|CLong|CUnsignedLong|CLongLong|CUnsignedLongLong|CWideChar|CChar16|CChar32|CFloat|CDouble)\b
    - constant.string:
        start: \"
        end: \"
        skip: \\.
        rules:
        - constant.specialChar: (\\0|\\\\|\\t|\\n|\\r|\\"|\\')
        - constant.interpolation: \\\([[:graph:]]*\)
        - constant.unicode: \\u\{[[:xdigit:]]+}
    - comment.shebang: ^(#!).*
    - comment.doc: (///).*
    - comment.line: //.*
    - comment.block:
        start: /\*
        end: \*/
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment.block:
        start: /\*\*
        end: \*/
        rules:
        - todo: (TODO|XXX|FIXME):?
    - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: systemd -----
- comment:
    start: (?i)^```systemd$
    end: ^```$
    rules:
    - statement: 
        ^(Accept|After|Alias|AllowIsolate|Also|ANSI_COLOR|_AUDIT_LOGINUID|_AUDIT_SESSION|Backlog|Before|BindIPv6Only|BindsTo|BindToDevice|BlockIOReadBandwidth|BlockIOWeight|BlockIOWriteBandwidth|_BOOT_ID|Broadcast|BUG_REPORT_URL|BusName|Capabilities|CapabilityBoundingSet|CHASSIS|cipher|class|_CMDLINE|CODE_FILE|CODE_FUNC|CODE_LINE|_COMM|Compress|ConditionACPower|ConditionCapability|ConditionDirectoryNotEmpty|ConditionFileIsExecutable|ConditionFileNotEmpty|ConditionHost|ConditionKernelCommandLine|ConditionNull|ConditionPathExists|ConditionPathExistsGlob|ConditionPathIsDirectory|ConditionPathIsMountPoint|ConditionPathIsReadWrite|ConditionPathIsSymbolicLink|ConditionSecurity|ConditionVirtualization|Conflicts|ControlGroup|ControlGroupAttribute|ControlGroupModify|ControlGroupPersistent|controllers|Controllers|CPE_NAME|CPUAffinity|CPUSchedulingPolicy|CPUSchedulingPriority|CPUSchedulingResetOnFork|CPUShares|CrashChVT|CrashShell|__CURSOR|debug|DefaultControllers|DefaultDependencies|DefaultLimitAS|DefaultLimitCORE|DefaultLimitCPU|DefaultLimitDATA|DefaultLimitFSIZE|DefaultLimitLOCKS|DefaultLimitMEMLOCK|DefaultLimitMSGQUEUE|DefaultLimitNICE|DefaultLimitNOFILE|DefaultLimitNPROC|DefaultLimitRSS|DefaultLimitRTPRIO|DefaultLimitRTTIME|DefaultLimitSIGPENDING|DefaultLimitSTACK|DefaultStandardError|DefaultStandardOutput|Description|DeviceAllow|DeviceDeny|DirectoryMode|DirectoryNotEmpty|Documentation|DumpCore|entropy|Environment|EnvironmentFile|ERRNO|event_timeout|_EXE|ExecReload|ExecStart|ExecStartPost|ExecStartPre|ExecStop|ExecStopPost|ExecStopPre|filter|FONT|FONT_MAP|FONT_UNIMAP|ForwardToConsole|ForwardToKMsg|ForwardToSyslog|FreeBind|freq|FsckPassNo|fstab|_GID|Group|GuessMainPID|HandleHibernateKey|HandleLidSwitch|HandlePowerKey|HandleSuspendKey|hash|HibernateKeyIgnoreInhibited|HOME_URL|_HOSTNAME|ICON_NAME|ID|IdleAction|IdleActionSec|ID_LIKE|ID_MODEL|ID_MODEL_FROM_DATABASE|IgnoreOnIsolate|IgnoreOnSnapshot|IgnoreSIGPIPE|InaccessibleDirectories|InhibitDelayMaxSec|init|IOSchedulingClass|IOSchedulingPriority|IPTOS|IPTTL|JobTimeoutSec|JoinControllers|KeepAlive|KEYMAP|KEYMAP_TOGGLE|KillExcludeUsers|KillMode|KillOnlyUsers|KillSignal|KillUserProcesses|LidSwitchIgnoreInhibited|LimitAS|LimitCORE|LimitCPU|LimitDATA|LimitFSIZE|LimitLOCKS|LimitMEMLOCK|LimitMSGQUEUE|LimitNICE|LimitNOFILE|LimitNPROC|LimitRSS|LimitRTPRIO|LimitRTTIME|LimitSIGPENDING|LimitSTACK|link_priority|valueListenDatagram|ListenFIFO|ListenMessageQueue|ListenNetlink|ListenSequentialPacket|ListenSpecial|ListenStream|LogColor|LogLevel|LogLocation|LogTarget|luks|_MACHINE_ID|MakeDirectory|Mark|MaxConnections|MaxFileSec|MaxLevelConsole|MaxLevelKMsg|MaxLevelStore|MaxLevelSyslog|MaxRetentionSec|MemoryLimit|MemorySoftLimit|MESSAGE|MESSAGE_ID|MessageQueueMaxMessages|MessageQueueMessageSize|__MONOTONIC_TIMESTAMP|MountFlags|NAME|NAutoVTs|Nice|NonBlocking|NoNewPrivileges|NotifyAccess|OnActiveSec|OnBootSec|OnCalendar|OnFailure|OnFailureIsolate|OnStartupSec|OnUnitActiveSec|OnUnitInactiveSec|OOMScoreAdjust|Options|output|PAMName|PartOf|PassCredentials|PassSecurity|PathChanged|PathExists|PathExistsGlob|PathModified|PermissionsStartOnly|_PID|PIDFile|PipeSize|PowerKeyIgnoreInhibited|PRETTY_HOSTNAME|PRETTY_NAME|Priority|PRIORITY|PrivateNetwork|PrivateTmp|PropagatesReloadTo|pss|RateLimitBurst|RateLimitInterval|ReadOnlyDirectories|ReadWriteDirectories|__REALTIME_TIMESTAMP|ReceiveBuffer|RefuseManualStart|RefuseManualStop|rel|ReloadPropagatedFrom|RemainAfterExit|RequiredBy|Requires|RequiresMountsFor|RequiresOverridable|Requisite|RequisiteOverridable|ReserveVT|ResetControllers|Restart|RestartPreventExitStatus|RestartSec|RootDirectory|RootDirectoryStartOnly|RuntimeKeepFree|RuntimeMaxFileSize|RuntimeMaxUse|RuntimeWatchdogSec|samples|scale_x|scale_y|Seal|SecureBits|_SELINUX_CONTEXT|SendBuffer|SendSIGKILL|Service|ShowStatus|ShutdownWatchdogSec|size|SmackLabel|SmackLabelIPIn|SmackLabelIPOut|SocketMode|Sockets|SourcePath|_SOURCE_REALTIME_TIMESTAMP|SplitMode|StandardError|StandardInput|StandardOutput|StartLimitAction|StartLimitBurst|StartLimitInterval|static_node|StopWhenUnneeded|Storage|string_escape|none|replaceSuccessExitStatus|SupplementaryGroups|SUPPORT_URL|SuspendKeyIgnoreInhibited|SyslogFacility|SYSLOG_FACILITY|SyslogIdentifier|SYSLOG_IDENTIFIER|SyslogLevel|SyslogLevelPrefix|SYSLOG_PID|SystemCallFilter|SYSTEMD_ALIAS|_SYSTEMD_CGROUP|_SYSTEMD_OWNER_UID|SYSTEMD_READY|_SYSTEMD_SESSION|_SYSTEMD_UNIT|_SYSTEMD_USER_UNIT|SYSTEMD_WANTS|SystemKeepFree|SystemMaxFileSize|SystemMaxUse|SysVStartPriority|TCPCongestion|TCPWrapName|timeout|TimeoutSec|TimeoutStartSec|TimeoutStopSec|TimerSlackNSec|Transparent|_TRANSPORT|tries|TTYPath|TTYReset|TTYVHangup|TTYVTDisallocate|Type|_UID|UMask|Unit|User|UtmpIdentifier|VERSION|VERSION_ID|WantedBy|Wants|WatchdogSec|What|Where|WorkingDirectory)=
    - preproc: ^\.include\>
    - symbol: '='
    - special: ^\[(Unit|Install|Service|Socket|Timer)\]
    - identifier.class: \$MAINPID
    - constant.bool: \b(true|false)\b
    - comment: (^|[[:space:]])#([^{].*)?$
    - indent-char.whitespace: '[[:space:]]+$'
    - indent-char: "\t+ +| +\t+"
# ----- Rule set for language: tcl -----
- comment:
    start: (?i)^```tcl$
    end: ^```$
    rules:
    - statement: 
        \b(after|append|array|auto_execok|auto_import|auto_load|auto_load_index|auto_qualify|binary|break|case|catch|cd|clock|close|concat|continue|else|elseif|encoding|eof|error|eval|exec|exit|expr|fblocked|fconfigure|fcopy|file|fileevent|flush|for|foreach|format|gets|glob|global|history|if|incr|info|interp|join|lappend|lindex|linsert|list|llength|load|lrange|lreplace|lsearch|lset|lsort|namespace|open|package|pid|puts|pwd|read|regexp|regsub|rename|return|scan|seek|set|socket|source|split|string|subst|switch|tclLog|tell|time|trace|unknown|unset|update|uplevel|upvar|variable|vwait|while)\b
    - statement: \b(array anymore|array donesearch|array exists|array get|array names|array
        nextelement|array set|array size|array startsearch|array statistics|array
        unset)\b
    - statement: \b(string bytelength|string compare|string equal|string first|string
        index|string is|string last|string length|string map|string match|string range|string
        repeat|string replace|string to|string tolower|string totitle|string toupper|string
        trim|string trimleft|string trimright|string will|string wordend|string wordstart)\b
    - statement: 
        \b(alarm|auto_load_pkg|bsearch|catclose|catgets|catopen|ccollate|cconcat|cequal|chgrp|chmod|chown|chroot|cindex|clength|cmdtrace|commandloop|crange|csubstr|ctoken|ctype|dup|echo|execl|fcntl|flock|fork|fstat|ftruncate|funlock|host_info|id|infox|keyldel|keylget|keylkeys|keylset|kill|lassign|lcontain|lempty|lgets|link|lmatch|loadlibindex|loop|lvarcat|lvarpop|lvarpush|max|min|nice|pipe|profile|random|readdir|replicate|scancontext|scanfile|scanmatch|select|server_accept|server_create|signal|sleep|sync|system|tclx_findinit|tclx_fork|tclx_load_tndxs|tclx_sleep|tclx_system|tclx_wait|times|translit|try_eval|umask|wait)\b
    - identifier.class: proc[[:space:]]|(\{|\})
    - symbol.operator: (\(|\)|\;|`|\\|\$|<|>|!|=|&|\|)
    - constant.number: \b[0-9]+(\.[0-9]+)?\b
    - constant.string: "\"(\\\\.|[^\"])*\"|'(\\\\.|[^'])*'"
    - identifier.var: \$\{?[0-9A-Z_!@#$*?-]+\}?
    - comment: (^|;)[[:space:]]*#.*
    - indent-char.whitespace: '[[:space:]]+$'
# ----- Rule set for language: terraform -----
- comment:
    start: (?i)^```terraform$
    end: ^```$
    rules:
    - identifier: \b(var|local|module|data|path|terraform)\b
    - special: \b(resource|provider|variable|output|locals|module|terraform)\b
    - type.keyword: \b(any|string|number|bool)\b
    - statement: 
        \b(abs|ceil|floor|log|max|min|parseint|pow|signum|chomp|format|formatlist|indent|join|lower|regex|regexall|replace|split|strrev|substr|title|trim|trimprefix|trimsuffix|trimspace|upper|alltrue|anytrue|chunklist|coalesce|coalescelist|compact|concat|contains|distinct|element|flatten|index|keys|length|list|lookup|map|matchkeys|merge|one|range|reverse|setintersection|setproduct|setsubtract|setunion|slice|sort|sum|transpose|values|zipmap|base64decode|base64encode|base64gzip|csvdecode|jsondecode|jsonencode|textdecodebase64|textencodebase64|urlencode|yamldecode|yamlencode|abspath|dirname|pathexpand|basename|file|fileexists|fileset|filebase64|templatefile|formatdate|timeadd|timestamp|base64sha256|base64sha512|bcrypt|filebase64sha256|filebase64sha512|filemd5|filesha1|filesha256|filesha512|md5|rsadecrypt|sha1|sha256|sha512|uuid|uuidv5|cidrhost|cidrnetmask|cidrsubnet|cidrsubnets|can|defaults|nonsensitive|sensitive|tobool|tolist|tomap|tonumber|toset|tostring|try)\b
    - symbol.operator: ([~^.:;,+*|=!\%@]|<|>|/|-|&)
    - symbol.brackets: ([(){}]|\[|\])
    - constant.number: \b([0-9]+|0x[0-9a-fA-F]*)\b|'.'
    - constant.bool: \b(true|false|null)\b
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: '%.'
        - constant.specialChar: \\[abfnrtv'\"\\]
        - constant.specialChar: \\([0-7]{3}|x[A-Fa-f0-9]{2}|u[A-Fa-f0-9]{4}|U[A-Fa-f0-9]{8})
    - constant.string:
        start: "''"
        end: "''"
        skip: \\.
        rules:
        - constant.specialChar: '%.'
        - constant.specialChar: \\[abfnrtv'\"\\]
        - constant.specialChar: \\([0-7]{3}|x[A-Fa-f0-9]{2}|u[A-Fa-f0-9]{4}|U[A-Fa-f0-9]{8})
    - comment:
        start: '#|//'
        end: $\n?
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment:
        start: /\*
        end: \*/
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: tex -----
- comment:
    start: (?i)^```tex$
    end: ^```$
    rules:
    - identifier:
        start: \{
        end: \}
        rules: []
    - identifier:
        start: \[
        end: \]
        rules: []
    - constant.number: \b[0-9]+(\.[0-9]+)?([[:space:]](pt|mm|cm|in|ex|em|bp|pc|dd|cc|nd|nc|sp))?\b
    - default: '[{}\[\]]'
    - special: '[&\\]'
    - statement: \\@?[a-zA-Z_]+
    - statement: \\%
    - comment:
        start: '[^\\]%|^%'
        end: $
        rules: []
    - comment:
        start: \\begin\{comment\}
        end: \\end\{comment\}
        rules: []
# ----- Rule set for language: toml -----
- comment:
    start: (?i)^```toml$
    end: ^```$
    rules:
    - symbol: '[=,\.]'
    - symbol.brackets: '[{\[\]}]'
    - constant.string:
        start: '"""'
        end: \"{3,5}
        skip: \\.
        rules:
        - constant.specialChar: \\u[[:xdigit:]]{4}
        - constant.specialChar: \\U[[:xdigit:]]{8}
        - constant.specialChar: \\[btnfr"\\]
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\u[[:xdigit:]]{4}
        - constant.specialChar: \\U[[:xdigit:]]{8}
        - constant.specialChar: \\[btnfr"\\]
    - constant.string:
        start: "'''"
        end: "'{3,5}"
        rules: []
    - constant.string:
        start: "'"
        end: "'"
        rules: []
    - constant.number: '[+-]?(\d+_)*\d+\b'
    - constant.number: (0x([[:xdigit:]]+_)*[[:xdigit:]]+|0o([0-7]_)*[0-7]+|0b([01]+_)*[01]+)
    - constant.number: '[+-]?(\d+_)*\d+\.(\d+_)*\d+'
    - constant.number: '[+-]?(\d+_)*\d+(\.(\d+_)*\d+)?[Ee][+-]?(\d+_)*\d+'
    - constant.number: (\+|-)(inf|nan)
    - identifier: \b[A-Za-z_][A-Za-z0-9_-]*\b
    - constant.bool.true: \btrue\b
    - constant.bool.false: \bfalse\b
    - constant.number: \b(inf|nan)\b
    - constant: \d+-\d{2}-\d{2}([T ]\d{2}:\d{2}:\d{2}(\.\d+)?([+-]\d{2}:\d{2}|Z)?)?
    - constant: \d{2}:\d{2}:\d{2}(\.\d+)?
    - comment:
        start: '#'
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: twig -----
- comment:
    start: (?i)^```twig$
    end: ^```$
    rules:
    - include: html
    - symbol.tag:
        start: \{\{[[:space:]]
        end: '[[:space:]]\}\}'
        rules:
        - identifier: 
            \b(abs|batch|capitalize|convert|encoding|date(_modify)?|default|escape|first|format|join|json_encode|keys|last|length|lower|merge|nl2br|number_format|raw|replace|reverse|round|slice|sort|split|striptags|title|trim|upper|url_encode)\b
        - identifier.class: 
            \b(attribute|block|constant|cycle|date|dump|include|max|min|parent|random|range|source|template_from_string)\b
        - type.keyword: 
            \b(and|as|constant|defined|divisibleby|empty|even|false|in|is|iterable|not|null|odd|or|same(as)?|true|with)\b
        - symbol.operator: '[.:;,+*?|=!\%]|<|>|/|-|&'
        - symbol.brackets: '[(){}]|\[|\]'
        - constant.number: \b[0-9]+\b|\b0x[0-9A-Fa-f]+\b
        - constant.string:
            start: '"'
            end: '"'
            skip: \\
            rules:
            - constant.specialChar: \\.
        - constant.string:
            start: "'"
            end: "'"
            skip: \\
            rules:
            - constant.specialChar: \\.
    - symbol.tag:
        start: \{%[[:space:]]
        end: '[[:space:]]%\}'
        rules:
        - identifier: 
            \b(abs|batch|capitalize|convert|encoding|date(_modify)?|default|escape|first|format|join|json_encode|keys|last|length|lower|merge|nl2br|number_format|raw|replace|reverse|round|slice|sort|split|striptags|title|trim|upper|url_encode)\b
        - identifier.class: 
            \b(attribute|block|constant|cycle|date|dump|include|max|min|parent|random|range|source|template_from_string)\b
        - type.keyword: 
            \b(and|as|constant|defined|divisibleby|empty|even|false|in|is|iterable|not|null|odd|or|same(as)?|true|with)\b
        - symbol.operator: '[.:;,+*?|=!\%]|<|>|/|-|&'
        - symbol.brackets: '[(){}]|\[|\]'
        - constant.number: \b[0-9]+\b|\b0x[0-9A-Fa-f]+\b
        - constant.string:
            start: '"'
            end: '"'
            skip: \\
            rules:
            - constant.specialChar: \\.
        - constant.string:
            start: "'"
            end: "'"
            skip: \\
            rules:
            - constant.specialChar: \\.
    - comment:
        start: \{#
        end: '#\}'
        rules: []
# ----- Rule set for language: typescript -----
- comment:
    start: (?i)^```typescript$
    end: ^```$
    rules:
    - constant.number: \b[-+]?([1-9][0-9]*|0[0-7]*|0x[0-9a-fA-F]+)([uU][lL]?|[lL][uU]?)?\b
    - constant.number: \b[-+]?([0-9]+\.[0-9]*|[0-9]*\.[0-9]+)([EePp][+-]?[0-9]+)?[fFlL]?
    - constant.number: \b[-+]?([0-9]+[EePp][+-]?[0-9]+)[fFlL]?
    - identifier: '[A-Za-z_][A-Za-z0-9_]*[[:space:]]*[(]'
    - statement: \b(abstract|as|async|await|break|case|catch|class|const|constructor|continue)\b
    - statement: 
        \b(debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from)\b
    - statement: 
        \b(function|get|if|implements|import|in|instanceof|interface|is|let|module|namespace)\b
    - statement: 
        \b(new|of|package|private|protected|public|require|return|set|static|super|switch)\b
    - statement: \b(this|throw|try|type|typeof|var|void|while|with|yield)\b
    - constant: \b(false|true|null|undefined|NaN)\b
    - type: \b(Array|Boolean|Date|Enumerator|Error|Function|Math)\b
    - type: \b(Number|Object|RegExp|String|Symbol)\b
    - type: \b(any|unknown|boolean|never|number|string|symbol)\b
    - statement: '[-+/*=<>!~%?:&|]'
    - constant: /[^*]([^/]|(\\/))*[^\\]/[gim]*
    - constant: \\[0-7][0-7]?[0-7]?|\\x[0-9a-fA-F]+|\\[bfnrt'"\?\\]
    - comment:
        start: //
        end: $
        rules: []
    - comment:
        start: /\*
        end: \*/
        rules:
        - todo: TODO:?
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: '`'
        end: '`'
        rules:
        - constant.specialChar: \\.
        - identifier: \x24\{.*?\}
# ----- Rule set for language: v -----
- comment:
    start: (?i)^```v$
    end: ^```$
    rules:
    - preproc: \b(module|import)\b
    - statement: \b(if|else|for|match|select|defer|or|unsafe)\b
    - statement: \b(break|continue|goto|return)\b
    - type.keyword: \b(assert|const|enum|fn|struct|interface|type)\b
    - type.keyword: \b(pub|mut|__global)\b
    - preproc: \$\b(if|else)\b
    - identifier.os: 
        \b(mac|macos|linux|windows|freebsd|openbsd|netbsd|dragonfly|android|solaris|haiku)\b
    - identifier.compiler: \b(gcc|tinyc|clang|mingw|msvc|cplusplus)\b
    - identifier.platform: \b(amd64|aarch64|x64|x32|little_endian|big_endian)\b
    - identifier.other: \b(debug|test|js|glibc|prealloc|no_bounds_checking)\b
    - identifier.class: \b([A-Z][A-Za-z0-9_]*)\b
    - identifier.function: \b([a-z_]+\()
    - symbol.operator: \b(i[ns])\b|[-+/*<>!=~*%&:|,.?]
    - symbol.attribute:
        start: ^\[
        end: \]$
        rules:
        - default: .*
        - symbol: 
            \b(deprecated|direct_array_access|if|inline|live|ref_only|typedef|windows_stdcall)\b
    - type: \b(byte|u(16|32|64|128)|i(nt|8|16|64|128)|f(32|64))\b
    - type: \b(bool|cha[nr]|map|rune|string)\b
    - type: \b(any(_int|_float)?|size_t|(uint|byte|char|void)ptr)\b
    - constant.bool: \b(true|false)\b
    - constant.none: \b(none)\b
    - symbol.brackets: (\{|\})
    - symbol.brackets: (\(|\))
    - symbol.brackets: (\[|\])
    - constant.number: \b(0b[01_]+)\b
    - constant.number: \b(0o[0-7_]+)\b
    - constant.number: \b(0x[0-9a-fA-F_]+)\b
    - constant.number: \b([0-9_]+)\b
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: '%.'
        - constant.specialChar: \\[abefnrtv'\"\\]
        - constant.specialChar: \\([0-7]{3}|x[A-Fa-f0-9]{2}|u[A-Fa-f0-9]{4}|U[A-Fa-f0-9]{8})
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: '%.'
        - constant.specialChar: \\[abefnrtv'\"\\]
        - constant.specialChar: \\([0-7]{3}|x[A-Fa-f0-9]{2}|u[A-Fa-f0-9]{4}|U[A-Fa-f0-9]{8})
    - constant.string:
        start: '`'
        end: '`'
        rules: []
    - comment:
        start: //
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment:
        start: /\*
        end: \*/
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: vala -----
- comment:
    start: (?i)^```vala$
    end: ^```$
    rules:
    - type: 
        \b(float|double|bool|u?char|u?int(8|16|32|64)?|u?short|u?long|void|s?size_t|unichar)\b
    - identifier.class: '[A-Za-z_][A-Za-z0-9_]*[[:space:]]*[()]'
    - statement: \b(for|if|while|do|else|case|default|switch|try|throw|catch)\b
    - statement: \b(inline|typedef|struct|enum|union|extern|static|const)\b
    - statement: \b(operator|new|delete|return|null)\b
    - statement: \b(class|override|private|public|signal|this|weak)\b
    - special: \b(goto|break|continue)\b
    - constant.bool: \b(true|false)\b
    - constant.number: \b([0-9]+)\b
    - symbol.operator: '[\-+/*=<>?:!~%&|]|->'
    - constant.string: "\"(\\\\.|[^\"])*\"|'(\\\\.|[^'])*'"
    - comment: (^|[[:space:]])//.*
    - comment:
        start: /\*
        end: \*/
        rules: []
    - todo: TODO:?
    - indent-char.whitespace: '[[:space:]]+$'
    - indent-char: "\t+ +| +\t+"
# ----- Rule set for language: verilog -----
- comment:
    start: (?i)^```verilog$
    end: ^```$
    rules:
    - preproc: \b(module|package|program|endmodule|endpackage|endprogram)\b
    - type.keyword: \b(task|interface|class|endtask|endinterface|endclass)\b
    - special: \$[0-9A-Za-z_]+
    - statement: 
        \b(always|and|assign|automatic|begin|buf|bufif0|bufif1|case|casex|casez|cell|cmos|config)\b
    - statement: 
        \b(deassign|default|defparam|design|disable|edge|else|end|endcase|endconfig|endfunction|endgenerate)\b
    - statement: 
        \b(endprimitive|endspecify|endtable|event|for|force|forever|fork|function|generate)\b
    - statement: 
        \b(genvar|highz0|highz1|if|iff|ifnone|incdir|include|initial|input|instance|join)\b
    - statement: 
        \b(large|liblist|library|localparam|macromodule|medium|nand|negedge|nmos|nor|noshowcancelled)\b
    - statement: 
        \b(not|notif0|notif1|null|or|output|parameter|pmos|posedge|primitive|pull0|pull1|pulldown|pullup)\b
    - statement: 
        \b(pulsestyle_onevent|pulsestyle_ondetect|rcmos|realtime|reg|release|repeat|rnmos|rpmos|rtran)\b
    - statement: 
        \b(rtranif0|rtranif1|scalared|showcancelled|small|specify|specparam|strong0|strong1|supply0)\b
    - statement: 
        \b(supply1|table|time|tran|tranif0|tranif1|tri0|tri1|triand|trior|trireg|use|uwire)\b
    - statement: \b(vectored|wait|wand|weak0|weak1|while|wor|xnor|xor)\b
    - statement: 
        \b(alias|always_comb|always_ff|always_latch|assert|assume|before|bind|bins|binsof|break)\b
    - statement: 
        \b(chandle|clocking|const|constraint|context|continue|cover|covergroup|coverpoint|cross|dist|do)\b
    - statement: \b(endclocking|endgroup|endproperty|endsequence|enum)\b
    - statement: 
        \b(expect|export|extends|extern|final|first_match|foreach|forkjoin|ignore_bins|illegal_bins|import)\b
    - statement: \b(inside|intersect|join_any|join_none|local|longint|matches|modport|new)\b
    - statement: 
        \b(packed|priority|property|protected|pure|rand|randc|randcase|randsequence|ref|return)\b
    - statement: \b(sequence|solve|static|struct|super|tagged|this|throughout|timeprecision)\b
    - statement: \b(timeunit|type|typedef|union|unique|virtual|wait_order|wildcard|with|within)\b
    - type.keyword: 
        \b(int|integer|logic|wire|tri|unsigned|signed|inout|var|shortint|shortreal|real|void|string|bit|byte)\b
    - constant.number: \b[0-9]+\b
    - constant.number: \b'[su]?[dboh][0-9xzXZa-fA-F]+\b
    - special: \.((\*)|([A-Za-z][A-Za-z0-9_]*))
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - comment:
        start: //
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment:
        start: /\*
        end: \*/
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: vhdl -----
- comment:
    start: (?i)^```vhdl$
    end: ^```$
    rules:
    - type: 
        (?i)\b(string|integer|natural|positive|(un)?signed|std_u?logic(_vector)?|bit(_vector)?|boolean|u?x01z?|array|range)\b
    - identifier: (?i)library[[:space:]]+[a-zA-Z_0-9]+
    - identifier: (?i)use[[:space:]]+[a-zA-Z_0-9\.]+
    - identifier: (?i)component[[:space:]]+[a-zA-Z_0-9]+
    - identifier: 
        (?i)(architecture|configuration)[[:space:]]+[a-zA-Z_0-9]+[[:space:]]+of[[:space:]]+[a-zA-Z_0-9]+
    - identifier: (?i)(entity|package)[[:space:]]+[a-zA-Z_0-9]+[[:space:]]+is
    - identifier: 
        (?i)end[[:space:]]+((architecture|entity|component|process|package|generate)[[:space:]]+)?[a-zA-Z_0-9]+
    - statement: (?i)\b(abs|access|after|alias|all|and|architecture|assert|attribute)\b
    - statement: (?i)\b(begin|block|body|buffer|bus|case|component|configuration|constant)\b
    - statement: (?i)\b(disconnect|downto|else|elsif|end|entity|exit)\b
    - statement: (?i)\b(file|for|function|generate|generic|guarded)\b
    - statement: (?i)\b(if|impure|in|inertial|inout|is)\b
    - statement: (?i)\b(label|library|linkage|literal|loop|map|mod)\b
    - statement: (?i)\b(nand|new|next|nor|not|null|of|on|open|or|others|out)\b
    - statement: (?i)\b(package|port|postponed|procedure|process|pure)\b
    - statement: (?i)\b(range|record|register|reject|rem|report|return|rol|ror)\b
    - statement: (?i)\b(select|severity|shared|signal|sla|sll|sra|srl|subtype)\b
    - statement: (?i)\b(then|to|transport|type|unaffected|units|until|use)\b
    - statement: (?i)\b(variable|wait|when|while|with|xnor|xor)\b
    - statement: 
        (?i)'(base|left|right|high|low|pos|val|succ|pred|leftof|rightof|image|(last_)?value)
    - statement: (?i)'((reverse_)?range|length|ascending|event|stable)
    - statement: (?i)'(simple|path|instance)_name
    - statement: (?i)\b(std_match|(rising|falling)_edge|is_x)\b
    - statement: (?i)\bto_(unsigned|signed|integer|u?x01z?|stdu?logic(vector)?)\b
    - symbol.operator: (\+|-|\*|/|&|<|>|=|\.|:)
    - constant.number: (?i)'([0-1]|u|x|z|w|l|h|-)'|[box]?"([0-1a-fA-F]|u|x|z|w|l|h|-)+"
    - constant.number: (?i)\b[0-9\._]+(e[\-]?[0-9]+)?( ?[fpnum]?s)?\b
    - constant.bool: (?i)\b(true|false)\b
    - constant: (?i)\b(note|warning|error|failure)\b
    - constant.string: '"[^"]*"'
    - comment: --.*
# ----- Rule set for language: vi -----
- comment:
    start: (?i)^```vi$
    end: ^```$
    rules:
    - identifier: '[A-Za-z_][A-Za-z0-9_]*[(]+[A-Za-z0-9_:.,\s]*[)]+'
    - special: '[()]+'
    - statement: \b([nvxsoilc]?(nore|un)?map|[nvlx]n|[ico]?no|[cilovx][um]|s?unm)\b
    - statement: \b(snor|nun|nm|set|if|endif|let|unlet|source)\b
    - statement: '[!&=?]'
    - constant.number: \b[0-9]+\b
    - comment:
        start: "(^\"|[ \t]+\" |[ \t]+\"$)"
        end: $
        rules: []
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: \\.
# ----- Rule set for language: vue -----
- comment:
    start: (?i)^```vue$
    end: ^```$
    rules:
    - default:
        start: <template.*?>
        end: </template.*?>
        limit-group: symbol.tag
        rules:
        - error: <[^!].*?>
        - symbol.tag: 
            (?i)<[/]?(a|a(bbr|ddress|rea|rticle|side|udio)|b|b(ase|d(i|o)|lockquote|r|utton)|ca(nvas|ption)|center|cite|co(de|l|lgroup)|d(ata|atalist|d|el|etails|fn|ialog|l|t)|em|embed|fieldset|fig(caption|ure)|form|iframe|h[1-6]|hr|i|img|in(put|s)|kbd|keygen|label|legend|li|link|ma(in|p|rk)|menu|menuitem|met(a|er)|nav|noscript|o(bject|l|pt(group|ion)|utput)|p|param|picture|pre|progress|q|r(p|t|uby)|s|samp|se(ction|lect)|svg|small|source|span|strong|su(b|p|mmary)|textarea|time|track|u|ul|var|video|wbr)(
            .*)*?>
        - symbol.tag.extended: (?i)<[/]?(body|div|html|head(er)?|footer|title|table|t(body|d|h(ead)?|r|foot))(
            .*)*?>
        - preproc: (?i)<[/]?(script|style)( .*)*?>
        - special: '&[^;[[:space:]]]*;'
        - identifier: 
            (alt|bgcolor|class|height|href|id|label|longdesc|name|on(click|focus|load|mouseover)|placeholder|size|span|src|style|target|type|value|width)=
        - symbol: '[:=]'
        - constant.string: '"[^"]*"'
        - constant.number: (?i)#[0-9a-fA-F]{6,6}
        - symbol.tag: <|>
        - constant.string.url: "(ftp(s)?|http(s)?|git|chrome)://[^ \t]+"
        - comment: <!--.+?-->
        - comment.block:
            start: <!\-\-
            end: \-\->
            rules: []
        - symbol.tag.extended: 
            (?i)<[/]?(b-alert|b-aspect|b-avatar|b-badge|b-icon|b-breadcrumb|b-button-group|b-button-toolbar|b-button|b-calendar|b-card-text|b-card-input|b-card|b-carousel-slide|b-carousel|b-collapse|b-dropdown|b-dropdown-item|b-dropdown-divider|b-embed|b-form-checkbox-group|b-form-checkbox|b-form-datepicker|b-form-file|b-form-group|b-form-input|b-form-radio|b-form-rating|b-form-select|b-form-spinbutton|b-form-tags|b-form-textarea|b-form|b-form-timepicker|b-img-lazy|b-img|b-input-group|b-jumbotron|b-input|b-container|b-row|b-col|b-link|b-list-group|b-list-group-item|b-media|b-modal|b-nav|b-nav-item|b-nav-item-dropdown|b-nav-text|b-nav-form|b-navbar|b-navbar-brand|b-navbar-toggle|b-navbar-nav|b-overlay|b-pagination|b-pagination-nav|b-popover|b-progress|b-progress-bar|b-sidebar|b-skeleton-wrapper|b-skeleton|b-spinner|b-table|b-table-lite|b-table-simple|b-tabs|b-tab|b-time|b-toast|b-tooltip)\b
        - identifier: 
            (variant|title|show|shadow|icon|align-h|align-v|label-for|@submit|tag|img-alt|img-src|data-toggle|data-target|aria-controls|aria-expanded|aria-label|aria-disabled|tabindex|:interval|background|img-width|img-height|@sliding-start|@sliding-end|cols|header|@reset)=
        - symbol: '[:=]'
        - symbol.tag.extended: (?i)<[/]?(component|transition|transition-group|keep-alive|slot)\b
        - identifier: 
            (v-text|v-html|v-show|v-if|v-else|v-else-if|v-for|v-on|v-bind|v-model|v-slot|v-pre|v-cloak|v-once|key|ref|is|@click)=
        - symbol: '[:=]'
        - symbol.tag.extended: (?i)<[/]?(router-link|router-view)\b
        - identifier: (to|v-slot)=
        - symbol: '[:=]'
    - default:
        start: <script>
        end: </script>
        limit-group: symbol.tag
        rules:
        - include: javascript
    - default:
        start: <script[ ]+lang=("ts"|'ts')>
        end: </script>
        rules:
        - include: typescript
    - default:
        start: <style.*?>
        end: </style.*?>
        limit-group: symbol.tag
        rules:
        - include: css
# ----- Rule set for language: xml -----
- comment:
    start: (?i)^```xml$
    end: ^```$
    rules:
    - preproc:
        start: <!DOCTYPE
        end: '[/]?>'
        rules: []
    - comment:
        start: <!--
        end: -->
        rules: []
    - symbol.tag:
        start: <\??
        end: \??>
        rules:
        - identifier:
            start: ' '
            end: '='
            rules: []
        - constant.string:
            start: '"'
            end: '"'
            skip: \\.
            rules:
            - constant.specialChar: \\.
        - constant.string:
            start: "'"
            end: "'"
            skip: \\.
            rules:
            - constant.specialChar: \\.
# ----- Rule set for language: xresources -----
- comment:
    start: (?i)^```xresources$
    end: ^```$
    rules:
    - special: ^[[:alnum:]]+\*
    - identifier.var: '\*[[:alnum:]]+\:'
    - constant.number: \b[0-9]+\b
    - symbol.operator: '[*:=]'
    - constant.bool: \b(true|false)\b
    - comment: (^|[[:space:]])!([^{].*)?$
    - indent-char.whitespace: '[[:space:]]+$'
    - indent-char: "\t+ +| +\t+"
# ----- Rule set for language: yaml -----
- comment:
    start: (?i)^```yaml$
    end: ^```$
    rules:
    - type: '(^| )!!(binary|bool|float|int|map|null|omap|seq|set|str) '
    - constant: \b(YES|yes|Y|y|ON|on|TRUE|True|true|NO|no|N|n|OFF|off|FALSE|False|false)\b
    - statement: (:[[:space:]]|\[|\]|:[[:space:]]+[|>]|^[[:space:]]*- )
    - identifier: '[[:space:]][\*&][A-Za-z0-9]+'
    - type: '[-.\w]+:'
    - statement: ':'
    - special: (^---|^\.\.\.|^%YAML|^%TAG)
    - constant.string:
        start: (^| )"
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: (^| )'
        end: "'"
        skip: (\\.)|('')
        rules:
        - constant.specialChar: \\.
    - comment:
        start: '#'
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: yum -----
- comment:
    start: (?i)^```yum$
    end: ^```$
    rules:
    - identifier: ^[[:space:]]*[^=]*=
    - constant.specialChar: ^[[:space:]]*\[.*\]$
    - statement: \$(releasever|arch|basearch|uuid|YUM[0-9])
    - comment: (^|[[:space:]])#([^{].*)?$
    - indent-char.whitespace: '[[:space:]]+$'
    - indent-char: "\t+ +| +\t+"
# ----- Rule set for language: zig -----
- comment:
    start: (?i)^```zig$
    end: ^```$
    rules:
    - statement: 
        \b(addrspace|align|allowzero|and|asm|async|await|break|callconv|catch|comptime|const|continue|defer|else|errdefer|error|export|extern|fn|for|if|inline|noalias|noinline|nosuspend|or|orelse|packed|pub|resume|return|linksection|suspend|switch|test|threadlocal|try|unreachable|usingnamespace|var|volatile|while)\b
    - special: '@[a-zA-Z_]+'
    - type: 
        \b(anyframe|anytype|anyerror|anyopaque|bool|comptime_int|comptime_float|enum|f(16|32|64|80|128)|i(8|16|32|64|128)|isize|noreturn|opaque|struct|type|union|u(8|16|32|64|128)|usize|void)\b
    - type: \b(c_u?(short|int|long(long)?)|c_longdouble|c_void)\b
    - symbol.operator: '[-!|=;%.+^*:&?<>~]'
    - symbol.brackets: '[(){}]|\[|\]'
    - constant: \b(null|undefined)\b
    - constant.number: \b(0b[01_]+|0o[0-7_]+|[0-9_]+|0x[a-fA-F0-9_]+)\b
    - constant.bool: \b(true|false)\b
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\([nrt\\'"]|x[a-fA-F0-9]{2}|u{[a-fA-F0-9]+})
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - error: ..+
        - constant.specialChar: \\([nrt\\'"]|x[a-fA-F0-9]{2}|u{[a-fA-F0-9]+})
    - constant.string:
        start: \\\\
        end: $
        skip: \\.
        rules:
        - constant.specialChar: \\([nrt\\'"]|x[a-fA-F0-9]{2}|u{[a-fA-F0-9]+})
    - comment:
        start: //
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: zscript -----
- comment:
    start: (?i)^```zscript$
    end: ^```$
    rules:
    - preproc: (?i)#include
    - preproc: (?i)version
    - symbol.tag: '(?i)[a-z0-9.]+:'
    - symbol.tag: (?i)goto [a-z0-9]+[\+0-9]*
    - identifier.class: (?i)class +[a-z0-9_]+ *((:) +[a-z0-9.]+)?
    - identifier: (?i)[\.]*[a-z0-9_]+[ ]*[(]+
    - type: 
        (?i)\b(actor|object|vector2|vector3|name|string|color|sound|void|double|bool|int|float|float64|uint8|uint16|uint|int8|int16|TextureID|SpriteID|Array|voidptr|short|action|state|statelabel)\b
    - statement: 
        (?i)\b(class|default|private|static|native|return|if|else|for|while|do|deprecated|null|readonly|true|false|struct|extend|clearscope|vararg|ui|play|virtual|virtualscope|meta|Property|in|out|states|override|super|is|let|const|replaces|protected|self|abstract|enum|switch|case)\b
    - special: (?i)\b(goto|loop|stop|break|continue|fail)\b
    - symbol.operator: '[\-+/*=<>?:!~%&|]'
    - symbol.brackets: '[(){}]|\[|\]'
    - constant.bool: (?i)(\b(true|false)\b|NULL)
    - constant.number: (?i)\b([0-9][.]*[0-9]*)+?\b
    - constant.number: (?i)\b(0x[A-Fa-f0-9_]+)?\b
    - constant.number: (?i)\b(0b[0-1_]+)[FL]?\b
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\([btnfr]|'|\"|\\)
        - constant.specialChar: \\u[A-Fa-f0-9]{4}
    - constant.string:
        start: "'"
        end: "'"
        skip: \\.
        rules:
        - constant.specialChar: \\([btnfr]|'|\"|\\)
        - constant.specialChar: \\u[A-Fa-f0-9]{4}
    - comment:
        start: //
        end: $
        rules:
        - todo: (TODO|XXX|FIXME):?
    - comment:
        start: /\*
        end: \*/
        rules:
        - todo: (TODO|XXX|FIXME):?
# ----- Rule set for language: zsh -----
- comment:
    start: (?i)^```zsh$
    end: ^```$
    rules:
    - constant.number: \b[0-9]+\b
    - statement: 
        \b(always|break|bye|case|continue|disown|do|done|elif|else|esac|exit|fi|for|function|if|in|local|read|return|select|shift|then|time|until|while)\b
    - statement: (\{|\}|\(|\)|\;|\]|\[|`|\\|\$|<|>|!|=|&|\|)
    - special: -[Ldefgruwx]\b
    - special: -(eq|ne|gt|lt|ge|le|s|n|z)\b
    - statement: 
        \b((un)?alias|bindkey|builtin|cd|declare|eval|exec|export|jobs|let|popd|pushd|set|source|typeset|umask|unset)\b
    - type: 
        \b(add-zsh-hook|autoload|chdir|compinit|dirs|(dis|en)able|echotc|emulate|print|prompt(init)?|(un)?setopt|zle|zmodload|zstyle|whence)\b
    - statement: \b((g|ig)?awk|find|\w{0,4}grep|kill|killall|\w{0,4}less|make|pkill|sed|tar)\b
    - statement: 
        \b(base64|basename|cat|chcon|chgrp|chmod|chown|chroot|cksum|comm|cp|csplit|cut|date|dd|df|dir|dircolors|dirname|du|echo|env|expand|expr|factor|false|fmt|fold|head|hostid|id|install|join|link|ln|logname|ls|md5sum|mkdir|mkfifo|mknod|mktemp|mv|nice|nl|nohup|nproc|numfmt|od|paste|pathchk|pinky|pr|printenv|printf|ptx|pwd|readlink|realpath|rm|rmdir|runcon|seq|(sha1|sha224|sha256|sha384|sha512)sum|shred|shuf|sleep|sort|split|stat|stdbuf|stty|sum|sync|tac|tail|tee|test|timeout|touch|tr|true|truncate|tsort|tty|uname|unexpand|uniq|unlink|users|vdir|wc|who|whoami|yes)\b
    - identifier: ^\s+(function\s+)[0-9A-Z_]+\s+\(\)
    - identifier: \$\{?[0-9A-Z_!@#$*?-]+\}?
    - constant.string:
        start: '"'
        end: '"'
        skip: \\.
        rules:
        - constant.specialChar: \\.
    - constant.string:
        start: "'"
        end: "'"
        rules: []
    - comment:
        start: (^|\s)#
        end: $
        rules: []
- type: .*[ :]\|[ :].*
- statement: ^>.*
- type: (^|[[:space:]])(_[^ ][^_]*_|\*[^ ][^*]*\*)
- type: (^|[[:space:]])(__[^ ][^_]*__|\*\*[^ ][^*]*\*\*)
- type: (^|[[:space:]])~~[^ ][^~]*~~
- special: ^(---+|===+|___+|\*\*\*+)\s*$
- special: ^#{1,6}.*
- identifier: '^[[:space:]]*[\*+-] |^[[:space:]]*[0-9]+\. '
- preproc: (\(([CcRr]|[Tt][Mm])\)|\.{3}|(^|[[:space:]])\-\-($|[[:space:]]))
- constant: \[[^]]+\]
- constant: \[([^][]|\[[^]]*\])*\]\([^)]+\)
- underlined: '!\[[^][]*\](\([^)]+\)|\[[^]]+\])'
- underlined: https?://[^ )>]+
- special: ^```$
- special:
    start: '`'
    end: '`'
    rules: []
